// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

#if INSTR_INFO
using System;
using System.Collections.Generic;
using Iced.Intel;

namespace Iced.UnitTests.Intel.InstructionInfoTests {
	// GENERATOR-BEGIN: MiscConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class MiscInstrInfoTestConstants {
		internal const string VMM_prefix = "vmm";
		internal const string XSP = "xsp";
		internal const string XBP = "xbp";
		internal const int InstrInfoElemsPerLine = 5;
		internal const int MemorySizeElemsPerLine = 6;
		internal const int RegisterElemsPerLine = 7;
		internal const string MemSizeOption_Addr16 = "16";
		internal const string MemSizeOption_Addr32 = "32";
		internal const string MemSizeOption_Addr64 = "64";
		internal const string MemSizeOption_Vsib32 = "vsib32";
		internal const string MemSizeOption_Vsib64 = "vsib64";
	}
	// GENERATOR-END: MiscConstants

	static class InstructionInfoDicts {
		// GENERATOR-BEGIN: Dicts
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		internal static readonly Dictionary<string, OpAccess> ToAccess = new Dictionary<string, OpAccess>(8, StringComparer.Ordinal) {
			{ "n", OpAccess.None },
			{ "r", OpAccess.Read },
			{ "cr", OpAccess.CondRead },
			{ "w", OpAccess.Write },
			{ "cw", OpAccess.CondWrite },
			{ "rw", OpAccess.ReadWrite },
			{ "rcw", OpAccess.ReadCondWrite },
			{ "nma", OpAccess.NoMemAccess },
		};
		internal static readonly Dictionary<string, MemorySizeFlags> MemorySizeFlagsTable = new Dictionary<string, MemorySizeFlags>(3, StringComparer.Ordinal) {
			{ "signed", MemorySizeFlags.Signed },
			{ "bcst", MemorySizeFlags.Broadcast },
			{ "packed", MemorySizeFlags.Packed },
		};
		internal static readonly Dictionary<string, RegisterFlags> RegisterFlagsTable = new Dictionary<string, RegisterFlags>(19, StringComparer.Ordinal) {
			{ "seg", RegisterFlags.SegmentRegister },
			{ "gpr", RegisterFlags.GPR },
			{ "gpr8", RegisterFlags.GPR8 },
			{ "gpr16", RegisterFlags.GPR16 },
			{ "gpr32", RegisterFlags.GPR32 },
			{ "gpr64", RegisterFlags.GPR64 },
			{ "xmm", RegisterFlags.XMM },
			{ "ymm", RegisterFlags.YMM },
			{ "zmm", RegisterFlags.ZMM },
			{ "vec", RegisterFlags.VectorRegister },
			{ "ip", RegisterFlags.IP },
			{ "k", RegisterFlags.K },
			{ "bnd", RegisterFlags.BND },
			{ "cr", RegisterFlags.CR },
			{ "dr", RegisterFlags.DR },
			{ "tr", RegisterFlags.TR },
			{ "st", RegisterFlags.ST },
			{ "mm", RegisterFlags.MM },
			{ "tmm", RegisterFlags.TMM },
		};
		// GENERATOR-END: Dicts
	}

	// GENERATOR-BEGIN: KeysConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class InstructionInfoKeys {
		internal const string IsPrivileged = "priv";
		internal const string IsSaveRestoreInstruction = "save-restore";
		internal const string IsStackInstruction = "stack";
		internal const string IsSpecial = "special";
		internal const string RflagsRead = "fr";
		internal const string RflagsUndefined = "fu";
		internal const string RflagsWritten = "fw";
		internal const string RflagsCleared = "fc";
		internal const string RflagsSet = "fs";
		internal const string FlowControl = "flow";
		internal const string Op0Access = "op0";
		internal const string Op1Access = "op1";
		internal const string Op2Access = "op2";
		internal const string Op3Access = "op3";
		internal const string Op4Access = "op4";
		internal const string ReadRegister = "r";
		internal const string CondReadRegister = "cr";
		internal const string WriteRegister = "w";
		internal const string CondWriteRegister = "cw";
		internal const string ReadWriteRegister = "rw";
		internal const string ReadCondWriteRegister = "rcw";
		internal const string ReadMemory = "rm";
		internal const string CondReadMemory = "crm";
		internal const string ReadWriteMemory = "rwm";
		internal const string ReadCondWriteMemory = "rcwm";
		internal const string WriteMemory = "wm";
		internal const string CondWriteMemory = "cwm";
		internal const string DecoderOptions = "decopt";
		internal const string FpuTopIncrement = "fpu-inc";
		internal const string FpuConditionalTop = "fpu-cond";
		internal const string FpuWritesTop = "fpu-writes-top";
	}
	// GENERATOR-END: KeysConstants

	// GENERATOR-BEGIN: RflagsBitsConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class RflagsBitsConstants {
		internal const char AF = 'a';
		internal const char CF = 'c';
		internal const char OF = 'o';
		internal const char PF = 'p';
		internal const char SF = 's';
		internal const char ZF = 'z';
		internal const char IF = 'i';
		internal const char DF = 'd';
		internal const char AC = 'A';
		internal const char C0 = '0';
		internal const char C1 = '1';
		internal const char C2 = '2';
		internal const char C3 = '3';
		internal const char UIF = 'u';
	}
	// GENERATOR-END: RflagsBitsConstants

	// GENERATOR-BEGIN: MemorySizeFlags
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	[Flags]
	enum MemorySizeFlags : uint {
		None = 0x00000000,
		Signed = 0x00000001,
		Broadcast = 0x00000002,
		Packed = 0x00000004,
	}
	// GENERATOR-END: MemorySizeFlags

	// GENERATOR-BEGIN: RegisterFlags
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	[Flags]
	enum RegisterFlags : uint {
		None = 0x00000000,
		SegmentRegister = 0x00000001,
		GPR = 0x00000002,
		GPR8 = 0x00000004,
		GPR16 = 0x00000008,
		GPR32 = 0x00000010,
		GPR64 = 0x00000020,
		XMM = 0x00000040,
		YMM = 0x00000080,
		ZMM = 0x00000100,
		VectorRegister = 0x00000200,
		IP = 0x00000400,
		K = 0x00000800,
		BND = 0x00001000,
		CR = 0x00002000,
		DR = 0x00004000,
		TR = 0x00008000,
		ST = 0x00010000,
		MM = 0x00020000,
		TMM = 0x00040000,
	}
	// GENERATOR-END: RegisterFlags
}
#endif
