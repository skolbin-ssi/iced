// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

#nullable enable

#if ENCODER && BLOCK_ENCODER && CODE_ASSEMBLER
namespace Iced.UnitTests.Intel.AssemblerTests {
	using Iced.Intel;
	using Xunit;
	using static Iced.Intel.AssemblerRegisters;
	public sealed partial class AssemblerTests64 : AssemblerTestsBase {
		public AssemblerTests64() : base(64) { }

		[Fact]
		public void adc_reg8_reg8() {
			TestAssembler(c => c.adc(dl, bl), Instruction.Create(Code.Adc_rm8_r8, dl, bl));
		}

		[Fact]
		public void adc_m_reg8() {
			TestAssembler(c => c.adc(__byte_ptr[rcx], bl), Instruction.Create(Code.Adc_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void adc_reg16_reg16() {
			TestAssembler(c => c.adc(dx, bx), Instruction.Create(Code.Adc_rm16_r16, dx, bx));
		}

		[Fact]
		public void adc_m_reg16() {
			TestAssembler(c => c.adc(__word_ptr[rcx], bx), Instruction.Create(Code.Adc_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void adc_reg32_reg32() {
			TestAssembler(c => c.adc(edx, ebx), Instruction.Create(Code.Adc_rm32_r32, edx, ebx));
		}

		[Fact]
		public void adc_m_reg32() {
			TestAssembler(c => c.adc(__dword_ptr[rcx], ebx), Instruction.Create(Code.Adc_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void adc_reg64_reg64() {
			TestAssembler(c => c.adc(rdx, rbx), Instruction.Create(Code.Adc_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void adc_m_reg64() {
			TestAssembler(c => c.adc(__qword_ptr[rcx], rbx), Instruction.Create(Code.Adc_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void adc_reg8_m() {
			TestAssembler(c => c.adc(dl, __byte_ptr[rcx]), Instruction.Create(Code.Adc_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adc_reg16_m() {
			TestAssembler(c => c.adc(dx, __word_ptr[rcx]), Instruction.Create(Code.Adc_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adc_reg32_m() {
			TestAssembler(c => c.adc(edx, __dword_ptr[rcx]), Instruction.Create(Code.Adc_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adc_reg64_m() {
			TestAssembler(c => c.adc(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Adc_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adc_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.adc(al, -5), Instruction.Create(Code.Adc_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.adc(dl, -5), Instruction.Create(Code.Adc_rm8_imm8, dl, -5));
		}

		[Fact]
		public void adc_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.adc(ax, 16567), Instruction.Create(Code.Adc_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.adc(dx, sbyte.MinValue), Instruction.Create(Code.Adc_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.adc(dx, sbyte.MaxValue), Instruction.Create(Code.Adc_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.adc(dx, 16567), Instruction.Create(Code.Adc_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void adc_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.adc(eax, int.MaxValue), Instruction.Create(Code.Adc_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.adc(edx, sbyte.MinValue), Instruction.Create(Code.Adc_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.adc(edx, sbyte.MaxValue), Instruction.Create(Code.Adc_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.adc(edx, int.MaxValue), Instruction.Create(Code.Adc_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void adc_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.adc(rax, int.MinValue), Instruction.Create(Code.Adc_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.adc(rdx, sbyte.MinValue), Instruction.Create(Code.Adc_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.adc(rdx, sbyte.MaxValue), Instruction.Create(Code.Adc_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.adc(rdx, int.MinValue), Instruction.Create(Code.Adc_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void adc_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.adc(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Adc_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.adc(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Adc_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.adc(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Adc_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.adc(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Adc_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.adc(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Adc_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.adc(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Adc_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.adc(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Adc_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.adc(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Adc_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.adc(__word_ptr[rdx], 16567), Instruction.Create(Code.Adc_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.adc(__byte_ptr[rdx], -5), Instruction.Create(Code.Adc_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.adc(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Adc_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void adc_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.adc(al, (byte)127), Instruction.Create(Code.Adc_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.adc(dl, (byte)127), Instruction.Create(Code.Adc_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void adc_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.adc(ax, (ushort)16567), Instruction.Create(Code.Adc_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.adc(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Adc_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.adc(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Adc_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.adc(dx, (ushort)16567), Instruction.Create(Code.Adc_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void adc_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.adc(eax, (uint)int.MaxValue), Instruction.Create(Code.Adc_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.adc(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Adc_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.adc(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Adc_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.adc(edx, (uint)int.MaxValue), Instruction.Create(Code.Adc_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void adc_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.adc(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Adc_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.adc(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Adc_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.adc(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Adc_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.adc(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Adc_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.adc(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Adc_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.adc(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Adc_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.adc(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Adc_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void adcx_reg32_reg32() {
			TestAssembler(c => c.adcx(edx, ebx), Instruction.Create(Code.Adcx_r32_rm32, edx, ebx));
		}

		[Fact]
		public void adcx_reg64_reg64() {
			TestAssembler(c => c.adcx(rdx, rbx), Instruction.Create(Code.Adcx_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void adcx_reg32_m() {
			TestAssembler(c => c.adcx(edx, __dword_ptr[rcx]), Instruction.Create(Code.Adcx_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adcx_reg64_m() {
			TestAssembler(c => c.adcx(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Adcx_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void add_reg8_reg8() {
			TestAssembler(c => c.add(dl, bl), Instruction.Create(Code.Add_rm8_r8, dl, bl));
		}

		[Fact]
		public void add_m_reg8() {
			TestAssembler(c => c.add(__byte_ptr[rcx], bl), Instruction.Create(Code.Add_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void add_reg16_reg16() {
			TestAssembler(c => c.add(dx, bx), Instruction.Create(Code.Add_rm16_r16, dx, bx));
		}

		[Fact]
		public void add_m_reg16() {
			TestAssembler(c => c.add(__word_ptr[rcx], bx), Instruction.Create(Code.Add_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void add_reg32_reg32() {
			TestAssembler(c => c.add(edx, ebx), Instruction.Create(Code.Add_rm32_r32, edx, ebx));
		}

		[Fact]
		public void add_m_reg32() {
			TestAssembler(c => c.add(__dword_ptr[rcx], ebx), Instruction.Create(Code.Add_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void add_reg64_reg64() {
			TestAssembler(c => c.add(rdx, rbx), Instruction.Create(Code.Add_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void add_m_reg64() {
			TestAssembler(c => c.add(__qword_ptr[rcx], rbx), Instruction.Create(Code.Add_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void add_reg8_m() {
			TestAssembler(c => c.add(dl, __byte_ptr[rcx]), Instruction.Create(Code.Add_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void add_reg16_m() {
			TestAssembler(c => c.add(dx, __word_ptr[rcx]), Instruction.Create(Code.Add_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void add_reg32_m() {
			TestAssembler(c => c.add(edx, __dword_ptr[rcx]), Instruction.Create(Code.Add_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void add_reg64_m() {
			TestAssembler(c => c.add(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Add_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void add_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.add(al, -5), Instruction.Create(Code.Add_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.add(dl, -5), Instruction.Create(Code.Add_rm8_imm8, dl, -5));
		}

		[Fact]
		public void add_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.add(ax, 16567), Instruction.Create(Code.Add_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.add(dx, sbyte.MinValue), Instruction.Create(Code.Add_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.add(dx, sbyte.MaxValue), Instruction.Create(Code.Add_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.add(dx, 16567), Instruction.Create(Code.Add_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void add_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.add(eax, int.MaxValue), Instruction.Create(Code.Add_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.add(edx, sbyte.MinValue), Instruction.Create(Code.Add_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.add(edx, sbyte.MaxValue), Instruction.Create(Code.Add_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.add(edx, int.MaxValue), Instruction.Create(Code.Add_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void add_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.add(rax, int.MinValue), Instruction.Create(Code.Add_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.add(rdx, sbyte.MinValue), Instruction.Create(Code.Add_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.add(rdx, sbyte.MaxValue), Instruction.Create(Code.Add_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.add(rdx, int.MinValue), Instruction.Create(Code.Add_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void add_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.add(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Add_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.add(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Add_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.add(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Add_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.add(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Add_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.add(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Add_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.add(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Add_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.add(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Add_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.add(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Add_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.add(__word_ptr[rdx], 16567), Instruction.Create(Code.Add_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.add(__byte_ptr[rdx], -5), Instruction.Create(Code.Add_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.add(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Add_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void add_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.add(al, (byte)127), Instruction.Create(Code.Add_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.add(dl, (byte)127), Instruction.Create(Code.Add_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void add_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.add(ax, (ushort)16567), Instruction.Create(Code.Add_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.add(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Add_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.add(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Add_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.add(dx, (ushort)16567), Instruction.Create(Code.Add_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void add_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.add(eax, (uint)int.MaxValue), Instruction.Create(Code.Add_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.add(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Add_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.add(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Add_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.add(edx, (uint)int.MaxValue), Instruction.Create(Code.Add_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void add_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.add(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Add_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.add(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Add_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.add(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Add_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.add(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Add_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.add(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Add_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.add(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Add_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.add(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Add_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void addpd_regXMM_regXMM() {
			TestAssembler(c => c.addpd(xmm2, xmm3), Instruction.Create(Code.Addpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void addpd_regXMM_m() {
			TestAssembler(c => c.addpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void addps_regXMM_regXMM() {
			TestAssembler(c => c.addps(xmm2, xmm3), Instruction.Create(Code.Addps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void addps_regXMM_m() {
			TestAssembler(c => c.addps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void addsd_regXMM_regXMM() {
			TestAssembler(c => c.addsd(xmm2, xmm3), Instruction.Create(Code.Addsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void addsd_regXMM_m() {
			TestAssembler(c => c.addsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void addss_regXMM_regXMM() {
			TestAssembler(c => c.addss(xmm2, xmm3), Instruction.Create(Code.Addss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void addss_regXMM_m() {
			TestAssembler(c => c.addss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void addsubpd_regXMM_regXMM() {
			TestAssembler(c => c.addsubpd(xmm2, xmm3), Instruction.Create(Code.Addsubpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void addsubpd_regXMM_m() {
			TestAssembler(c => c.addsubpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addsubpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void addsubps_regXMM_regXMM() {
			TestAssembler(c => c.addsubps(xmm2, xmm3), Instruction.Create(Code.Addsubps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void addsubps_regXMM_m() {
			TestAssembler(c => c.addsubps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addsubps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adox_reg32_reg32() {
			TestAssembler(c => c.adox(edx, ebx), Instruction.Create(Code.Adox_r32_rm32, edx, ebx));
		}

		[Fact]
		public void adox_reg64_reg64() {
			TestAssembler(c => c.adox(rdx, rbx), Instruction.Create(Code.Adox_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void adox_reg32_m() {
			TestAssembler(c => c.adox(edx, __dword_ptr[rcx]), Instruction.Create(Code.Adox_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void adox_reg64_m() {
			TestAssembler(c => c.adox(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Adox_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesdec_regXMM_regXMM() {
			TestAssembler(c => c.aesdec(xmm2, xmm3), Instruction.Create(Code.Aesdec_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void aesdec_regXMM_m() {
			TestAssembler(c => c.aesdec(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesdec_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesdec128kl_regXMM_m() {
			TestAssembler(c => c.aesdec128kl(xmm2, __[rcx]), Instruction.Create(Code.Aesdec128kl_xmm_m384, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesdec256kl_regXMM_m() {
			TestAssembler(c => c.aesdec256kl(xmm2, __[rcx]), Instruction.Create(Code.Aesdec256kl_xmm_m512, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesdeclast_regXMM_regXMM() {
			TestAssembler(c => c.aesdeclast(xmm2, xmm3), Instruction.Create(Code.Aesdeclast_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void aesdeclast_regXMM_m() {
			TestAssembler(c => c.aesdeclast(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesdeclast_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesdecwide128kl_m() {
			TestAssembler(c => c.aesdecwide128kl(__[rcx]), Instruction.Create(Code.Aesdecwide128kl_m384, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesdecwide256kl_m() {
			TestAssembler(c => c.aesdecwide256kl(__[rcx]), Instruction.Create(Code.Aesdecwide256kl_m512, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesenc_regXMM_regXMM() {
			TestAssembler(c => c.aesenc(xmm2, xmm3), Instruction.Create(Code.Aesenc_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void aesenc_regXMM_m() {
			TestAssembler(c => c.aesenc(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesenc_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesenc128kl_regXMM_m() {
			TestAssembler(c => c.aesenc128kl(xmm2, __[rcx]), Instruction.Create(Code.Aesenc128kl_xmm_m384, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesenc256kl_regXMM_m() {
			TestAssembler(c => c.aesenc256kl(xmm2, __[rcx]), Instruction.Create(Code.Aesenc256kl_xmm_m512, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesenclast_regXMM_regXMM() {
			TestAssembler(c => c.aesenclast(xmm2, xmm3), Instruction.Create(Code.Aesenclast_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void aesenclast_regXMM_m() {
			TestAssembler(c => c.aesenclast(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesenclast_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesencwide128kl_m() {
			TestAssembler(c => c.aesencwide128kl(__[rcx]), Instruction.Create(Code.Aesencwide128kl_m384, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesencwide256kl_m() {
			TestAssembler(c => c.aesencwide256kl(__[rcx]), Instruction.Create(Code.Aesencwide256kl_m512, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aesimc_regXMM_regXMM() {
			TestAssembler(c => c.aesimc(xmm2, xmm3), Instruction.Create(Code.Aesimc_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void aesimc_regXMM_m() {
			TestAssembler(c => c.aesimc(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesimc_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void aeskeygenassist_regXMM_regXMM_i() {
			TestAssembler(c => c.aeskeygenassist(xmm2, xmm3, -5), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void aeskeygenassist_regXMM_m_i() {
			TestAssembler(c => c.aeskeygenassist(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void aeskeygenassist_regXMM_regXMM_u() {
			TestAssembler(c => c.aeskeygenassist(xmm2, xmm3, (byte)127), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void aeskeygenassist_regXMM_m_u() {
			TestAssembler(c => c.aeskeygenassist(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void and_reg8_reg8() {
			TestAssembler(c => c.and(dl, bl), Instruction.Create(Code.And_rm8_r8, dl, bl));
		}

		[Fact]
		public void and_m_reg8() {
			TestAssembler(c => c.and(__byte_ptr[rcx], bl), Instruction.Create(Code.And_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void and_reg16_reg16() {
			TestAssembler(c => c.and(dx, bx), Instruction.Create(Code.And_rm16_r16, dx, bx));
		}

		[Fact]
		public void and_m_reg16() {
			TestAssembler(c => c.and(__word_ptr[rcx], bx), Instruction.Create(Code.And_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void and_reg32_reg32() {
			TestAssembler(c => c.and(edx, ebx), Instruction.Create(Code.And_rm32_r32, edx, ebx));
		}

		[Fact]
		public void and_m_reg32() {
			TestAssembler(c => c.and(__dword_ptr[rcx], ebx), Instruction.Create(Code.And_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void and_reg64_reg64() {
			TestAssembler(c => c.and(rdx, rbx), Instruction.Create(Code.And_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void and_m_reg64() {
			TestAssembler(c => c.and(__qword_ptr[rcx], rbx), Instruction.Create(Code.And_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void and_reg8_m() {
			TestAssembler(c => c.and(dl, __byte_ptr[rcx]), Instruction.Create(Code.And_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void and_reg16_m() {
			TestAssembler(c => c.and(dx, __word_ptr[rcx]), Instruction.Create(Code.And_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void and_reg32_m() {
			TestAssembler(c => c.and(edx, __dword_ptr[rcx]), Instruction.Create(Code.And_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void and_reg64_m() {
			TestAssembler(c => c.and(rdx, __qword_ptr[rcx]), Instruction.Create(Code.And_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void and_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.and(al, -5), Instruction.Create(Code.And_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.and(dl, -5), Instruction.Create(Code.And_rm8_imm8, dl, -5));
		}

		[Fact]
		public void and_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.and(ax, 16567), Instruction.Create(Code.And_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.and(dx, sbyte.MinValue), Instruction.Create(Code.And_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.and(dx, sbyte.MaxValue), Instruction.Create(Code.And_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.and(dx, 16567), Instruction.Create(Code.And_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void and_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.and(eax, int.MaxValue), Instruction.Create(Code.And_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.and(edx, sbyte.MinValue), Instruction.Create(Code.And_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.and(edx, sbyte.MaxValue), Instruction.Create(Code.And_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.and(edx, int.MaxValue), Instruction.Create(Code.And_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void and_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.and(rax, int.MinValue), Instruction.Create(Code.And_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.and(rdx, sbyte.MinValue), Instruction.Create(Code.And_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.and(rdx, sbyte.MaxValue), Instruction.Create(Code.And_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.and(rdx, int.MinValue), Instruction.Create(Code.And_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void and_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.and(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.And_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.and(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.And_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.and(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.And_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.and(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.And_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.and(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.And_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.and(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.And_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.and(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.And_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.and(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.And_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.and(__word_ptr[rdx], 16567), Instruction.Create(Code.And_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.and(__byte_ptr[rdx], -5), Instruction.Create(Code.And_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.and(__zmmword_ptr[rdx], -5), Instruction.Create(Code.And_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void and_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.and(al, (byte)127), Instruction.Create(Code.And_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.and(dl, (byte)127), Instruction.Create(Code.And_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void and_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.and(ax, (ushort)16567), Instruction.Create(Code.And_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.and(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.And_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.and(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.And_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.and(dx, (ushort)16567), Instruction.Create(Code.And_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void and_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.and(eax, (uint)int.MaxValue), Instruction.Create(Code.And_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.and(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.And_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.and(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.And_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.and(edx, (uint)int.MaxValue), Instruction.Create(Code.And_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void and_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.and(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.And_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.and(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.And_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.and(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.And_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.and(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.And_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.and(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.And_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.and(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.And_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.and(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.And_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

#if !NO_VEX
		[Fact]
		public void andn_reg32_reg32_reg32() {
			TestAssembler(c => c.andn(edx, ebx, esp), Instruction.Create(Code.VEX_Andn_r32_r32_rm32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void andn_reg64_reg64_reg64() {
			TestAssembler(c => c.andn(rdx, rbx, rsp), Instruction.Create(Code.VEX_Andn_r64_r64_rm64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void andn_reg32_reg32_m() {
			TestAssembler(c => c.andn(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Andn_r32_r32_rm32, edx, ebx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void andn_reg64_reg64_m() {
			TestAssembler(c => c.andn(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Andn_r64_r64_rm64, rdx, rbx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void andnpd_regXMM_regXMM() {
			TestAssembler(c => c.andnpd(xmm2, xmm3), Instruction.Create(Code.Andnpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void andnpd_regXMM_m() {
			TestAssembler(c => c.andnpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andnpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void andnps_regXMM_regXMM() {
			TestAssembler(c => c.andnps(xmm2, xmm3), Instruction.Create(Code.Andnps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void andnps_regXMM_m() {
			TestAssembler(c => c.andnps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andnps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void andpd_regXMM_regXMM() {
			TestAssembler(c => c.andpd(xmm2, xmm3), Instruction.Create(Code.Andpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void andpd_regXMM_m() {
			TestAssembler(c => c.andpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void andps_regXMM_regXMM() {
			TestAssembler(c => c.andps(xmm2, xmm3), Instruction.Create(Code.Andps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void andps_regXMM_m() {
			TestAssembler(c => c.andps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_VEX
		[Fact]
		public void bextr_reg32_reg32_reg32() {
			TestAssembler(c => c.bextr(edx, ebx, esp), Instruction.Create(Code.VEX_Bextr_r32_rm32_r32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void bextr_reg32_m_reg32() {
			TestAssembler(c => c.bextr(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Bextr_r32_rm32_r32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void bextr_reg64_reg64_reg64() {
			TestAssembler(c => c.bextr(rdx, rbx, rsp), Instruction.Create(Code.VEX_Bextr_r64_rm64_r64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void bextr_reg64_m_reg64() {
			TestAssembler(c => c.bextr(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Bextr_r64_rm64_r64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), rsp));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg32_reg32_i() {
			TestAssembler(c => c.bextr(edx, ebx, int.MaxValue), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, edx, ebx, int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg64_reg64_i() {
			TestAssembler(c => c.bextr(rdx, rbx, int.MaxValue), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, rdx, rbx, int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg32_m_i() {
			TestAssembler(c => c.bextr(edx, __dword_ptr[rcx], int.MaxValue), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg64_m_i() {
			TestAssembler(c => c.bextr(rdx, __qword_ptr[rcx], int.MaxValue), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg32_reg32_u() {
			TestAssembler(c => c.bextr(edx, ebx, (uint)int.MaxValue), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, edx, ebx, (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg64_reg64_u() {
			TestAssembler(c => c.bextr(rdx, rbx, (uint)int.MaxValue), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, rdx, rbx, (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg32_m_u() {
			TestAssembler(c => c.bextr(edx, __dword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void bextr_reg64_m_u() {
			TestAssembler(c => c.bextr(rdx, __qword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcfill_reg32_reg32() {
			TestAssembler(c => c.blcfill(edx, ebx), Instruction.Create(Code.XOP_Blcfill_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcfill_reg64_reg64() {
			TestAssembler(c => c.blcfill(rdx, rbx), Instruction.Create(Code.XOP_Blcfill_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcfill_reg32_m() {
			TestAssembler(c => c.blcfill(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcfill_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcfill_reg64_m() {
			TestAssembler(c => c.blcfill(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcfill_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blci_reg32_reg32() {
			TestAssembler(c => c.blci(edx, ebx), Instruction.Create(Code.XOP_Blci_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blci_reg64_reg64() {
			TestAssembler(c => c.blci(rdx, rbx), Instruction.Create(Code.XOP_Blci_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blci_reg32_m() {
			TestAssembler(c => c.blci(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blci_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blci_reg64_m() {
			TestAssembler(c => c.blci(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blci_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcic_reg32_reg32() {
			TestAssembler(c => c.blcic(edx, ebx), Instruction.Create(Code.XOP_Blcic_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcic_reg64_reg64() {
			TestAssembler(c => c.blcic(rdx, rbx), Instruction.Create(Code.XOP_Blcic_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcic_reg32_m() {
			TestAssembler(c => c.blcic(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcic_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcic_reg64_m() {
			TestAssembler(c => c.blcic(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcic_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcmsk_reg32_reg32() {
			TestAssembler(c => c.blcmsk(edx, ebx), Instruction.Create(Code.XOP_Blcmsk_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcmsk_reg64_reg64() {
			TestAssembler(c => c.blcmsk(rdx, rbx), Instruction.Create(Code.XOP_Blcmsk_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcmsk_reg32_m() {
			TestAssembler(c => c.blcmsk(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcmsk_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcmsk_reg64_m() {
			TestAssembler(c => c.blcmsk(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcmsk_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcs_reg32_reg32() {
			TestAssembler(c => c.blcs(edx, ebx), Instruction.Create(Code.XOP_Blcs_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcs_reg64_reg64() {
			TestAssembler(c => c.blcs(rdx, rbx), Instruction.Create(Code.XOP_Blcs_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcs_reg32_m() {
			TestAssembler(c => c.blcs(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcs_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blcs_reg64_m() {
			TestAssembler(c => c.blcs(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcs_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void blendpd_regXMM_regXMM_i() {
			TestAssembler(c => c.blendpd(xmm2, xmm3, -5), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void blendpd_regXMM_m_i() {
			TestAssembler(c => c.blendpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void blendpd_regXMM_regXMM_u() {
			TestAssembler(c => c.blendpd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void blendpd_regXMM_m_u() {
			TestAssembler(c => c.blendpd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void blendps_regXMM_regXMM_i() {
			TestAssembler(c => c.blendps(xmm2, xmm3, -5), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void blendps_regXMM_m_i() {
			TestAssembler(c => c.blendps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void blendps_regXMM_regXMM_u() {
			TestAssembler(c => c.blendps(xmm2, xmm3, (byte)127), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void blendps_regXMM_m_u() {
			TestAssembler(c => c.blendps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void blendvpd_regXMM_regXMM() {
			TestAssembler(c => c.blendvpd(xmm2, xmm3), Instruction.Create(Code.Blendvpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void blendvpd_regXMM_m() {
			TestAssembler(c => c.blendvpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Blendvpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void blendvps_regXMM_regXMM() {
			TestAssembler(c => c.blendvps(xmm2, xmm3), Instruction.Create(Code.Blendvps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void blendvps_regXMM_m() {
			TestAssembler(c => c.blendvps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Blendvps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_XOP
		[Fact]
		public void blsfill_reg32_reg32() {
			TestAssembler(c => c.blsfill(edx, ebx), Instruction.Create(Code.XOP_Blsfill_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsfill_reg64_reg64() {
			TestAssembler(c => c.blsfill(rdx, rbx), Instruction.Create(Code.XOP_Blsfill_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsfill_reg32_m() {
			TestAssembler(c => c.blsfill(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blsfill_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsfill_reg64_m() {
			TestAssembler(c => c.blsfill(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blsfill_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsi_reg32_reg32() {
			TestAssembler(c => c.blsi(edx, ebx), Instruction.Create(Code.VEX_Blsi_r32_rm32, edx, ebx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsi_reg64_reg64() {
			TestAssembler(c => c.blsi(rdx, rbx), Instruction.Create(Code.VEX_Blsi_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsi_reg32_m() {
			TestAssembler(c => c.blsi(edx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Blsi_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsi_reg64_m() {
			TestAssembler(c => c.blsi(rdx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Blsi_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsic_reg32_reg32() {
			TestAssembler(c => c.blsic(edx, ebx), Instruction.Create(Code.XOP_Blsic_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsic_reg64_reg64() {
			TestAssembler(c => c.blsic(rdx, rbx), Instruction.Create(Code.XOP_Blsic_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsic_reg32_m() {
			TestAssembler(c => c.blsic(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blsic_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void blsic_reg64_m() {
			TestAssembler(c => c.blsic(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blsic_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsmsk_reg32_reg32() {
			TestAssembler(c => c.blsmsk(edx, ebx), Instruction.Create(Code.VEX_Blsmsk_r32_rm32, edx, ebx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsmsk_reg64_reg64() {
			TestAssembler(c => c.blsmsk(rdx, rbx), Instruction.Create(Code.VEX_Blsmsk_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsmsk_reg32_m() {
			TestAssembler(c => c.blsmsk(edx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Blsmsk_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsmsk_reg64_m() {
			TestAssembler(c => c.blsmsk(rdx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Blsmsk_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsr_reg32_reg32() {
			TestAssembler(c => c.blsr(edx, ebx), Instruction.Create(Code.VEX_Blsr_r32_rm32, edx, ebx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsr_reg64_reg64() {
			TestAssembler(c => c.blsr(rdx, rbx), Instruction.Create(Code.VEX_Blsr_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsr_reg32_m() {
			TestAssembler(c => c.blsr(edx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Blsr_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void blsr_reg64_m() {
			TestAssembler(c => c.blsr(rdx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Blsr_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void bndcl_regBND_reg64() {
			TestAssembler(c => c.bndcl(bnd2, rbx), Instruction.Create(Code.Bndcl_bnd_rm64, bnd2, rbx));
		}

		[Fact]
		public void bndcl_regBND_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bndcl(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndcl_bnd_rm64, bnd2, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.DwordPtr) */
				{
					// Skipping Bndcl_bnd_rm32 - Not supported for Bit64
				}
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.bndcl(bnd2, __zmmword_ptr[rdx]), Instruction.Create(Code.Bndcl_bnd_rm32, bnd2, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void bndcn_regBND_reg64() {
			TestAssembler(c => c.bndcn(bnd2, rbx), Instruction.Create(Code.Bndcn_bnd_rm64, bnd2, rbx));
		}

		[Fact]
		public void bndcn_regBND_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bndcn(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndcn_bnd_rm64, bnd2, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.DwordPtr) */
				{
					// Skipping Bndcn_bnd_rm32 - Not supported for Bit64
				}
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.bndcn(bnd2, __zmmword_ptr[rdx]), Instruction.Create(Code.Bndcn_bnd_rm32, bnd2, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void bndcu_regBND_reg64() {
			TestAssembler(c => c.bndcu(bnd2, rbx), Instruction.Create(Code.Bndcu_bnd_rm64, bnd2, rbx));
		}

		[Fact]
		public void bndcu_regBND_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bndcu(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndcu_bnd_rm64, bnd2, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.DwordPtr) */
				{
					// Skipping Bndcu_bnd_rm32 - Not supported for Bit64
				}
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.bndcu(bnd2, __zmmword_ptr[rdx]), Instruction.Create(Code.Bndcu_bnd_rm32, bnd2, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void bndldx_regBND_m() {
			TestAssembler(c => c.bndldx(bnd2, __byte_ptr[rcx]), Instruction.Create(Code.Bndldx_bnd_mib, bnd2, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bndmk_regBND_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bndmk(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndmk_bnd_m64, bnd2, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.DwordPtr) */
				{
					// Skipping Bndmk_bnd_m32 - Not supported for Bit64
				}
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.bndmk(bnd2, __zmmword_ptr[rdx]), Instruction.Create(Code.Bndmk_bnd_m32, bnd2, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void bndmov_regBND_regBND() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.bndmov(bnd2, bnd3), Instruction.Create(Code.Bndmov_bnd_bndm128, bnd2, bnd3));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void bndmov_m_regBND() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.bndmov(__[rcx], bnd3), Instruction.Create(Code.Bndmov_bndm128_bnd, __[rcx].ToMemoryOperand(Bitness), bnd3));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void bndmov_regBND_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.bndmov(bnd2, __[rcx]), Instruction.Create(Code.Bndmov_bnd_bndm128, bnd2, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void bndstx_m_regBND() {
			TestAssembler(c => c.bndstx(__byte_ptr[rcx], bnd3), Instruction.Create(Code.Bndstx_mib_bnd, __byte_ptr[rcx].ToMemoryOperand(Bitness), bnd3));
		}

		[Fact]
		public void bsf_reg16_reg16() {
			TestAssembler(c => c.bsf(dx, bx), Instruction.Create(Code.Bsf_r16_rm16, dx, bx));
		}

		[Fact]
		public void bsf_reg32_reg32() {
			TestAssembler(c => c.bsf(edx, ebx), Instruction.Create(Code.Bsf_r32_rm32, edx, ebx));
		}

		[Fact]
		public void bsf_reg64_reg64() {
			TestAssembler(c => c.bsf(rdx, rbx), Instruction.Create(Code.Bsf_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void bsf_reg16_m() {
			TestAssembler(c => c.bsf(dx, __word_ptr[rcx]), Instruction.Create(Code.Bsf_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bsf_reg32_m() {
			TestAssembler(c => c.bsf(edx, __dword_ptr[rcx]), Instruction.Create(Code.Bsf_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bsf_reg64_m() {
			TestAssembler(c => c.bsf(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Bsf_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bsr_reg16_reg16() {
			TestAssembler(c => c.bsr(dx, bx), Instruction.Create(Code.Bsr_r16_rm16, dx, bx));
		}

		[Fact]
		public void bsr_reg32_reg32() {
			TestAssembler(c => c.bsr(edx, ebx), Instruction.Create(Code.Bsr_r32_rm32, edx, ebx));
		}

		[Fact]
		public void bsr_reg64_reg64() {
			TestAssembler(c => c.bsr(rdx, rbx), Instruction.Create(Code.Bsr_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void bsr_reg16_m() {
			TestAssembler(c => c.bsr(dx, __word_ptr[rcx]), Instruction.Create(Code.Bsr_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bsr_reg32_m() {
			TestAssembler(c => c.bsr(edx, __dword_ptr[rcx]), Instruction.Create(Code.Bsr_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bsr_reg64_m() {
			TestAssembler(c => c.bsr(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Bsr_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void bswap_reg16() {
			TestAssembler(c => c.bswap(dx), Instruction.Create(Code.Bswap_r16, dx));
		}

		[Fact]
		public void bswap_reg32() {
			TestAssembler(c => c.bswap(edx), Instruction.Create(Code.Bswap_r32, edx));
		}

		[Fact]
		public void bswap_reg64() {
			TestAssembler(c => c.bswap(rdx), Instruction.Create(Code.Bswap_r64, rdx));
		}

		[Fact]
		public void bt_reg16_reg16() {
			TestAssembler(c => c.bt(dx, bx), Instruction.Create(Code.Bt_rm16_r16, dx, bx));
		}

		[Fact]
		public void bt_m_reg16() {
			TestAssembler(c => c.bt(__word_ptr[rcx], bx), Instruction.Create(Code.Bt_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void bt_reg32_reg32() {
			TestAssembler(c => c.bt(edx, ebx), Instruction.Create(Code.Bt_rm32_r32, edx, ebx));
		}

		[Fact]
		public void bt_m_reg32() {
			TestAssembler(c => c.bt(__dword_ptr[rcx], ebx), Instruction.Create(Code.Bt_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void bt_reg64_reg64() {
			TestAssembler(c => c.bt(rdx, rbx), Instruction.Create(Code.Bt_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void bt_m_reg64() {
			TestAssembler(c => c.bt(__qword_ptr[rcx], rbx), Instruction.Create(Code.Bt_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void bt_reg16_i() {
			TestAssembler(c => c.bt(dx, -5), Instruction.Create(Code.Bt_rm16_imm8, dx, -5));
		}

		[Fact]
		public void bt_reg32_i() {
			TestAssembler(c => c.bt(edx, -5), Instruction.Create(Code.Bt_rm32_imm8, edx, -5));
		}

		[Fact]
		public void bt_reg64_i() {
			TestAssembler(c => c.bt(rdx, -5), Instruction.Create(Code.Bt_rm64_imm8, rdx, -5));
		}

		[Fact]
		public void bt_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bt(__qword_ptr[rdx], -5), Instruction.Create(Code.Bt_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.bt(__dword_ptr[rdx], -5), Instruction.Create(Code.Bt_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.bt(__word_ptr[rdx], -5), Instruction.Create(Code.Bt_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.bt(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Bt_rm16_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void bt_reg16_u() {
			TestAssembler(c => c.bt(dx, (byte)127), Instruction.Create(Code.Bt_rm16_imm8, dx, (uint)(byte)127));
		}

		[Fact]
		public void bt_reg32_u() {
			TestAssembler(c => c.bt(edx, (byte)127), Instruction.Create(Code.Bt_rm32_imm8, edx, (uint)(byte)127));
		}

		[Fact]
		public void bt_reg64_u() {
			TestAssembler(c => c.bt(rdx, (byte)127), Instruction.Create(Code.Bt_rm64_imm8, rdx, (uint)(byte)127));
		}

		[Fact]
		public void bt_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bt(__qword_ptr[rdx], (byte)127), Instruction.Create(Code.Bt_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.bt(__dword_ptr[rdx], (byte)127), Instruction.Create(Code.Bt_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.bt(__word_ptr[rdx], (byte)127), Instruction.Create(Code.Bt_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void btc_reg16_reg16() {
			TestAssembler(c => c.btc(dx, bx), Instruction.Create(Code.Btc_rm16_r16, dx, bx));
		}

		[Fact]
		public void btc_m_reg16() {
			TestAssembler(c => c.btc(__word_ptr[rcx], bx), Instruction.Create(Code.Btc_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void btc_reg32_reg32() {
			TestAssembler(c => c.btc(edx, ebx), Instruction.Create(Code.Btc_rm32_r32, edx, ebx));
		}

		[Fact]
		public void btc_m_reg32() {
			TestAssembler(c => c.btc(__dword_ptr[rcx], ebx), Instruction.Create(Code.Btc_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void btc_reg64_reg64() {
			TestAssembler(c => c.btc(rdx, rbx), Instruction.Create(Code.Btc_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void btc_m_reg64() {
			TestAssembler(c => c.btc(__qword_ptr[rcx], rbx), Instruction.Create(Code.Btc_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void btc_reg16_i() {
			TestAssembler(c => c.btc(dx, -5), Instruction.Create(Code.Btc_rm16_imm8, dx, -5));
		}

		[Fact]
		public void btc_reg32_i() {
			TestAssembler(c => c.btc(edx, -5), Instruction.Create(Code.Btc_rm32_imm8, edx, -5));
		}

		[Fact]
		public void btc_reg64_i() {
			TestAssembler(c => c.btc(rdx, -5), Instruction.Create(Code.Btc_rm64_imm8, rdx, -5));
		}

		[Fact]
		public void btc_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.btc(__qword_ptr[rdx], -5), Instruction.Create(Code.Btc_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.btc(__dword_ptr[rdx], -5), Instruction.Create(Code.Btc_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.btc(__word_ptr[rdx], -5), Instruction.Create(Code.Btc_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.btc(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Btc_rm16_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void btc_reg16_u() {
			TestAssembler(c => c.btc(dx, (byte)127), Instruction.Create(Code.Btc_rm16_imm8, dx, (uint)(byte)127));
		}

		[Fact]
		public void btc_reg32_u() {
			TestAssembler(c => c.btc(edx, (byte)127), Instruction.Create(Code.Btc_rm32_imm8, edx, (uint)(byte)127));
		}

		[Fact]
		public void btc_reg64_u() {
			TestAssembler(c => c.btc(rdx, (byte)127), Instruction.Create(Code.Btc_rm64_imm8, rdx, (uint)(byte)127));
		}

		[Fact]
		public void btc_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.btc(__qword_ptr[rdx], (byte)127), Instruction.Create(Code.Btc_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.btc(__dword_ptr[rdx], (byte)127), Instruction.Create(Code.Btc_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.btc(__word_ptr[rdx], (byte)127), Instruction.Create(Code.Btc_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void btr_reg16_reg16() {
			TestAssembler(c => c.btr(dx, bx), Instruction.Create(Code.Btr_rm16_r16, dx, bx));
		}

		[Fact]
		public void btr_m_reg16() {
			TestAssembler(c => c.btr(__word_ptr[rcx], bx), Instruction.Create(Code.Btr_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void btr_reg32_reg32() {
			TestAssembler(c => c.btr(edx, ebx), Instruction.Create(Code.Btr_rm32_r32, edx, ebx));
		}

		[Fact]
		public void btr_m_reg32() {
			TestAssembler(c => c.btr(__dword_ptr[rcx], ebx), Instruction.Create(Code.Btr_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void btr_reg64_reg64() {
			TestAssembler(c => c.btr(rdx, rbx), Instruction.Create(Code.Btr_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void btr_m_reg64() {
			TestAssembler(c => c.btr(__qword_ptr[rcx], rbx), Instruction.Create(Code.Btr_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void btr_reg16_i() {
			TestAssembler(c => c.btr(dx, -5), Instruction.Create(Code.Btr_rm16_imm8, dx, -5));
		}

		[Fact]
		public void btr_reg32_i() {
			TestAssembler(c => c.btr(edx, -5), Instruction.Create(Code.Btr_rm32_imm8, edx, -5));
		}

		[Fact]
		public void btr_reg64_i() {
			TestAssembler(c => c.btr(rdx, -5), Instruction.Create(Code.Btr_rm64_imm8, rdx, -5));
		}

		[Fact]
		public void btr_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.btr(__qword_ptr[rdx], -5), Instruction.Create(Code.Btr_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.btr(__dword_ptr[rdx], -5), Instruction.Create(Code.Btr_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.btr(__word_ptr[rdx], -5), Instruction.Create(Code.Btr_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.btr(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Btr_rm16_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void btr_reg16_u() {
			TestAssembler(c => c.btr(dx, (byte)127), Instruction.Create(Code.Btr_rm16_imm8, dx, (uint)(byte)127));
		}

		[Fact]
		public void btr_reg32_u() {
			TestAssembler(c => c.btr(edx, (byte)127), Instruction.Create(Code.Btr_rm32_imm8, edx, (uint)(byte)127));
		}

		[Fact]
		public void btr_reg64_u() {
			TestAssembler(c => c.btr(rdx, (byte)127), Instruction.Create(Code.Btr_rm64_imm8, rdx, (uint)(byte)127));
		}

		[Fact]
		public void btr_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.btr(__qword_ptr[rdx], (byte)127), Instruction.Create(Code.Btr_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.btr(__dword_ptr[rdx], (byte)127), Instruction.Create(Code.Btr_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.btr(__word_ptr[rdx], (byte)127), Instruction.Create(Code.Btr_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void bts_reg16_reg16() {
			TestAssembler(c => c.bts(dx, bx), Instruction.Create(Code.Bts_rm16_r16, dx, bx));
		}

		[Fact]
		public void bts_m_reg16() {
			TestAssembler(c => c.bts(__word_ptr[rcx], bx), Instruction.Create(Code.Bts_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void bts_reg32_reg32() {
			TestAssembler(c => c.bts(edx, ebx), Instruction.Create(Code.Bts_rm32_r32, edx, ebx));
		}

		[Fact]
		public void bts_m_reg32() {
			TestAssembler(c => c.bts(__dword_ptr[rcx], ebx), Instruction.Create(Code.Bts_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void bts_reg64_reg64() {
			TestAssembler(c => c.bts(rdx, rbx), Instruction.Create(Code.Bts_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void bts_m_reg64() {
			TestAssembler(c => c.bts(__qword_ptr[rcx], rbx), Instruction.Create(Code.Bts_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void bts_reg16_i() {
			TestAssembler(c => c.bts(dx, -5), Instruction.Create(Code.Bts_rm16_imm8, dx, -5));
		}

		[Fact]
		public void bts_reg32_i() {
			TestAssembler(c => c.bts(edx, -5), Instruction.Create(Code.Bts_rm32_imm8, edx, -5));
		}

		[Fact]
		public void bts_reg64_i() {
			TestAssembler(c => c.bts(rdx, -5), Instruction.Create(Code.Bts_rm64_imm8, rdx, -5));
		}

		[Fact]
		public void bts_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bts(__qword_ptr[rdx], -5), Instruction.Create(Code.Bts_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.bts(__dword_ptr[rdx], -5), Instruction.Create(Code.Bts_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.bts(__word_ptr[rdx], -5), Instruction.Create(Code.Bts_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.bts(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Bts_rm16_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void bts_reg16_u() {
			TestAssembler(c => c.bts(dx, (byte)127), Instruction.Create(Code.Bts_rm16_imm8, dx, (uint)(byte)127));
		}

		[Fact]
		public void bts_reg32_u() {
			TestAssembler(c => c.bts(edx, (byte)127), Instruction.Create(Code.Bts_rm32_imm8, edx, (uint)(byte)127));
		}

		[Fact]
		public void bts_reg64_u() {
			TestAssembler(c => c.bts(rdx, (byte)127), Instruction.Create(Code.Bts_rm64_imm8, rdx, (uint)(byte)127));
		}

		[Fact]
		public void bts_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.bts(__qword_ptr[rdx], (byte)127), Instruction.Create(Code.Bts_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.bts(__dword_ptr[rdx], (byte)127), Instruction.Create(Code.Bts_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.bts(__word_ptr[rdx], (byte)127), Instruction.Create(Code.Bts_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127));
			}
			{
				// Already tested by signed version
			}
		}

#if !NO_VEX
		[Fact]
		public void bzhi_reg32_reg32_reg32() {
			TestAssembler(c => c.bzhi(edx, ebx, esp), Instruction.Create(Code.VEX_Bzhi_r32_rm32_r32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void bzhi_reg32_m_reg32() {
			TestAssembler(c => c.bzhi(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Bzhi_r32_rm32_r32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void bzhi_reg64_reg64_reg64() {
			TestAssembler(c => c.bzhi(rdx, rbx, rsp), Instruction.Create(Code.VEX_Bzhi_r64_rm64_r64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void bzhi_reg64_m_reg64() {
			TestAssembler(c => c.bzhi(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Bzhi_r64_rm64_r64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), rsp));
		}
#endif

		[Fact]
		public void call_reg16() {
			TestAssembler(c => c.call(dx), Instruction.Create(Code.Call_rm16, dx));
		}

		[Fact]
		public void call_reg64() {
			TestAssembler(c => c.call(rdx), Instruction.Create(Code.Call_rm64, rdx));
		}

		[Fact]
		public void call_m() {
			{ /* if (dst.Size == MemoryOperandSize.TwordPtr) */
				TestAssembler(c => c.call(__tword_ptr[rdx]), Instruction.Create(Code.Call_m1664, __tword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.call(__qword_ptr[rdx]), Instruction.Create(Code.Call_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.FwordPtr) */
				TestAssembler(c => c.call(__fword_ptr[rdx]), Instruction.Create(Code.Call_m1632, __fword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Call_rm32 - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.call(__word_ptr[rdx]), Instruction.Create(Code.Call_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.call(__zmmword_ptr[rdx]), Instruction.Create(Code.Call_rm16, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void call_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.call(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Call_rel32_64, 1), 1), LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void call_lu() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.call(12752), Instruction.CreateBranch(Code.Call_rel32_64, 12752), LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void cbw() {
			TestAssembler(c => c.cbw(), Instruction.Create(Code.Cbw));
		}

		[Fact]
		public void ccs_encrypt() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ccs_encrypt(), Instruction.Create(Code.Ccs_encrypt_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ccs_hash() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ccs_hash(), Instruction.Create(Code.Ccs_hash_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void cdq() {
			TestAssembler(c => c.cdq(), Instruction.Create(Code.Cdq));
		}

		[Fact]
		public void cdqe() {
			TestAssembler(c => c.cdqe(), Instruction.Create(Code.Cdqe));
		}

		[Fact]
		public void clac() {
			TestAssembler(c => c.clac(), Instruction.Create(Code.Clac));
		}

		[Fact]
		public void clc() {
			TestAssembler(c => c.clc(), Instruction.Create(Code.Clc));
		}

		[Fact]
		public void cld() {
			TestAssembler(c => c.cld(), Instruction.Create(Code.Cld));
		}

		[Fact]
		public void cldemote_m() {
			TestAssembler(c => c.cldemote(__[rcx]), Instruction.Create(Code.Cldemote_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void clflush_m() {
			TestAssembler(c => c.clflush(__[rcx]), Instruction.Create(Code.Clflush_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void clflushopt_m() {
			TestAssembler(c => c.clflushopt(__[rcx]), Instruction.Create(Code.Clflushopt_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void clgi() {
			TestAssembler(c => c.clgi(), Instruction.Create(Code.Clgi));
		}

		[Fact]
		public void cli() {
			TestAssembler(c => c.cli(), Instruction.Create(Code.Cli));
		}

		[Fact]
		public void clrssbsy_m() {
			TestAssembler(c => c.clrssbsy(__[rcx]), Instruction.Create(Code.Clrssbsy_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void clts() {
			TestAssembler(c => c.clts(), Instruction.Create(Code.Clts));
		}

		[Fact]
		public void clui() {
			TestAssembler(c => c.clui(), Instruction.Create(Code.Clui));
		}

		[Fact]
		public void clwb_m() {
			TestAssembler(c => c.clwb(__[rcx]), Instruction.Create(Code.Clwb_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void clzero() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.clzero(), Instruction.Create(Code.Clzeroq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void cmc() {
			TestAssembler(c => c.cmc(), Instruction.Create(Code.Cmc));
		}

		[Fact]
		public void cmova_reg16_reg16() {
			TestAssembler(c => c.cmova(dx, bx), Instruction.Create(Code.Cmova_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmova_reg32_reg32() {
			TestAssembler(c => c.cmova(edx, ebx), Instruction.Create(Code.Cmova_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmova_reg64_reg64() {
			TestAssembler(c => c.cmova(rdx, rbx), Instruction.Create(Code.Cmova_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmova_reg16_m() {
			TestAssembler(c => c.cmova(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmova_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmova_reg32_m() {
			TestAssembler(c => c.cmova(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmova_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmova_reg64_m() {
			TestAssembler(c => c.cmova(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmova_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovae_reg16_reg16() {
			TestAssembler(c => c.cmovae(dx, bx), Instruction.Create(Code.Cmovae_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovae_reg32_reg32() {
			TestAssembler(c => c.cmovae(edx, ebx), Instruction.Create(Code.Cmovae_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovae_reg64_reg64() {
			TestAssembler(c => c.cmovae(rdx, rbx), Instruction.Create(Code.Cmovae_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovae_reg16_m() {
			TestAssembler(c => c.cmovae(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovae_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovae_reg32_m() {
			TestAssembler(c => c.cmovae(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovae_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovae_reg64_m() {
			TestAssembler(c => c.cmovae(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovae_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovb_reg16_reg16() {
			TestAssembler(c => c.cmovb(dx, bx), Instruction.Create(Code.Cmovb_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovb_reg32_reg32() {
			TestAssembler(c => c.cmovb(edx, ebx), Instruction.Create(Code.Cmovb_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovb_reg64_reg64() {
			TestAssembler(c => c.cmovb(rdx, rbx), Instruction.Create(Code.Cmovb_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovb_reg16_m() {
			TestAssembler(c => c.cmovb(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovb_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovb_reg32_m() {
			TestAssembler(c => c.cmovb(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovb_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovb_reg64_m() {
			TestAssembler(c => c.cmovb(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovb_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovbe_reg16_reg16() {
			TestAssembler(c => c.cmovbe(dx, bx), Instruction.Create(Code.Cmovbe_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovbe_reg32_reg32() {
			TestAssembler(c => c.cmovbe(edx, ebx), Instruction.Create(Code.Cmovbe_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovbe_reg64_reg64() {
			TestAssembler(c => c.cmovbe(rdx, rbx), Instruction.Create(Code.Cmovbe_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovbe_reg16_m() {
			TestAssembler(c => c.cmovbe(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovbe_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovbe_reg32_m() {
			TestAssembler(c => c.cmovbe(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovbe_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovbe_reg64_m() {
			TestAssembler(c => c.cmovbe(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovbe_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmove_reg16_reg16() {
			TestAssembler(c => c.cmove(dx, bx), Instruction.Create(Code.Cmove_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmove_reg32_reg32() {
			TestAssembler(c => c.cmove(edx, ebx), Instruction.Create(Code.Cmove_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmove_reg64_reg64() {
			TestAssembler(c => c.cmove(rdx, rbx), Instruction.Create(Code.Cmove_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmove_reg16_m() {
			TestAssembler(c => c.cmove(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmove_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmove_reg32_m() {
			TestAssembler(c => c.cmove(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmove_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmove_reg64_m() {
			TestAssembler(c => c.cmove(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmove_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovg_reg16_reg16() {
			TestAssembler(c => c.cmovg(dx, bx), Instruction.Create(Code.Cmovg_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovg_reg32_reg32() {
			TestAssembler(c => c.cmovg(edx, ebx), Instruction.Create(Code.Cmovg_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovg_reg64_reg64() {
			TestAssembler(c => c.cmovg(rdx, rbx), Instruction.Create(Code.Cmovg_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovg_reg16_m() {
			TestAssembler(c => c.cmovg(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovg_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovg_reg32_m() {
			TestAssembler(c => c.cmovg(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovg_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovg_reg64_m() {
			TestAssembler(c => c.cmovg(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovg_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovge_reg16_reg16() {
			TestAssembler(c => c.cmovge(dx, bx), Instruction.Create(Code.Cmovge_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovge_reg32_reg32() {
			TestAssembler(c => c.cmovge(edx, ebx), Instruction.Create(Code.Cmovge_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovge_reg64_reg64() {
			TestAssembler(c => c.cmovge(rdx, rbx), Instruction.Create(Code.Cmovge_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovge_reg16_m() {
			TestAssembler(c => c.cmovge(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovge_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovge_reg32_m() {
			TestAssembler(c => c.cmovge(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovge_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovge_reg64_m() {
			TestAssembler(c => c.cmovge(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovge_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovl_reg16_reg16() {
			TestAssembler(c => c.cmovl(dx, bx), Instruction.Create(Code.Cmovl_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovl_reg32_reg32() {
			TestAssembler(c => c.cmovl(edx, ebx), Instruction.Create(Code.Cmovl_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovl_reg64_reg64() {
			TestAssembler(c => c.cmovl(rdx, rbx), Instruction.Create(Code.Cmovl_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovl_reg16_m() {
			TestAssembler(c => c.cmovl(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovl_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovl_reg32_m() {
			TestAssembler(c => c.cmovl(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovl_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovl_reg64_m() {
			TestAssembler(c => c.cmovl(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovl_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovle_reg16_reg16() {
			TestAssembler(c => c.cmovle(dx, bx), Instruction.Create(Code.Cmovle_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovle_reg32_reg32() {
			TestAssembler(c => c.cmovle(edx, ebx), Instruction.Create(Code.Cmovle_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovle_reg64_reg64() {
			TestAssembler(c => c.cmovle(rdx, rbx), Instruction.Create(Code.Cmovle_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovle_reg16_m() {
			TestAssembler(c => c.cmovle(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovle_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovle_reg32_m() {
			TestAssembler(c => c.cmovle(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovle_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovle_reg64_m() {
			TestAssembler(c => c.cmovle(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovle_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovne_reg16_reg16() {
			TestAssembler(c => c.cmovne(dx, bx), Instruction.Create(Code.Cmovne_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovne_reg32_reg32() {
			TestAssembler(c => c.cmovne(edx, ebx), Instruction.Create(Code.Cmovne_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovne_reg64_reg64() {
			TestAssembler(c => c.cmovne(rdx, rbx), Instruction.Create(Code.Cmovne_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovne_reg16_m() {
			TestAssembler(c => c.cmovne(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovne_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovne_reg32_m() {
			TestAssembler(c => c.cmovne(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovne_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovne_reg64_m() {
			TestAssembler(c => c.cmovne(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovne_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovno_reg16_reg16() {
			TestAssembler(c => c.cmovno(dx, bx), Instruction.Create(Code.Cmovno_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovno_reg32_reg32() {
			TestAssembler(c => c.cmovno(edx, ebx), Instruction.Create(Code.Cmovno_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovno_reg64_reg64() {
			TestAssembler(c => c.cmovno(rdx, rbx), Instruction.Create(Code.Cmovno_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovno_reg16_m() {
			TestAssembler(c => c.cmovno(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovno_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovno_reg32_m() {
			TestAssembler(c => c.cmovno(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovno_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovno_reg64_m() {
			TestAssembler(c => c.cmovno(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovno_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovnp_reg16_reg16() {
			TestAssembler(c => c.cmovnp(dx, bx), Instruction.Create(Code.Cmovnp_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovnp_reg32_reg32() {
			TestAssembler(c => c.cmovnp(edx, ebx), Instruction.Create(Code.Cmovnp_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovnp_reg64_reg64() {
			TestAssembler(c => c.cmovnp(rdx, rbx), Instruction.Create(Code.Cmovnp_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovnp_reg16_m() {
			TestAssembler(c => c.cmovnp(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovnp_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovnp_reg32_m() {
			TestAssembler(c => c.cmovnp(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovnp_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovnp_reg64_m() {
			TestAssembler(c => c.cmovnp(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovnp_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovns_reg16_reg16() {
			TestAssembler(c => c.cmovns(dx, bx), Instruction.Create(Code.Cmovns_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovns_reg32_reg32() {
			TestAssembler(c => c.cmovns(edx, ebx), Instruction.Create(Code.Cmovns_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovns_reg64_reg64() {
			TestAssembler(c => c.cmovns(rdx, rbx), Instruction.Create(Code.Cmovns_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovns_reg16_m() {
			TestAssembler(c => c.cmovns(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovns_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovns_reg32_m() {
			TestAssembler(c => c.cmovns(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovns_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovns_reg64_m() {
			TestAssembler(c => c.cmovns(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovns_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovo_reg16_reg16() {
			TestAssembler(c => c.cmovo(dx, bx), Instruction.Create(Code.Cmovo_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovo_reg32_reg32() {
			TestAssembler(c => c.cmovo(edx, ebx), Instruction.Create(Code.Cmovo_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovo_reg64_reg64() {
			TestAssembler(c => c.cmovo(rdx, rbx), Instruction.Create(Code.Cmovo_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovo_reg16_m() {
			TestAssembler(c => c.cmovo(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovo_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovo_reg32_m() {
			TestAssembler(c => c.cmovo(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovo_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovo_reg64_m() {
			TestAssembler(c => c.cmovo(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovo_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovp_reg16_reg16() {
			TestAssembler(c => c.cmovp(dx, bx), Instruction.Create(Code.Cmovp_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovp_reg32_reg32() {
			TestAssembler(c => c.cmovp(edx, ebx), Instruction.Create(Code.Cmovp_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovp_reg64_reg64() {
			TestAssembler(c => c.cmovp(rdx, rbx), Instruction.Create(Code.Cmovp_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovp_reg16_m() {
			TestAssembler(c => c.cmovp(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovp_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovp_reg32_m() {
			TestAssembler(c => c.cmovp(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovp_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovp_reg64_m() {
			TestAssembler(c => c.cmovp(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovp_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovs_reg16_reg16() {
			TestAssembler(c => c.cmovs(dx, bx), Instruction.Create(Code.Cmovs_r16_rm16, dx, bx));
		}

		[Fact]
		public void cmovs_reg32_reg32() {
			TestAssembler(c => c.cmovs(edx, ebx), Instruction.Create(Code.Cmovs_r32_rm32, edx, ebx));
		}

		[Fact]
		public void cmovs_reg64_reg64() {
			TestAssembler(c => c.cmovs(rdx, rbx), Instruction.Create(Code.Cmovs_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void cmovs_reg16_m() {
			TestAssembler(c => c.cmovs(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovs_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovs_reg32_m() {
			TestAssembler(c => c.cmovs(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovs_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmovs_reg64_m() {
			TestAssembler(c => c.cmovs(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovs_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmp_reg8_reg8() {
			TestAssembler(c => c.cmp(dl, bl), Instruction.Create(Code.Cmp_rm8_r8, dl, bl));
		}

		[Fact]
		public void cmp_m_reg8() {
			TestAssembler(c => c.cmp(__byte_ptr[rcx], bl), Instruction.Create(Code.Cmp_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void cmp_reg16_reg16() {
			TestAssembler(c => c.cmp(dx, bx), Instruction.Create(Code.Cmp_rm16_r16, dx, bx));
		}

		[Fact]
		public void cmp_m_reg16() {
			TestAssembler(c => c.cmp(__word_ptr[rcx], bx), Instruction.Create(Code.Cmp_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void cmp_reg32_reg32() {
			TestAssembler(c => c.cmp(edx, ebx), Instruction.Create(Code.Cmp_rm32_r32, edx, ebx));
		}

		[Fact]
		public void cmp_m_reg32() {
			TestAssembler(c => c.cmp(__dword_ptr[rcx], ebx), Instruction.Create(Code.Cmp_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void cmp_reg64_reg64() {
			TestAssembler(c => c.cmp(rdx, rbx), Instruction.Create(Code.Cmp_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void cmp_m_reg64() {
			TestAssembler(c => c.cmp(__qword_ptr[rcx], rbx), Instruction.Create(Code.Cmp_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void cmp_reg8_m() {
			TestAssembler(c => c.cmp(dl, __byte_ptr[rcx]), Instruction.Create(Code.Cmp_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmp_reg16_m() {
			TestAssembler(c => c.cmp(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmp_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmp_reg32_m() {
			TestAssembler(c => c.cmp(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmp_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmp_reg64_m() {
			TestAssembler(c => c.cmp(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmp_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmp_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.cmp(al, -5), Instruction.Create(Code.Cmp_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.cmp(dl, -5), Instruction.Create(Code.Cmp_rm8_imm8, dl, -5));
		}

		[Fact]
		public void cmp_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.cmp(ax, 16567), Instruction.Create(Code.Cmp_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.cmp(dx, sbyte.MinValue), Instruction.Create(Code.Cmp_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.cmp(dx, sbyte.MaxValue), Instruction.Create(Code.Cmp_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.cmp(dx, 16567), Instruction.Create(Code.Cmp_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void cmp_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.cmp(eax, int.MaxValue), Instruction.Create(Code.Cmp_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.cmp(edx, sbyte.MinValue), Instruction.Create(Code.Cmp_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.cmp(edx, sbyte.MaxValue), Instruction.Create(Code.Cmp_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.cmp(edx, int.MaxValue), Instruction.Create(Code.Cmp_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void cmp_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.cmp(rax, int.MinValue), Instruction.Create(Code.Cmp_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.cmp(rdx, sbyte.MinValue), Instruction.Create(Code.Cmp_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.cmp(rdx, sbyte.MaxValue), Instruction.Create(Code.Cmp_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.cmp(rdx, int.MinValue), Instruction.Create(Code.Cmp_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void cmp_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.cmp(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Cmp_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.cmp(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Cmp_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.cmp(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Cmp_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.cmp(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Cmp_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.cmp(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Cmp_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.cmp(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Cmp_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.cmp(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Cmp_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.cmp(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Cmp_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.cmp(__word_ptr[rdx], 16567), Instruction.Create(Code.Cmp_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.cmp(__byte_ptr[rdx], -5), Instruction.Create(Code.Cmp_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.cmp(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Cmp_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void cmp_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.cmp(al, (byte)127), Instruction.Create(Code.Cmp_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.cmp(dl, (byte)127), Instruction.Create(Code.Cmp_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void cmp_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.cmp(ax, (ushort)16567), Instruction.Create(Code.Cmp_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.cmp(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Cmp_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.cmp(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Cmp_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.cmp(dx, (ushort)16567), Instruction.Create(Code.Cmp_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void cmp_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.cmp(eax, (uint)int.MaxValue), Instruction.Create(Code.Cmp_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.cmp(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Cmp_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.cmp(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Cmp_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.cmp(edx, (uint)int.MaxValue), Instruction.Create(Code.Cmp_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void cmp_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.cmp(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Cmp_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.cmp(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Cmp_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.cmp(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Cmp_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.cmp(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Cmp_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.cmp(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Cmp_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.cmp(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Cmp_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.cmp(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Cmp_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void cmpeqpd_regXMM_regXMM() {
			TestAssembler(c => c.cmpeqpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 0));
		}

		[Fact]
		public void cmpeqpd_regXMM_m() {
			TestAssembler(c => c.cmpeqpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}

		[Fact]
		public void cmpeqps_regXMM_regXMM() {
			TestAssembler(c => c.cmpeqps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 0));
		}

		[Fact]
		public void cmpeqps_regXMM_m() {
			TestAssembler(c => c.cmpeqps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}

		[Fact]
		public void cmpeqsd_regXMM_regXMM() {
			TestAssembler(c => c.cmpeqsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 0));
		}

		[Fact]
		public void cmpeqsd_regXMM_m() {
			TestAssembler(c => c.cmpeqsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}

		[Fact]
		public void cmpeqss_regXMM_regXMM() {
			TestAssembler(c => c.cmpeqss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 0));
		}

		[Fact]
		public void cmpeqss_regXMM_m() {
			TestAssembler(c => c.cmpeqss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}

		[Fact]
		public void cmplepd_regXMM_regXMM() {
			TestAssembler(c => c.cmplepd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 2));
		}

		[Fact]
		public void cmplepd_regXMM_m() {
			TestAssembler(c => c.cmplepd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}

		[Fact]
		public void cmpleps_regXMM_regXMM() {
			TestAssembler(c => c.cmpleps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 2));
		}

		[Fact]
		public void cmpleps_regXMM_m() {
			TestAssembler(c => c.cmpleps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}

		[Fact]
		public void cmplesd_regXMM_regXMM() {
			TestAssembler(c => c.cmplesd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 2));
		}

		[Fact]
		public void cmplesd_regXMM_m() {
			TestAssembler(c => c.cmplesd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}

		[Fact]
		public void cmpless_regXMM_regXMM() {
			TestAssembler(c => c.cmpless(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 2));
		}

		[Fact]
		public void cmpless_regXMM_m() {
			TestAssembler(c => c.cmpless(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}

		[Fact]
		public void cmpltpd_regXMM_regXMM() {
			TestAssembler(c => c.cmpltpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 1));
		}

		[Fact]
		public void cmpltpd_regXMM_m() {
			TestAssembler(c => c.cmpltpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}

		[Fact]
		public void cmpltps_regXMM_regXMM() {
			TestAssembler(c => c.cmpltps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 1));
		}

		[Fact]
		public void cmpltps_regXMM_m() {
			TestAssembler(c => c.cmpltps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}

		[Fact]
		public void cmpltsd_regXMM_regXMM() {
			TestAssembler(c => c.cmpltsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 1));
		}

		[Fact]
		public void cmpltsd_regXMM_m() {
			TestAssembler(c => c.cmpltsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}

		[Fact]
		public void cmpltss_regXMM_regXMM() {
			TestAssembler(c => c.cmpltss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 1));
		}

		[Fact]
		public void cmpltss_regXMM_m() {
			TestAssembler(c => c.cmpltss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}

		[Fact]
		public void cmpneqpd_regXMM_regXMM() {
			TestAssembler(c => c.cmpneqpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 4));
		}

		[Fact]
		public void cmpneqpd_regXMM_m() {
			TestAssembler(c => c.cmpneqpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}

		[Fact]
		public void cmpneqps_regXMM_regXMM() {
			TestAssembler(c => c.cmpneqps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 4));
		}

		[Fact]
		public void cmpneqps_regXMM_m() {
			TestAssembler(c => c.cmpneqps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}

		[Fact]
		public void cmpneqsd_regXMM_regXMM() {
			TestAssembler(c => c.cmpneqsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 4));
		}

		[Fact]
		public void cmpneqsd_regXMM_m() {
			TestAssembler(c => c.cmpneqsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}

		[Fact]
		public void cmpneqss_regXMM_regXMM() {
			TestAssembler(c => c.cmpneqss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 4));
		}

		[Fact]
		public void cmpneqss_regXMM_m() {
			TestAssembler(c => c.cmpneqss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}

		[Fact]
		public void cmpnlepd_regXMM_regXMM() {
			TestAssembler(c => c.cmpnlepd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 6));
		}

		[Fact]
		public void cmpnlepd_regXMM_m() {
			TestAssembler(c => c.cmpnlepd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}

		[Fact]
		public void cmpnleps_regXMM_regXMM() {
			TestAssembler(c => c.cmpnleps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 6));
		}

		[Fact]
		public void cmpnleps_regXMM_m() {
			TestAssembler(c => c.cmpnleps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}

		[Fact]
		public void cmpnlesd_regXMM_regXMM() {
			TestAssembler(c => c.cmpnlesd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 6));
		}

		[Fact]
		public void cmpnlesd_regXMM_m() {
			TestAssembler(c => c.cmpnlesd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}

		[Fact]
		public void cmpnless_regXMM_regXMM() {
			TestAssembler(c => c.cmpnless(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 6));
		}

		[Fact]
		public void cmpnless_regXMM_m() {
			TestAssembler(c => c.cmpnless(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}

		[Fact]
		public void cmpnltpd_regXMM_regXMM() {
			TestAssembler(c => c.cmpnltpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 5));
		}

		[Fact]
		public void cmpnltpd_regXMM_m() {
			TestAssembler(c => c.cmpnltpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}

		[Fact]
		public void cmpnltps_regXMM_regXMM() {
			TestAssembler(c => c.cmpnltps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 5));
		}

		[Fact]
		public void cmpnltps_regXMM_m() {
			TestAssembler(c => c.cmpnltps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}

		[Fact]
		public void cmpnltsd_regXMM_regXMM() {
			TestAssembler(c => c.cmpnltsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 5));
		}

		[Fact]
		public void cmpnltsd_regXMM_m() {
			TestAssembler(c => c.cmpnltsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}

		[Fact]
		public void cmpnltss_regXMM_regXMM() {
			TestAssembler(c => c.cmpnltss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 5));
		}

		[Fact]
		public void cmpnltss_regXMM_m() {
			TestAssembler(c => c.cmpnltss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}

		[Fact]
		public void cmpordpd_regXMM_regXMM() {
			TestAssembler(c => c.cmpordpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 7));
		}

		[Fact]
		public void cmpordpd_regXMM_m() {
			TestAssembler(c => c.cmpordpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}

		[Fact]
		public void cmpordps_regXMM_regXMM() {
			TestAssembler(c => c.cmpordps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 7));
		}

		[Fact]
		public void cmpordps_regXMM_m() {
			TestAssembler(c => c.cmpordps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}

		[Fact]
		public void cmpordsd_regXMM_regXMM() {
			TestAssembler(c => c.cmpordsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 7));
		}

		[Fact]
		public void cmpordsd_regXMM_m() {
			TestAssembler(c => c.cmpordsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}

		[Fact]
		public void cmpordss_regXMM_regXMM() {
			TestAssembler(c => c.cmpordss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 7));
		}

		[Fact]
		public void cmpordss_regXMM_m() {
			TestAssembler(c => c.cmpordss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}

		[Fact]
		public void cmppd_regXMM_regXMM_i() {
			TestAssembler(c => c.cmppd(xmm2, xmm3, -5), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void cmppd_regXMM_m_i() {
			TestAssembler(c => c.cmppd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void cmppd_regXMM_regXMM_u() {
			TestAssembler(c => c.cmppd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void cmppd_regXMM_m_u() {
			TestAssembler(c => c.cmppd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void cmpps_regXMM_regXMM_i() {
			TestAssembler(c => c.cmpps(xmm2, xmm3, -5), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void cmpps_regXMM_m_i() {
			TestAssembler(c => c.cmpps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void cmpps_regXMM_regXMM_u() {
			TestAssembler(c => c.cmpps(xmm2, xmm3, (byte)127), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void cmpps_regXMM_m_u() {
			TestAssembler(c => c.cmpps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void cmpsb() {
			TestAssembler(c => c.cmpsb(), Instruction.CreateCmpsb(Bitness));
		}

		[Fact]
		public void cmpsd() {
			TestAssembler(c => c.cmpsd(), Instruction.CreateCmpsd(Bitness));
		}

		[Fact]
		public void cmpsd_regXMM_regXMM_i() {
			TestAssembler(c => c.cmpsd(xmm2, xmm3, -5), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void cmpsd_regXMM_m_i() {
			TestAssembler(c => c.cmpsd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void cmpsd_regXMM_regXMM_u() {
			TestAssembler(c => c.cmpsd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void cmpsd_regXMM_m_u() {
			TestAssembler(c => c.cmpsd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void cmpsq() {
			TestAssembler(c => c.cmpsq(), Instruction.CreateCmpsq(Bitness));
		}

		[Fact]
		public void cmpss_regXMM_regXMM_i() {
			TestAssembler(c => c.cmpss(xmm2, xmm3, -5), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void cmpss_regXMM_m_i() {
			TestAssembler(c => c.cmpss(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void cmpss_regXMM_regXMM_u() {
			TestAssembler(c => c.cmpss(xmm2, xmm3, (byte)127), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void cmpss_regXMM_m_u() {
			TestAssembler(c => c.cmpss(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void cmpsw() {
			TestAssembler(c => c.cmpsw(), Instruction.CreateCmpsw(Bitness));
		}

		[Fact]
		public void cmpunordpd_regXMM_regXMM() {
			TestAssembler(c => c.cmpunordpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, xmm3, 3));
		}

		[Fact]
		public void cmpunordpd_regXMM_m() {
			TestAssembler(c => c.cmpunordpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}

		[Fact]
		public void cmpunordps_regXMM_regXMM() {
			TestAssembler(c => c.cmpunordps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, xmm3, 3));
		}

		[Fact]
		public void cmpunordps_regXMM_m() {
			TestAssembler(c => c.cmpunordps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}

		[Fact]
		public void cmpunordsd_regXMM_regXMM() {
			TestAssembler(c => c.cmpunordsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, xmm3, 3));
		}

		[Fact]
		public void cmpunordsd_regXMM_m() {
			TestAssembler(c => c.cmpunordsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}

		[Fact]
		public void cmpunordss_regXMM_regXMM() {
			TestAssembler(c => c.cmpunordss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, xmm3, 3));
		}

		[Fact]
		public void cmpunordss_regXMM_m() {
			TestAssembler(c => c.cmpunordss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}

		[Fact]
		public void cmpxchg_reg8_reg8() {
			TestAssembler(c => c.cmpxchg(dl, bl), Instruction.Create(Code.Cmpxchg_rm8_r8, dl, bl));
		}

		[Fact]
		public void cmpxchg_m_reg8() {
			TestAssembler(c => c.cmpxchg(__byte_ptr[rcx], bl), Instruction.Create(Code.Cmpxchg_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void cmpxchg_reg16_reg16() {
			TestAssembler(c => c.cmpxchg(dx, bx), Instruction.Create(Code.Cmpxchg_rm16_r16, dx, bx));
		}

		[Fact]
		public void cmpxchg_m_reg16() {
			TestAssembler(c => c.cmpxchg(__word_ptr[rcx], bx), Instruction.Create(Code.Cmpxchg_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void cmpxchg_reg32_reg32() {
			TestAssembler(c => c.cmpxchg(edx, ebx), Instruction.Create(Code.Cmpxchg_rm32_r32, edx, ebx));
		}

		[Fact]
		public void cmpxchg_m_reg32() {
			TestAssembler(c => c.cmpxchg(__dword_ptr[rcx], ebx), Instruction.Create(Code.Cmpxchg_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void cmpxchg_reg64_reg64() {
			TestAssembler(c => c.cmpxchg(rdx, rbx), Instruction.Create(Code.Cmpxchg_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void cmpxchg_m_reg64() {
			TestAssembler(c => c.cmpxchg(__qword_ptr[rcx], rbx), Instruction.Create(Code.Cmpxchg_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void cmpxchg16b_m() {
			TestAssembler(c => c.cmpxchg16b(__[rcx]), Instruction.Create(Code.Cmpxchg16b_m128, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cmpxchg8b_m() {
			TestAssembler(c => c.cmpxchg8b(__[rcx]), Instruction.Create(Code.Cmpxchg8b_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void comisd_regXMM_regXMM() {
			TestAssembler(c => c.comisd(xmm2, xmm3), Instruction.Create(Code.Comisd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void comisd_regXMM_m() {
			TestAssembler(c => c.comisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Comisd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void comiss_regXMM_regXMM() {
			TestAssembler(c => c.comiss(xmm2, xmm3), Instruction.Create(Code.Comiss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void comiss_regXMM_m() {
			TestAssembler(c => c.comiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Comiss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cpuid() {
			TestAssembler(c => c.cpuid(), Instruction.Create(Code.Cpuid));
		}

		[Fact]
		public void cqo() {
			TestAssembler(c => c.cqo(), Instruction.Create(Code.Cqo));
		}

		[Fact]
		public void crc32_reg32_reg8() {
			TestAssembler(c => c.crc32(edx, bl), Instruction.Create(Code.Crc32_r32_rm8, edx, bl));
		}

		[Fact]
		public void crc32_reg64_reg8() {
			TestAssembler(c => c.crc32(rdx, bl), Instruction.Create(Code.Crc32_r64_rm8, rdx, bl));
		}

		[Fact]
		public void crc32_reg32_reg16() {
			TestAssembler(c => c.crc32(edx, bx), Instruction.Create(Code.Crc32_r32_rm16, edx, bx));
		}

		[Fact]
		public void crc32_reg32_reg32() {
			TestAssembler(c => c.crc32(edx, ebx), Instruction.Create(Code.Crc32_r32_rm32, edx, ebx));
		}

		[Fact]
		public void crc32_reg64_reg64() {
			TestAssembler(c => c.crc32(rdx, rbx), Instruction.Create(Code.Crc32_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void crc32_reg32_m() {
			{ /* if (src.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.crc32(edx, __dword_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm32, edx, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.crc32(edx, __word_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm16, edx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.crc32(edx, __byte_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm8, edx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.crc32(edx, __zmmword_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm8, edx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void crc32_reg64_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.crc32(rdx, __qword_ptr[rdx]), Instruction.Create(Code.Crc32_r64_rm64, rdx, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.crc32(rdx, __byte_ptr[rdx]), Instruction.Create(Code.Crc32_r64_rm8, rdx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.crc32(rdx, __zmmword_ptr[rdx]), Instruction.Create(Code.Crc32_r64_rm8, rdx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void cvtdq2pd_regXMM_regXMM() {
			TestAssembler(c => c.cvtdq2pd(xmm2, xmm3), Instruction.Create(Code.Cvtdq2pd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void cvtdq2pd_regXMM_m() {
			TestAssembler(c => c.cvtdq2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtdq2pd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtdq2ps_regXMM_regXMM() {
			TestAssembler(c => c.cvtdq2ps(xmm2, xmm3), Instruction.Create(Code.Cvtdq2ps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void cvtdq2ps_regXMM_m() {
			TestAssembler(c => c.cvtdq2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtdq2ps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtpd2dq_regXMM_regXMM() {
			TestAssembler(c => c.cvtpd2dq(xmm2, xmm3), Instruction.Create(Code.Cvtpd2dq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void cvtpd2dq_regXMM_m() {
			TestAssembler(c => c.cvtpd2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtpd2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtpd2pi_regMM_regXMM() {
			TestAssembler(c => c.cvtpd2pi(mm2, xmm3), Instruction.Create(Code.Cvtpd2pi_mm_xmmm128, mm2, xmm3));
		}

		[Fact]
		public void cvtpd2pi_regMM_m() {
			TestAssembler(c => c.cvtpd2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtpd2pi_mm_xmmm128, mm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtpd2ps_regXMM_regXMM() {
			TestAssembler(c => c.cvtpd2ps(xmm2, xmm3), Instruction.Create(Code.Cvtpd2ps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void cvtpd2ps_regXMM_m() {
			TestAssembler(c => c.cvtpd2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtpd2ps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtpi2pd_regXMM_regMM() {
			TestAssembler(c => c.cvtpi2pd(xmm2, mm3), Instruction.Create(Code.Cvtpi2pd_xmm_mmm64, xmm2, mm3));
		}

		[Fact]
		public void cvtpi2pd_regXMM_m() {
			TestAssembler(c => c.cvtpi2pd(xmm2, __qword_ptr[rcx]), Instruction.Create(Code.Cvtpi2pd_xmm_mmm64, xmm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtpi2ps_regXMM_regMM() {
			TestAssembler(c => c.cvtpi2ps(xmm2, mm3), Instruction.Create(Code.Cvtpi2ps_xmm_mmm64, xmm2, mm3));
		}

		[Fact]
		public void cvtpi2ps_regXMM_m() {
			TestAssembler(c => c.cvtpi2ps(xmm2, __qword_ptr[rcx]), Instruction.Create(Code.Cvtpi2ps_xmm_mmm64, xmm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtps2dq_regXMM_regXMM() {
			TestAssembler(c => c.cvtps2dq(xmm2, xmm3), Instruction.Create(Code.Cvtps2dq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void cvtps2dq_regXMM_m() {
			TestAssembler(c => c.cvtps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtps2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtps2pd_regXMM_regXMM() {
			TestAssembler(c => c.cvtps2pd(xmm2, xmm3), Instruction.Create(Code.Cvtps2pd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void cvtps2pd_regXMM_m() {
			TestAssembler(c => c.cvtps2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtps2pd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtps2pi_regMM_regXMM() {
			TestAssembler(c => c.cvtps2pi(mm2, xmm3), Instruction.Create(Code.Cvtps2pi_mm_xmmm64, mm2, xmm3));
		}

		[Fact]
		public void cvtps2pi_regMM_m() {
			TestAssembler(c => c.cvtps2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtps2pi_mm_xmmm64, mm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtsd2si_reg32_regXMM() {
			TestAssembler(c => c.cvtsd2si(edx, xmm3), Instruction.Create(Code.Cvtsd2si_r32_xmmm64, edx, xmm3));
		}

		[Fact]
		public void cvtsd2si_reg64_regXMM() {
			TestAssembler(c => c.cvtsd2si(rdx, xmm3), Instruction.Create(Code.Cvtsd2si_r64_xmmm64, rdx, xmm3));
		}

		[Fact]
		public void cvtsd2si_reg32_m() {
			TestAssembler(c => c.cvtsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtsd2si_r32_xmmm64, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtsd2si_reg64_m() {
			TestAssembler(c => c.cvtsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtsd2si_r64_xmmm64, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtsd2ss_regXMM_regXMM() {
			TestAssembler(c => c.cvtsd2ss(xmm2, xmm3), Instruction.Create(Code.Cvtsd2ss_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void cvtsd2ss_regXMM_m() {
			TestAssembler(c => c.cvtsd2ss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtsd2ss_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtsi2sd_regXMM_reg32() {
			TestAssembler(c => c.cvtsi2sd(xmm2, ebx), Instruction.Create(Code.Cvtsi2sd_xmm_rm32, xmm2, ebx));
		}

		[Fact]
		public void cvtsi2sd_regXMM_reg64() {
			TestAssembler(c => c.cvtsi2sd(xmm2, rbx), Instruction.Create(Code.Cvtsi2sd_xmm_rm64, xmm2, rbx));
		}

		[Fact]
		public void cvtsi2sd_regXMM_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.cvtsi2sd(xmm2, __qword_ptr[rdx]), Instruction.Create(Code.Cvtsi2sd_xmm_rm64, xmm2, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.cvtsi2sd(xmm2, __dword_ptr[rdx]), Instruction.Create(Code.Cvtsi2sd_xmm_rm32, xmm2, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.cvtsi2sd(xmm2, __zmmword_ptr[rdx]), Instruction.Create(Code.Cvtsi2sd_xmm_rm32, xmm2, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void cvtsi2ss_regXMM_reg32() {
			TestAssembler(c => c.cvtsi2ss(xmm2, ebx), Instruction.Create(Code.Cvtsi2ss_xmm_rm32, xmm2, ebx));
		}

		[Fact]
		public void cvtsi2ss_regXMM_reg64() {
			TestAssembler(c => c.cvtsi2ss(xmm2, rbx), Instruction.Create(Code.Cvtsi2ss_xmm_rm64, xmm2, rbx));
		}

		[Fact]
		public void cvtsi2ss_regXMM_m() {
			{ /* if (src.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.cvtsi2ss(xmm2, __qword_ptr[rdx]), Instruction.Create(Code.Cvtsi2ss_xmm_rm64, xmm2, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.cvtsi2ss(xmm2, __dword_ptr[rdx]), Instruction.Create(Code.Cvtsi2ss_xmm_rm32, xmm2, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.cvtsi2ss(xmm2, __zmmword_ptr[rdx]), Instruction.Create(Code.Cvtsi2ss_xmm_rm32, xmm2, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void cvtss2sd_regXMM_regXMM() {
			TestAssembler(c => c.cvtss2sd(xmm2, xmm3), Instruction.Create(Code.Cvtss2sd_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void cvtss2sd_regXMM_m() {
			TestAssembler(c => c.cvtss2sd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtss2sd_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtss2si_reg32_regXMM() {
			TestAssembler(c => c.cvtss2si(edx, xmm3), Instruction.Create(Code.Cvtss2si_r32_xmmm32, edx, xmm3));
		}

		[Fact]
		public void cvtss2si_reg64_regXMM() {
			TestAssembler(c => c.cvtss2si(rdx, xmm3), Instruction.Create(Code.Cvtss2si_r64_xmmm32, rdx, xmm3));
		}

		[Fact]
		public void cvtss2si_reg32_m() {
			TestAssembler(c => c.cvtss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtss2si_r32_xmmm32, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvtss2si_reg64_m() {
			TestAssembler(c => c.cvtss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtss2si_r64_xmmm32, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttpd2dq_regXMM_regXMM() {
			TestAssembler(c => c.cvttpd2dq(xmm2, xmm3), Instruction.Create(Code.Cvttpd2dq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void cvttpd2dq_regXMM_m() {
			TestAssembler(c => c.cvttpd2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttpd2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttpd2pi_regMM_regXMM() {
			TestAssembler(c => c.cvttpd2pi(mm2, xmm3), Instruction.Create(Code.Cvttpd2pi_mm_xmmm128, mm2, xmm3));
		}

		[Fact]
		public void cvttpd2pi_regMM_m() {
			TestAssembler(c => c.cvttpd2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttpd2pi_mm_xmmm128, mm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttps2dq_regXMM_regXMM() {
			TestAssembler(c => c.cvttps2dq(xmm2, xmm3), Instruction.Create(Code.Cvttps2dq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void cvttps2dq_regXMM_m() {
			TestAssembler(c => c.cvttps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttps2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttps2pi_regMM_regXMM() {
			TestAssembler(c => c.cvttps2pi(mm2, xmm3), Instruction.Create(Code.Cvttps2pi_mm_xmmm64, mm2, xmm3));
		}

		[Fact]
		public void cvttps2pi_regMM_m() {
			TestAssembler(c => c.cvttps2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttps2pi_mm_xmmm64, mm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttsd2si_reg32_regXMM() {
			TestAssembler(c => c.cvttsd2si(edx, xmm3), Instruction.Create(Code.Cvttsd2si_r32_xmmm64, edx, xmm3));
		}

		[Fact]
		public void cvttsd2si_reg64_regXMM() {
			TestAssembler(c => c.cvttsd2si(rdx, xmm3), Instruction.Create(Code.Cvttsd2si_r64_xmmm64, rdx, xmm3));
		}

		[Fact]
		public void cvttsd2si_reg32_m() {
			TestAssembler(c => c.cvttsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttsd2si_r32_xmmm64, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttsd2si_reg64_m() {
			TestAssembler(c => c.cvttsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttsd2si_r64_xmmm64, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttss2si_reg32_regXMM() {
			TestAssembler(c => c.cvttss2si(edx, xmm3), Instruction.Create(Code.Cvttss2si_r32_xmmm32, edx, xmm3));
		}

		[Fact]
		public void cvttss2si_reg64_regXMM() {
			TestAssembler(c => c.cvttss2si(rdx, xmm3), Instruction.Create(Code.Cvttss2si_r64_xmmm32, rdx, xmm3));
		}

		[Fact]
		public void cvttss2si_reg32_m() {
			TestAssembler(c => c.cvttss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttss2si_r32_xmmm32, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cvttss2si_reg64_m() {
			TestAssembler(c => c.cvttss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttss2si_r64_xmmm32, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void cwd() {
			TestAssembler(c => c.cwd(), Instruction.Create(Code.Cwd));
		}

		[Fact]
		public void cwde() {
			TestAssembler(c => c.cwde(), Instruction.Create(Code.Cwde));
		}

		[Fact]
		public void dec_reg8() {
			TestAssembler(c => c.dec(dl), Instruction.Create(Code.Dec_rm8, dl));
		}

		[Fact]
		public void dec_reg16() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.dec(dx), Instruction.Create(Code.Dec_rm16, dx));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void dec_reg32() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.dec(edx), Instruction.Create(Code.Dec_rm32, edx));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void dec_reg64() {
			TestAssembler(c => c.dec(rdx), Instruction.Create(Code.Dec_rm64, rdx));
		}

		[Fact]
		public void dec_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.dec(__qword_ptr[rdx]), Instruction.Create(Code.Dec_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.dec(__dword_ptr[rdx]), Instruction.Create(Code.Dec_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.dec(__word_ptr[rdx]), Instruction.Create(Code.Dec_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.dec(__byte_ptr[rdx]), Instruction.Create(Code.Dec_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.dec(__zmmword_ptr[rdx]), Instruction.Create(Code.Dec_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void div_reg8() {
			TestAssembler(c => c.div(dl), Instruction.Create(Code.Div_rm8, dl));
		}

		[Fact]
		public void div_reg16() {
			TestAssembler(c => c.div(dx), Instruction.Create(Code.Div_rm16, dx));
		}

		[Fact]
		public void div_reg32() {
			TestAssembler(c => c.div(edx), Instruction.Create(Code.Div_rm32, edx));
		}

		[Fact]
		public void div_reg64() {
			TestAssembler(c => c.div(rdx), Instruction.Create(Code.Div_rm64, rdx));
		}

		[Fact]
		public void div_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.div(__qword_ptr[rdx]), Instruction.Create(Code.Div_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.div(__dword_ptr[rdx]), Instruction.Create(Code.Div_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.div(__word_ptr[rdx]), Instruction.Create(Code.Div_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.div(__byte_ptr[rdx]), Instruction.Create(Code.Div_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.div(__zmmword_ptr[rdx]), Instruction.Create(Code.Div_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void divpd_regXMM_regXMM() {
			TestAssembler(c => c.divpd(xmm2, xmm3), Instruction.Create(Code.Divpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void divpd_regXMM_m() {
			TestAssembler(c => c.divpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void divps_regXMM_regXMM() {
			TestAssembler(c => c.divps(xmm2, xmm3), Instruction.Create(Code.Divps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void divps_regXMM_m() {
			TestAssembler(c => c.divps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void divsd_regXMM_regXMM() {
			TestAssembler(c => c.divsd(xmm2, xmm3), Instruction.Create(Code.Divsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void divsd_regXMM_m() {
			TestAssembler(c => c.divsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void divss_regXMM_regXMM() {
			TestAssembler(c => c.divss(xmm2, xmm3), Instruction.Create(Code.Divss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void divss_regXMM_m() {
			TestAssembler(c => c.divss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void dppd_regXMM_regXMM_i() {
			TestAssembler(c => c.dppd(xmm2, xmm3, -5), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void dppd_regXMM_m_i() {
			TestAssembler(c => c.dppd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void dppd_regXMM_regXMM_u() {
			TestAssembler(c => c.dppd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void dppd_regXMM_m_u() {
			TestAssembler(c => c.dppd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void dpps_regXMM_regXMM_i() {
			TestAssembler(c => c.dpps(xmm2, xmm3, -5), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void dpps_regXMM_m_i() {
			TestAssembler(c => c.dpps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void dpps_regXMM_regXMM_u() {
			TestAssembler(c => c.dpps(xmm2, xmm3, (byte)127), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void dpps_regXMM_m_u() {
			TestAssembler(c => c.dpps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void emms() {
			TestAssembler(c => c.emms(), Instruction.Create(Code.Emms));
		}

		[Fact]
		public void encls() {
			TestAssembler(c => c.encls(), Instruction.Create(Code.Encls));
		}

		[Fact]
		public void enclu() {
			TestAssembler(c => c.enclu(), Instruction.Create(Code.Enclu));
		}

		[Fact]
		public void enclv() {
			TestAssembler(c => c.enclv(), Instruction.Create(Code.Enclv));
		}

		[Fact]
		public void encodekey128_reg32_reg32() {
			TestAssembler(c => c.encodekey128(edx, ebx), Instruction.Create(Code.Encodekey128_r32_r32, edx, ebx));
		}

		[Fact]
		public void encodekey256_reg32_reg32() {
			TestAssembler(c => c.encodekey256(edx, ebx), Instruction.Create(Code.Encodekey256_r32_r32, edx, ebx));
		}

		[Fact]
		public void endbr32() {
			TestAssembler(c => c.endbr32(), Instruction.Create(Code.Endbr32));
		}

		[Fact]
		public void endbr64() {
			TestAssembler(c => c.endbr64(), Instruction.Create(Code.Endbr64));
		}

		[Fact]
		public void enqcmd_reg32_m() {
			TestAssembler(c => c.enqcmd(edx, __[ecx]), Instruction.Create(Code.Enqcmd_r32_m512, edx, __[ecx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void enqcmd_reg64_m() {
			TestAssembler(c => c.enqcmd(rdx, __[rcx]), Instruction.Create(Code.Enqcmd_r64_m512, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void enqcmds_reg32_m() {
			TestAssembler(c => c.enqcmds(edx, __[ecx]), Instruction.Create(Code.Enqcmds_r32_m512, edx, __[ecx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void enqcmds_reg64_m() {
			TestAssembler(c => c.enqcmds(rdx, __[rcx]), Instruction.Create(Code.Enqcmds_r64_m512, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void enter_i_i() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.enter(16567, -5), Instruction.Create(Code.Enterq_imm16_imm8, 16567, -5));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void enter_u_u() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.enter((ushort)16567, (byte)127), Instruction.Create(Code.Enterq_imm16_imm8, (uint)(ushort)16567, (uint)(byte)127));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void erets() {
			TestAssembler(c => c.erets(), Instruction.Create(Code.Erets));
		}

		[Fact]
		public void eretu() {
			TestAssembler(c => c.eretu(), Instruction.Create(Code.Eretu));
		}

		[Fact]
		public void extractps_reg32_regXMM_i() {
			TestAssembler(c => c.extractps(edx, xmm3, -5), Instruction.Create(Code.Extractps_rm32_xmm_imm8, edx, xmm3, -5));
		}

		[Fact]
		public void extractps_reg64_regXMM_i() {
			TestAssembler(c => c.extractps(rdx, xmm3, -5), Instruction.Create(Code.Extractps_r64m32_xmm_imm8, rdx, xmm3, -5));
		}

		[Fact]
		public void extractps_m_regXMM_i() {
			TestAssembler(c => c.extractps(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Extractps_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5));
		}

		[Fact]
		public void extractps_reg32_regXMM_u() {
			TestAssembler(c => c.extractps(edx, xmm3, (byte)127), Instruction.Create(Code.Extractps_rm32_xmm_imm8, edx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void extractps_reg64_regXMM_u() {
			TestAssembler(c => c.extractps(rdx, xmm3, (byte)127), Instruction.Create(Code.Extractps_r64m32_xmm_imm8, rdx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void extractps_m_regXMM_u() {
			TestAssembler(c => c.extractps(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.Extractps_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127));
		}

		[Fact]
		public void extrq_regXMM_regXMM() {
			TestAssembler(c => c.extrq(xmm2, xmm3), Instruction.Create(Code.Extrq_xmm_xmm, xmm2, xmm3));
		}

		[Fact]
		public void extrq_regXMM_i_i() {
			TestAssembler(c => c.extrq(xmm2, -5, -5), Instruction.Create(Code.Extrq_xmm_imm8_imm8, xmm2, -5, -5));
		}

		[Fact]
		public void extrq_regXMM_u_u() {
			TestAssembler(c => c.extrq(xmm2, (byte)127, (byte)127), Instruction.Create(Code.Extrq_xmm_imm8_imm8, xmm2, (uint)(byte)127, (uint)(byte)127));
		}

		[Fact]
		public void f2xm1() {
			TestAssembler(c => c.f2xm1(), Instruction.Create(Code.F2xm1));
		}

		[Fact]
		public void fabs() {
			TestAssembler(c => c.fabs(), Instruction.Create(Code.Fabs));
		}

		[Fact]
		public void fadd_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fadd(__qword_ptr[rdx]), Instruction.Create(Code.Fadd_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fadd(__dword_ptr[rdx]), Instruction.Create(Code.Fadd_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fadd(__zmmword_ptr[rdx]), Instruction.Create(Code.Fadd_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fadd_regST_regST() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fadd(st0, st1), Instruction.Create(Code.Fadd_st0_sti, st0, st1));
			} /* else */ TestAssembler(c => c.fadd(st1, st0), Instruction.Create(Code.Fadd_sti_st0, st1, st0));
		}

		[Fact]
		public void faddp_regST_regST() {
			TestAssembler(c => c.faddp(st1, st0), Instruction.Create(Code.Faddp_sti_st0, st1, st0));
		}

		[Fact]
		public void fbld_m() {
			TestAssembler(c => c.fbld(__[rcx]), Instruction.Create(Code.Fbld_m80bcd, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fbstp_m() {
			TestAssembler(c => c.fbstp(__[rcx]), Instruction.Create(Code.Fbstp_m80bcd, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fchs() {
			TestAssembler(c => c.fchs(), Instruction.Create(Code.Fchs));
		}

		[Fact]
		public void fclex() {
			TestAssembler(c => c.fclex(), Instruction.Create(Code.Fclex), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fcmovb_regST_regST() {
			TestAssembler(c => c.fcmovb(st0, st1), Instruction.Create(Code.Fcmovb_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmovbe_regST_regST() {
			TestAssembler(c => c.fcmovbe(st0, st1), Instruction.Create(Code.Fcmovbe_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmove_regST_regST() {
			TestAssembler(c => c.fcmove(st0, st1), Instruction.Create(Code.Fcmove_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmovnb_regST_regST() {
			TestAssembler(c => c.fcmovnb(st0, st1), Instruction.Create(Code.Fcmovnb_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmovnbe_regST_regST() {
			TestAssembler(c => c.fcmovnbe(st0, st1), Instruction.Create(Code.Fcmovnbe_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmovne_regST_regST() {
			TestAssembler(c => c.fcmovne(st0, st1), Instruction.Create(Code.Fcmovne_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmovnu_regST_regST() {
			TestAssembler(c => c.fcmovnu(st0, st1), Instruction.Create(Code.Fcmovnu_st0_sti, st0, st1));
		}

		[Fact]
		public void fcmovu_regST_regST() {
			TestAssembler(c => c.fcmovu(st0, st1), Instruction.Create(Code.Fcmovu_st0_sti, st0, st1));
		}

		[Fact]
		public void fcom_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fcom(__qword_ptr[rdx]), Instruction.Create(Code.Fcom_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fcom(__dword_ptr[rdx]), Instruction.Create(Code.Fcom_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fcom(__zmmword_ptr[rdx]), Instruction.Create(Code.Fcom_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fcom_regST_regST() {
			TestAssembler(c => c.fcom(st0, st1), Instruction.Create(Code.Fcom_st0_sti, st0, st1));
		}

		[Fact]
		public void fcomi_regST_regST() {
			TestAssembler(c => c.fcomi(st0, st1), Instruction.Create(Code.Fcomi_st0_sti, st0, st1));
		}

		[Fact]
		public void fcomip_regST_regST() {
			TestAssembler(c => c.fcomip(st0, st1), Instruction.Create(Code.Fcomip_st0_sti, st0, st1));
		}

		[Fact]
		public void fcomp_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fcomp(__qword_ptr[rdx]), Instruction.Create(Code.Fcomp_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fcomp(__dword_ptr[rdx]), Instruction.Create(Code.Fcomp_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fcomp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fcomp_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fcomp_regST_regST() {
			TestAssembler(c => c.fcomp(st0, st1), Instruction.Create(Code.Fcomp_st0_sti, st0, st1));
		}

		[Fact]
		public void fcompp() {
			TestAssembler(c => c.fcompp(), Instruction.Create(Code.Fcompp));
		}

		[Fact]
		public void fcos() {
			TestAssembler(c => c.fcos(), Instruction.Create(Code.Fcos));
		}

		[Fact]
		public void fdecstp() {
			TestAssembler(c => c.fdecstp(), Instruction.Create(Code.Fdecstp));
		}

		[Fact]
		public void fdisi() {
			TestAssembler(c => c.fdisi(), Instruction.Create(Code.Fdisi), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fdiv_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fdiv(__qword_ptr[rdx]), Instruction.Create(Code.Fdiv_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fdiv(__dword_ptr[rdx]), Instruction.Create(Code.Fdiv_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fdiv(__zmmword_ptr[rdx]), Instruction.Create(Code.Fdiv_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fdiv_regST_regST() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fdiv(st0, st1), Instruction.Create(Code.Fdiv_st0_sti, st0, st1));
			} /* else */ TestAssembler(c => c.fdiv(st1, st0), Instruction.Create(Code.Fdiv_sti_st0, st1, st0));
		}

		[Fact]
		public void fdivp_regST_regST() {
			TestAssembler(c => c.fdivp(st1, st0), Instruction.Create(Code.Fdivp_sti_st0, st1, st0));
		}

		[Fact]
		public void fdivr_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fdivr(__qword_ptr[rdx]), Instruction.Create(Code.Fdivr_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fdivr(__dword_ptr[rdx]), Instruction.Create(Code.Fdivr_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fdivr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fdivr_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fdivr_regST_regST() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fdivr(st0, st1), Instruction.Create(Code.Fdivr_st0_sti, st0, st1));
			} /* else */ TestAssembler(c => c.fdivr(st1, st0), Instruction.Create(Code.Fdivr_sti_st0, st1, st0));
		}

		[Fact]
		public void fdivrp_regST_regST() {
			TestAssembler(c => c.fdivrp(st1, st0), Instruction.Create(Code.Fdivrp_sti_st0, st1, st0));
		}

		[Fact]
		public void femms() {
			TestAssembler(c => c.femms(), Instruction.Create(Code.Femms));
		}

		[Fact]
		public void feni() {
			TestAssembler(c => c.feni(), Instruction.Create(Code.Feni), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void ffree_regST() {
			TestAssembler(c => c.ffree(st1), Instruction.Create(Code.Ffree_sti, st1));
		}

		[Fact]
		public void ffreep_regST() {
			TestAssembler(c => c.ffreep(st1), Instruction.Create(Code.Ffreep_sti, st1));
		}

		[Fact]
		public void fiadd_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fiadd(__dword_ptr[rdx]), Instruction.Create(Code.Fiadd_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fiadd(__word_ptr[rdx]), Instruction.Create(Code.Fiadd_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fiadd(__zmmword_ptr[rdx]), Instruction.Create(Code.Fiadd_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void ficom_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.ficom(__dword_ptr[rdx]), Instruction.Create(Code.Ficom_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.ficom(__word_ptr[rdx]), Instruction.Create(Code.Ficom_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.ficom(__zmmword_ptr[rdx]), Instruction.Create(Code.Ficom_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void ficomp_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.ficomp(__dword_ptr[rdx]), Instruction.Create(Code.Ficomp_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.ficomp(__word_ptr[rdx]), Instruction.Create(Code.Ficomp_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.ficomp(__zmmword_ptr[rdx]), Instruction.Create(Code.Ficomp_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fidiv_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fidiv(__dword_ptr[rdx]), Instruction.Create(Code.Fidiv_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fidiv(__word_ptr[rdx]), Instruction.Create(Code.Fidiv_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fidiv(__zmmword_ptr[rdx]), Instruction.Create(Code.Fidiv_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fidivr_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fidivr(__dword_ptr[rdx]), Instruction.Create(Code.Fidivr_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fidivr(__word_ptr[rdx]), Instruction.Create(Code.Fidivr_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fidivr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fidivr_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fild_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fild(__qword_ptr[rdx]), Instruction.Create(Code.Fild_m64int, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fild(__dword_ptr[rdx]), Instruction.Create(Code.Fild_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fild(__word_ptr[rdx]), Instruction.Create(Code.Fild_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fild(__zmmword_ptr[rdx]), Instruction.Create(Code.Fild_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fimul_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fimul(__dword_ptr[rdx]), Instruction.Create(Code.Fimul_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fimul(__word_ptr[rdx]), Instruction.Create(Code.Fimul_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fimul(__zmmword_ptr[rdx]), Instruction.Create(Code.Fimul_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fincstp() {
			TestAssembler(c => c.fincstp(), Instruction.Create(Code.Fincstp));
		}

		[Fact]
		public void finit() {
			TestAssembler(c => c.finit(), Instruction.Create(Code.Finit), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fist_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fist(__dword_ptr[rdx]), Instruction.Create(Code.Fist_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fist(__word_ptr[rdx]), Instruction.Create(Code.Fist_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fist(__zmmword_ptr[rdx]), Instruction.Create(Code.Fist_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fistp_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fistp(__qword_ptr[rdx]), Instruction.Create(Code.Fistp_m64int, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fistp(__dword_ptr[rdx]), Instruction.Create(Code.Fistp_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fistp(__word_ptr[rdx]), Instruction.Create(Code.Fistp_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fistp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fistp_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fisttp_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fisttp(__qword_ptr[rdx]), Instruction.Create(Code.Fisttp_m64int, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fisttp(__dword_ptr[rdx]), Instruction.Create(Code.Fisttp_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fisttp(__word_ptr[rdx]), Instruction.Create(Code.Fisttp_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fisttp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fisttp_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fisub_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fisub(__dword_ptr[rdx]), Instruction.Create(Code.Fisub_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fisub(__word_ptr[rdx]), Instruction.Create(Code.Fisub_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fisub(__zmmword_ptr[rdx]), Instruction.Create(Code.Fisub_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fisubr_m() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fisubr(__dword_ptr[rdx]), Instruction.Create(Code.Fisubr_m32int, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.fisubr(__word_ptr[rdx]), Instruction.Create(Code.Fisubr_m16int, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fisubr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fisubr_m16int, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fld_regST() {
			TestAssembler(c => c.fld(st1), Instruction.Create(Code.Fld_sti, st1));
		}

		[Fact]
		public void fld_m() {
			{ /* if (dst.Size == MemoryOperandSize.TwordPtr) */
				TestAssembler(c => c.fld(__tword_ptr[rdx]), Instruction.Create(Code.Fld_m80fp, __tword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fld(__qword_ptr[rdx]), Instruction.Create(Code.Fld_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fld(__dword_ptr[rdx]), Instruction.Create(Code.Fld_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fld(__zmmword_ptr[rdx]), Instruction.Create(Code.Fld_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fld1() {
			TestAssembler(c => c.fld1(), Instruction.Create(Code.Fld1));
		}

		[Fact]
		public void fldcw_m() {
			TestAssembler(c => c.fldcw(__[rcx]), Instruction.Create(Code.Fldcw_m2byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fldenv_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fldenv(__[rcx]), Instruction.Create(Code.Fldenv_m28byte, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fldl2e() {
			TestAssembler(c => c.fldl2e(), Instruction.Create(Code.Fldl2e));
		}

		[Fact]
		public void fldl2t() {
			TestAssembler(c => c.fldl2t(), Instruction.Create(Code.Fldl2t));
		}

		[Fact]
		public void fldlg2() {
			TestAssembler(c => c.fldlg2(), Instruction.Create(Code.Fldlg2));
		}

		[Fact]
		public void fldln2() {
			TestAssembler(c => c.fldln2(), Instruction.Create(Code.Fldln2));
		}

		[Fact]
		public void fldpi() {
			TestAssembler(c => c.fldpi(), Instruction.Create(Code.Fldpi));
		}

		[Fact]
		public void fldz() {
			TestAssembler(c => c.fldz(), Instruction.Create(Code.Fldz));
		}

		[Fact]
		public void fmul_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fmul(__qword_ptr[rdx]), Instruction.Create(Code.Fmul_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fmul(__dword_ptr[rdx]), Instruction.Create(Code.Fmul_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fmul(__zmmword_ptr[rdx]), Instruction.Create(Code.Fmul_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fmul_regST_regST() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fmul(st0, st1), Instruction.Create(Code.Fmul_st0_sti, st0, st1));
			} /* else */ TestAssembler(c => c.fmul(st1, st0), Instruction.Create(Code.Fmul_sti_st0, st1, st0));
		}

		[Fact]
		public void fmulp_regST_regST() {
			TestAssembler(c => c.fmulp(st1, st0), Instruction.Create(Code.Fmulp_sti_st0, st1, st0));
		}

		[Fact]
		public void fnclex() {
			TestAssembler(c => c.fnclex(), Instruction.Create(Code.Fnclex));
		}

		[Fact]
		public void fndisi() {
			TestAssembler(c => c.fndisi(), Instruction.Create(Code.Fndisi));
		}

		[Fact]
		public void fneni() {
			TestAssembler(c => c.fneni(), Instruction.Create(Code.Fneni));
		}

		[Fact]
		public void fninit() {
			TestAssembler(c => c.fninit(), Instruction.Create(Code.Fninit));
		}

		[Fact]
		public void fnop() {
			TestAssembler(c => c.fnop(), Instruction.Create(Code.Fnop));
		}

		[Fact]
		public void fnsave_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fnsave(__[rcx]), Instruction.Create(Code.Fnsave_m108byte, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fnsetpm() {
			TestAssembler(c => c.fnsetpm(), Instruction.Create(Code.Fnsetpm));
		}

		[Fact]
		public void fnstcw_m() {
			TestAssembler(c => c.fnstcw(__[rcx]), Instruction.Create(Code.Fnstcw_m2byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fnstenv_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fnstenv(__[rcx]), Instruction.Create(Code.Fnstenv_m28byte, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fnstsw_reg16() {
			TestAssembler(c => c.fnstsw(ax), Instruction.Create(Code.Fnstsw_AX, ax));
		}

		[Fact]
		public void fnstsw_m() {
			TestAssembler(c => c.fnstsw(__[rcx]), Instruction.Create(Code.Fnstsw_m2byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fpatan() {
			TestAssembler(c => c.fpatan(), Instruction.Create(Code.Fpatan));
		}

		[Fact]
		public void fprem() {
			TestAssembler(c => c.fprem(), Instruction.Create(Code.Fprem));
		}

		[Fact]
		public void fprem1() {
			TestAssembler(c => c.fprem1(), Instruction.Create(Code.Fprem1));
		}

		[Fact]
		public void fptan() {
			TestAssembler(c => c.fptan(), Instruction.Create(Code.Fptan));
		}

		[Fact]
		public void frndint() {
			TestAssembler(c => c.frndint(), Instruction.Create(Code.Frndint));
		}

		[Fact]
		public void frstor_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.frstor(__[rcx]), Instruction.Create(Code.Frstor_m108byte, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fsave_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fsave(__[rcx]), Instruction.Create(Code.Fsave_m108byte, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.Fwait);
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fscale() {
			TestAssembler(c => c.fscale(), Instruction.Create(Code.Fscale));
		}

		[Fact]
		public void fsetpm() {
			TestAssembler(c => c.fsetpm(), Instruction.Create(Code.Fsetpm), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fsin() {
			TestAssembler(c => c.fsin(), Instruction.Create(Code.Fsin));
		}

		[Fact]
		public void fsincos() {
			TestAssembler(c => c.fsincos(), Instruction.Create(Code.Fsincos));
		}

		[Fact]
		public void fsqrt() {
			TestAssembler(c => c.fsqrt(), Instruction.Create(Code.Fsqrt));
		}

		[Fact]
		public void fst_regST() {
			TestAssembler(c => c.fst(st1), Instruction.Create(Code.Fst_sti, st1));
		}

		[Fact]
		public void fst_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fst(__qword_ptr[rdx]), Instruction.Create(Code.Fst_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fst(__dword_ptr[rdx]), Instruction.Create(Code.Fst_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fst(__zmmword_ptr[rdx]), Instruction.Create(Code.Fst_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fstcw_m() {
			TestAssembler(c => c.fstcw(__[rcx]), Instruction.Create(Code.Fstcw_m2byte, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fstenv_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fstenv(__[rcx]), Instruction.Create(Code.Fstenv_m28byte, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.Fwait);
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fstp_regST() {
			TestAssembler(c => c.fstp(st1), Instruction.Create(Code.Fstp_sti, st1));
		}

		[Fact]
		public void fstp_m() {
			{ /* if (dst.Size == MemoryOperandSize.TwordPtr) */
				TestAssembler(c => c.fstp(__tword_ptr[rdx]), Instruction.Create(Code.Fstp_m80fp, __tword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fstp(__qword_ptr[rdx]), Instruction.Create(Code.Fstp_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fstp(__dword_ptr[rdx]), Instruction.Create(Code.Fstp_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fstp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fstp_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fstpnce_regST() {
			TestAssembler(c => c.fstpnce(st1), Instruction.Create(Code.Fstpnce_sti, st1));
		}

		[Fact]
		public void fstsw_reg16() {
			TestAssembler(c => c.fstsw(ax), Instruction.Create(Code.Fstsw_AX, ax), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fstsw_m() {
			TestAssembler(c => c.fstsw(__[rcx]), Instruction.Create(Code.Fstsw_m2byte, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.Fwait);
		}

		[Fact]
		public void fsub_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fsub(__qword_ptr[rdx]), Instruction.Create(Code.Fsub_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fsub(__dword_ptr[rdx]), Instruction.Create(Code.Fsub_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fsub(__zmmword_ptr[rdx]), Instruction.Create(Code.Fsub_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fsub_regST_regST() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fsub(st0, st1), Instruction.Create(Code.Fsub_st0_sti, st0, st1));
			} /* else */ TestAssembler(c => c.fsub(st1, st0), Instruction.Create(Code.Fsub_sti_st0, st1, st0));
		}

		[Fact]
		public void fsubp_regST_regST() {
			TestAssembler(c => c.fsubp(st1, st0), Instruction.Create(Code.Fsubp_sti_st0, st1, st0));
		}

		[Fact]
		public void fsubr_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.fsubr(__qword_ptr[rdx]), Instruction.Create(Code.Fsubr_m64fp, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.fsubr(__dword_ptr[rdx]), Instruction.Create(Code.Fsubr_m32fp, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.fsubr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fsubr_m32fp, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void fsubr_regST_regST() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fsubr(st0, st1), Instruction.Create(Code.Fsubr_st0_sti, st0, st1));
			} /* else */ TestAssembler(c => c.fsubr(st1, st0), Instruction.Create(Code.Fsubr_sti_st0, st1, st0));
		}

		[Fact]
		public void fsubrp_regST_regST() {
			TestAssembler(c => c.fsubrp(st1, st0), Instruction.Create(Code.Fsubrp_sti_st0, st1, st0));
		}

		[Fact]
		public void ftst() {
			TestAssembler(c => c.ftst(), Instruction.Create(Code.Ftst));
		}

		[Fact]
		public void fucom_regST_regST() {
			TestAssembler(c => c.fucom(st0, st1), Instruction.Create(Code.Fucom_st0_sti, st0, st1));
		}

		[Fact]
		public void fucomi_regST_regST() {
			TestAssembler(c => c.fucomi(st0, st1), Instruction.Create(Code.Fucomi_st0_sti, st0, st1));
		}

		[Fact]
		public void fucomip_regST_regST() {
			TestAssembler(c => c.fucomip(st0, st1), Instruction.Create(Code.Fucomip_st0_sti, st0, st1));
		}

		[Fact]
		public void fucomp_regST_regST() {
			TestAssembler(c => c.fucomp(st0, st1), Instruction.Create(Code.Fucomp_st0_sti, st0, st1));
		}

		[Fact]
		public void fucompp() {
			TestAssembler(c => c.fucompp(), Instruction.Create(Code.Fucompp));
		}

		[Fact]
		public void fxam() {
			TestAssembler(c => c.fxam(), Instruction.Create(Code.Fxam));
		}

		[Fact]
		public void fxch_regST_regST() {
			TestAssembler(c => c.fxch(st0, st1), Instruction.Create(Code.Fxch_st0_sti, st0, st1));
		}

		[Fact]
		public void fxrstor_m() {
			TestAssembler(c => c.fxrstor(__[rcx]), Instruction.Create(Code.Fxrstor_m512byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fxrstor64_m() {
			TestAssembler(c => c.fxrstor64(__[rcx]), Instruction.Create(Code.Fxrstor64_m512byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fxsave_m() {
			TestAssembler(c => c.fxsave(__[rcx]), Instruction.Create(Code.Fxsave_m512byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fxsave64_m() {
			TestAssembler(c => c.fxsave64(__[rcx]), Instruction.Create(Code.Fxsave64_m512byte, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void fxtract() {
			TestAssembler(c => c.fxtract(), Instruction.Create(Code.Fxtract));
		}

		[Fact]
		public void fyl2x() {
			TestAssembler(c => c.fyl2x(), Instruction.Create(Code.Fyl2x));
		}

		[Fact]
		public void fyl2xp1() {
			TestAssembler(c => c.fyl2xp1(), Instruction.Create(Code.Fyl2xp1));
		}

		[Fact]
		public void getsec() {
			TestAssembler(c => c.getsec(), Instruction.Create(Code.Getsecd));
		}

		[Fact]
		public void getsecq() {
			TestAssembler(c => c.getsecq(), Instruction.Create(Code.Getsecq));
		}

		[Fact]
		public void gf2p8affineinvqb_regXMM_regXMM_i() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, xmm3, -5), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void gf2p8affineinvqb_regXMM_m_i() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void gf2p8affineinvqb_regXMM_regXMM_u() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, xmm3, (byte)127), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void gf2p8affineinvqb_regXMM_m_u() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void gf2p8affineqb_regXMM_regXMM_i() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, xmm3, -5), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void gf2p8affineqb_regXMM_m_i() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void gf2p8affineqb_regXMM_regXMM_u() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, xmm3, (byte)127), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void gf2p8affineqb_regXMM_m_u() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void gf2p8mulb_regXMM_regXMM() {
			TestAssembler(c => c.gf2p8mulb(xmm2, xmm3), Instruction.Create(Code.Gf2p8mulb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void gf2p8mulb_regXMM_m() {
			TestAssembler(c => c.gf2p8mulb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Gf2p8mulb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void haddpd_regXMM_regXMM() {
			TestAssembler(c => c.haddpd(xmm2, xmm3), Instruction.Create(Code.Haddpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void haddpd_regXMM_m() {
			TestAssembler(c => c.haddpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Haddpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void haddps_regXMM_regXMM() {
			TestAssembler(c => c.haddps(xmm2, xmm3), Instruction.Create(Code.Haddps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void haddps_regXMM_m() {
			TestAssembler(c => c.haddps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Haddps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void hlt() {
			TestAssembler(c => c.hlt(), Instruction.Create(Code.Hlt));
		}

		[Fact]
		public void hreset_i() {
			TestAssembler(c => c.hreset(-5), Instruction.Create(Code.Hreset_imm8, -5));
		}

		[Fact]
		public void hreset_u() {
			TestAssembler(c => c.hreset((byte)127), Instruction.Create(Code.Hreset_imm8, (uint)(byte)127));
		}

		[Fact]
		public void hsubpd_regXMM_regXMM() {
			TestAssembler(c => c.hsubpd(xmm2, xmm3), Instruction.Create(Code.Hsubpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void hsubpd_regXMM_m() {
			TestAssembler(c => c.hsubpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Hsubpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void hsubps_regXMM_regXMM() {
			TestAssembler(c => c.hsubps(xmm2, xmm3), Instruction.Create(Code.Hsubps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void hsubps_regXMM_m() {
			TestAssembler(c => c.hsubps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Hsubps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void idiv_reg8() {
			TestAssembler(c => c.idiv(dl), Instruction.Create(Code.Idiv_rm8, dl));
		}

		[Fact]
		public void idiv_reg16() {
			TestAssembler(c => c.idiv(dx), Instruction.Create(Code.Idiv_rm16, dx));
		}

		[Fact]
		public void idiv_reg32() {
			TestAssembler(c => c.idiv(edx), Instruction.Create(Code.Idiv_rm32, edx));
		}

		[Fact]
		public void idiv_reg64() {
			TestAssembler(c => c.idiv(rdx), Instruction.Create(Code.Idiv_rm64, rdx));
		}

		[Fact]
		public void idiv_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.idiv(__qword_ptr[rdx]), Instruction.Create(Code.Idiv_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.idiv(__dword_ptr[rdx]), Instruction.Create(Code.Idiv_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.idiv(__word_ptr[rdx]), Instruction.Create(Code.Idiv_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.idiv(__byte_ptr[rdx]), Instruction.Create(Code.Idiv_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.idiv(__zmmword_ptr[rdx]), Instruction.Create(Code.Idiv_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void imul_reg8() {
			TestAssembler(c => c.imul(dl), Instruction.Create(Code.Imul_rm8, dl));
		}

		[Fact]
		public void imul_reg16() {
			TestAssembler(c => c.imul(dx), Instruction.Create(Code.Imul_rm16, dx));
		}

		[Fact]
		public void imul_reg32() {
			TestAssembler(c => c.imul(edx), Instruction.Create(Code.Imul_rm32, edx));
		}

		[Fact]
		public void imul_reg64() {
			TestAssembler(c => c.imul(rdx), Instruction.Create(Code.Imul_rm64, rdx));
		}

		[Fact]
		public void imul_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.imul(__qword_ptr[rdx]), Instruction.Create(Code.Imul_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.imul(__dword_ptr[rdx]), Instruction.Create(Code.Imul_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.imul(__word_ptr[rdx]), Instruction.Create(Code.Imul_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.imul(__byte_ptr[rdx]), Instruction.Create(Code.Imul_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.imul(__zmmword_ptr[rdx]), Instruction.Create(Code.Imul_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void imul_reg16_reg16() {
			TestAssembler(c => c.imul(dx, bx), Instruction.Create(Code.Imul_r16_rm16, dx, bx));
		}

		[Fact]
		public void imul_reg32_reg32() {
			TestAssembler(c => c.imul(edx, ebx), Instruction.Create(Code.Imul_r32_rm32, edx, ebx));
		}

		[Fact]
		public void imul_reg64_reg64() {
			TestAssembler(c => c.imul(rdx, rbx), Instruction.Create(Code.Imul_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void imul_reg16_m() {
			TestAssembler(c => c.imul(dx, __word_ptr[rcx]), Instruction.Create(Code.Imul_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void imul_reg32_m() {
			TestAssembler(c => c.imul(edx, __dword_ptr[rcx]), Instruction.Create(Code.Imul_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void imul_reg64_m() {
			TestAssembler(c => c.imul(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Imul_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void imul_reg16_reg16_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(dx, bx, sbyte.MinValue), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, bx, sbyte.MinValue));
				TestAssembler(c => c.imul(dx, bx, sbyte.MaxValue), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, bx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.imul(dx, bx, 16567), Instruction.Create(Code.Imul_r16_rm16_imm16, dx, bx, 16567));
		}

		[Fact]
		public void imul_reg32_reg32_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(edx, ebx, sbyte.MinValue), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, ebx, sbyte.MinValue));
				TestAssembler(c => c.imul(edx, ebx, sbyte.MaxValue), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, ebx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.imul(edx, ebx, int.MaxValue), Instruction.Create(Code.Imul_r32_rm32_imm32, edx, ebx, int.MaxValue));
		}

		[Fact]
		public void imul_reg64_reg64_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(rdx, rbx, sbyte.MinValue), Instruction.Create(Code.Imul_r64_rm64_imm8, rdx, rbx, sbyte.MinValue));
				TestAssembler(c => c.imul(rdx, rbx, sbyte.MaxValue), Instruction.Create(Code.Imul_r64_rm64_imm8, rdx, rbx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.imul(rdx, rbx, int.MinValue), Instruction.Create(Code.Imul_r64_rm64_imm32, rdx, rbx, int.MinValue));
		}

		[Fact]
		public void imul_reg16_m_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], sbyte.MinValue), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, __word_ptr[rcx].ToMemoryOperand(Bitness), sbyte.MinValue));
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], sbyte.MaxValue), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, __word_ptr[rcx].ToMemoryOperand(Bitness), sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.imul(dx, __word_ptr[rcx], 16567), Instruction.Create(Code.Imul_r16_rm16_imm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness), 16567));
		}

		[Fact]
		public void imul_reg32_m_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], sbyte.MinValue), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), sbyte.MinValue));
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], sbyte.MaxValue), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.imul(edx, __dword_ptr[rcx], int.MaxValue), Instruction.Create(Code.Imul_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}

		[Fact]
		public void imul_reg64_m_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(rdx, __qword_ptr[rcx], sbyte.MinValue), Instruction.Create(Code.Imul_r64_rm64_imm8, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), sbyte.MinValue));
				TestAssembler(c => c.imul(rdx, __qword_ptr[rcx], sbyte.MaxValue), Instruction.Create(Code.Imul_r64_rm64_imm8, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.imul(rdx, __qword_ptr[rcx], int.MinValue), Instruction.Create(Code.Imul_r64_rm64_imm32, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), int.MinValue));
		}

		[Fact]
		public void imul_reg16_reg16_u() {
			{ /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.imul(dx, bx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, bx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.imul(dx, bx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, bx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.imul(dx, bx, (ushort)16567), Instruction.Create(Code.Imul_r16_rm16_imm16, dx, bx, (uint)(ushort)16567));
		}

		[Fact]
		public void imul_reg32_reg32_u() {
			{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.imul(edx, ebx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, ebx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.imul(edx, ebx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, ebx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.imul(edx, ebx, (uint)int.MaxValue), Instruction.Create(Code.Imul_r32_rm32_imm32, edx, ebx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void imul_reg16_m_u() {
			{ /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, __word_ptr[rcx].ToMemoryOperand(Bitness), (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Imul_r16_rm16_imm8, dx, __word_ptr[rcx].ToMemoryOperand(Bitness), (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.imul(dx, __word_ptr[rcx], (ushort)16567), Instruction.Create(Code.Imul_r16_rm16_imm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness), (uint)(ushort)16567));
		}

		[Fact]
		public void imul_reg32_m_u() {
			{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Imul_r32_rm32_imm8, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.imul(edx, __dword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.Imul_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void @in_reg8_reg16() {
			TestAssembler(c => c.@in(al, dx), Instruction.Create(Code.In_AL_DX, al, dx));
		}

		[Fact]
		public void @in_reg16_reg16() {
			TestAssembler(c => c.@in(ax, dx), Instruction.Create(Code.In_AX_DX, ax, dx));
		}

		[Fact]
		public void @in_reg32_reg16() {
			TestAssembler(c => c.@in(eax, dx), Instruction.Create(Code.In_EAX_DX, eax, dx));
		}

		[Fact]
		public void @in_reg8_i() {
			TestAssembler(c => c.@in(al, -5), Instruction.Create(Code.In_AL_imm8, al, -5));
		}

		[Fact]
		public void @in_reg16_i() {
			TestAssembler(c => c.@in(ax, -5), Instruction.Create(Code.In_AX_imm8, ax, -5));
		}

		[Fact]
		public void @in_reg32_i() {
			TestAssembler(c => c.@in(eax, -5), Instruction.Create(Code.In_EAX_imm8, eax, -5));
		}

		[Fact]
		public void @in_reg8_u() {
			TestAssembler(c => c.@in(al, (byte)127), Instruction.Create(Code.In_AL_imm8, al, (uint)(byte)127));
		}

		[Fact]
		public void @in_reg16_u() {
			TestAssembler(c => c.@in(ax, (byte)127), Instruction.Create(Code.In_AX_imm8, ax, (uint)(byte)127));
		}

		[Fact]
		public void @in_reg32_u() {
			TestAssembler(c => c.@in(eax, (byte)127), Instruction.Create(Code.In_EAX_imm8, eax, (uint)(byte)127));
		}

		[Fact]
		public void inc_reg8() {
			TestAssembler(c => c.inc(dl), Instruction.Create(Code.Inc_rm8, dl));
		}

		[Fact]
		public void inc_reg16() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.inc(dx), Instruction.Create(Code.Inc_rm16, dx));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void inc_reg32() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.inc(edx), Instruction.Create(Code.Inc_rm32, edx));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void inc_reg64() {
			TestAssembler(c => c.inc(rdx), Instruction.Create(Code.Inc_rm64, rdx));
		}

		[Fact]
		public void inc_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.inc(__qword_ptr[rdx]), Instruction.Create(Code.Inc_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.inc(__dword_ptr[rdx]), Instruction.Create(Code.Inc_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.inc(__word_ptr[rdx]), Instruction.Create(Code.Inc_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.inc(__byte_ptr[rdx]), Instruction.Create(Code.Inc_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.inc(__zmmword_ptr[rdx]), Instruction.Create(Code.Inc_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void incsspd_reg32() {
			TestAssembler(c => c.incsspd(edx), Instruction.Create(Code.Incsspd_r32, edx));
		}

		[Fact]
		public void incsspq_reg64() {
			TestAssembler(c => c.incsspq(rdx), Instruction.Create(Code.Incsspq_r64, rdx));
		}

		[Fact]
		public void insb() {
			TestAssembler(c => c.insb(), Instruction.CreateInsb(Bitness));
		}

		[Fact]
		public void insd() {
			TestAssembler(c => c.insd(), Instruction.CreateInsd(Bitness));
		}

		[Fact]
		public void insertps_regXMM_regXMM_i() {
			TestAssembler(c => c.insertps(xmm2, xmm3, -5), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void insertps_regXMM_m_i() {
			TestAssembler(c => c.insertps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void insertps_regXMM_regXMM_u() {
			TestAssembler(c => c.insertps(xmm2, xmm3, (byte)127), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void insertps_regXMM_m_u() {
			TestAssembler(c => c.insertps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void insertq_regXMM_regXMM() {
			TestAssembler(c => c.insertq(xmm2, xmm3), Instruction.Create(Code.Insertq_xmm_xmm, xmm2, xmm3));
		}

		[Fact]
		public void insertq_regXMM_regXMM_i_i() {
			TestAssembler(c => c.insertq(xmm2, xmm3, -5, -5), Instruction.Create(Code.Insertq_xmm_xmm_imm8_imm8, xmm2, xmm3, -5, -5));
		}

		[Fact]
		public void insertq_regXMM_regXMM_u_u() {
			TestAssembler(c => c.insertq(xmm2, xmm3, (byte)127, (byte)127), Instruction.Create(Code.Insertq_xmm_xmm_imm8_imm8, xmm2, xmm3, (uint)(byte)127, (uint)(byte)127));
		}

		[Fact]
		public void insw() {
			TestAssembler(c => c.insw(), Instruction.CreateInsw(Bitness));
		}

		[Fact]
		public void @int_i() {
			TestAssembler(c => c.@int(-5), Instruction.Create(Code.Int_imm8, -5));
		}

		[Fact]
		public void @int_u() {
			TestAssembler(c => c.@int((byte)127), Instruction.Create(Code.Int_imm8, (uint)(byte)127));
		}

		[Fact]
		public void int1() {
			TestAssembler(c => c.int1(), Instruction.Create(Code.Int1));
		}

		[Fact]
		public void int3() {
			TestAssembler(c => c.int3(), Instruction.Create(Code.Int3));
		}

		[Fact]
		public void invd() {
			TestAssembler(c => c.invd(), Instruction.Create(Code.Invd));
		}

		[Fact]
		public void invept_reg64_m() {
			TestAssembler(c => c.invept(rdx, __[rcx]), Instruction.Create(Code.Invept_r64_m128, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void invlpg_m() {
			TestAssembler(c => c.invlpg(__[rcx]), Instruction.Create(Code.Invlpg_m, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void invlpga() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.invlpga(), Instruction.Create(Code.Invlpgaq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void invlpgb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.invlpgb(), Instruction.Create(Code.Invlpgbq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void invpcid_reg64_m() {
			TestAssembler(c => c.invpcid(rdx, __[rcx]), Instruction.Create(Code.Invpcid_r64_m128, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void invvpid_reg64_m() {
			TestAssembler(c => c.invvpid(rdx, __[rcx]), Instruction.Create(Code.Invvpid_r64_m128, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void iret() {
			TestAssembler(c => c.iret(), Instruction.Create(Code.Iretw));
		}

		[Fact]
		public void iretd() {
			TestAssembler(c => c.iretd(), Instruction.Create(Code.Iretd));
		}

		[Fact]
		public void iretq() {
			TestAssembler(c => c.iretq(), Instruction.Create(Code.Iretq));
		}

		[Fact]
		public void ja_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.ja(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Ja_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.ja(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Ja_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ja_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.ja(12752), Instruction.CreateBranch(Code.Ja_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.ja(12752), Instruction.CreateBranch(Code.Ja_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jae_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jae(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jae(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jae_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jae(12752), Instruction.CreateBranch(Code.Jae_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jae(12752), Instruction.CreateBranch(Code.Jae_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jb_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jb(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jb(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jb_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jb(12752), Instruction.CreateBranch(Code.Jb_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jb(12752), Instruction.CreateBranch(Code.Jb_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jbe_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jbe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jbe_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jbe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jbe_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jbe_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jbe(12752), Instruction.CreateBranch(Code.Jbe_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jbe(12752), Instruction.CreateBranch(Code.Jbe_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void je_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.je(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Je_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.je(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Je_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void je_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.je(12752), Instruction.CreateBranch(Code.Je_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.je(12752), Instruction.CreateBranch(Code.Je_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jg_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jg(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jg_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jg(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jg_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jg_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jg(12752), Instruction.CreateBranch(Code.Jg_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jg(12752), Instruction.CreateBranch(Code.Jg_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jge_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jge(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jge_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jge(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jge_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jge_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jge(12752), Instruction.CreateBranch(Code.Jge_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jge(12752), Instruction.CreateBranch(Code.Jge_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jl_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jl(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jl_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jl(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jl_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jl_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jl(12752), Instruction.CreateBranch(Code.Jl_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jl(12752), Instruction.CreateBranch(Code.Jl_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jle_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jle(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jle_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jle(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jle_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jle_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jle(12752), Instruction.CreateBranch(Code.Jle_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jle(12752), Instruction.CreateBranch(Code.Jle_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jmp_reg16() {
			TestAssembler(c => c.jmp(dx), Instruction.Create(Code.Jmp_rm16, dx));
		}

		[Fact]
		public void jmp_reg64() {
			TestAssembler(c => c.jmp(rdx), Instruction.Create(Code.Jmp_rm64, rdx));
		}

		[Fact]
		public void jmp_m() {
			{ /* if (dst.Size == MemoryOperandSize.TwordPtr) */
				TestAssembler(c => c.jmp(__tword_ptr[rdx]), Instruction.Create(Code.Jmp_m1664, __tword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.jmp(__qword_ptr[rdx]), Instruction.Create(Code.Jmp_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.FwordPtr) */
				TestAssembler(c => c.jmp(__fword_ptr[rdx]), Instruction.Create(Code.Jmp_m1632, __fword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Jmp_rm32 - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.jmp(__word_ptr[rdx]), Instruction.Create(Code.Jmp_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.jmp(__zmmword_ptr[rdx]), Instruction.Create(Code.Jmp_rm16, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void jmp_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jmp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jmp_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jmp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jmp_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jmp_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jmp(12752), Instruction.CreateBranch(Code.Jmp_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jmp(12752), Instruction.CreateBranch(Code.Jmp_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jne_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jne(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jne_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jne(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jne_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jne_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jne(12752), Instruction.CreateBranch(Code.Jne_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jne(12752), Instruction.CreateBranch(Code.Jne_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jno_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jno(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jno_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jno(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jno_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jno_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jno(12752), Instruction.CreateBranch(Code.Jno_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jno(12752), Instruction.CreateBranch(Code.Jno_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnp_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jnp_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jnp_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnp_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnp(12752), Instruction.CreateBranch(Code.Jnp_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnp(12752), Instruction.CreateBranch(Code.Jnp_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jns_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jns(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jns_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jns(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jns_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jns_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jns(12752), Instruction.CreateBranch(Code.Jns_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jns(12752), Instruction.CreateBranch(Code.Jns_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jo_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jo(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jo_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jo(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jo_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jo_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jo(12752), Instruction.CreateBranch(Code.Jo_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jo(12752), Instruction.CreateBranch(Code.Jo_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jp_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jp_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jp_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jp_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jp(12752), Instruction.CreateBranch(Code.Jp_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jp(12752), Instruction.CreateBranch(Code.Jp_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jrcxz_l() {
			TestAssembler(c => c.jrcxz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jrcxz_rel8_64, 1), 1), LocalOpCodeFlags.Branch);
		}

		[Fact]
		public void jrcxz_lu() {
			TestAssembler(c => c.jrcxz(12752), Instruction.CreateBranch(Code.Jrcxz_rel8_64, 12752), LocalOpCodeFlags.BranchUlong);
		}

		[Fact]
		public void js_l() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.js(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Js_rel8_64, 1), 1), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.Branch);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.js(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Js_rel32_64, 1), 1), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void js_lu() {
			{ /* if (PreferBranchShort) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.js(12752), Instruction.CreateBranch(Code.Js_rel8_64, 12752), LocalOpCodeFlags.PreferBranchShort | LocalOpCodeFlags.BranchUlong);
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.js(12752), Instruction.CreateBranch(Code.Js_rel32_64, 12752), LocalOpCodeFlags.PreferBranchNear | LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

#if !NO_VEX
		[Fact]
		public void kaddb_regK_regK_regK() {
			TestAssembler(c => c.kaddb(k2, k3, k4), Instruction.Create(Code.VEX_Kaddb_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kaddd_regK_regK_regK() {
			TestAssembler(c => c.kaddd(k2, k3, k4), Instruction.Create(Code.VEX_Kaddd_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kaddq_regK_regK_regK() {
			TestAssembler(c => c.kaddq(k2, k3, k4), Instruction.Create(Code.VEX_Kaddq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kaddw_regK_regK_regK() {
			TestAssembler(c => c.kaddw(k2, k3, k4), Instruction.Create(Code.VEX_Kaddw_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandb_regK_regK_regK() {
			TestAssembler(c => c.kandb(k2, k3, k4), Instruction.Create(Code.VEX_Kandb_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandd_regK_regK_regK() {
			TestAssembler(c => c.kandd(k2, k3, k4), Instruction.Create(Code.VEX_Kandd_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandnb_regK_regK_regK() {
			TestAssembler(c => c.kandnb(k2, k3, k4), Instruction.Create(Code.VEX_Kandnb_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandnd_regK_regK_regK() {
			TestAssembler(c => c.kandnd(k2, k3, k4), Instruction.Create(Code.VEX_Kandnd_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandnq_regK_regK_regK() {
			TestAssembler(c => c.kandnq(k2, k3, k4), Instruction.Create(Code.VEX_Kandnq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandnw_regK_regK_regK() {
			TestAssembler(c => c.kandnw(k2, k3, k4), Instruction.Create(Code.VEX_Kandnw_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandq_regK_regK_regK() {
			TestAssembler(c => c.kandq(k2, k3, k4), Instruction.Create(Code.VEX_Kandq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kandw_regK_regK_regK() {
			TestAssembler(c => c.kandw(k2, k3, k4), Instruction.Create(Code.VEX_Kandw_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovb_regK_reg32() {
			TestAssembler(c => c.kmovb(k2, ebx), Instruction.Create(Code.VEX_Kmovb_kr_r32, k2, ebx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovb_reg32_regK() {
			TestAssembler(c => c.kmovb(edx, k3), Instruction.Create(Code.VEX_Kmovb_r32_kr, edx, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovb_regK_regK() {
			TestAssembler(c => c.kmovb(k2, k3), Instruction.Create(Code.VEX_Kmovb_kr_km8, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovb_m_regK() {
			TestAssembler(c => c.kmovb(__[rcx], k3), Instruction.Create(Code.VEX_Kmovb_m8_kr, __[rcx].ToMemoryOperand(Bitness), k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovb_regK_m() {
			TestAssembler(c => c.kmovb(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovb_kr_km8, k2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovd_regK_reg32() {
			TestAssembler(c => c.kmovd(k2, ebx), Instruction.Create(Code.VEX_Kmovd_kr_r32, k2, ebx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovd_reg32_regK() {
			TestAssembler(c => c.kmovd(edx, k3), Instruction.Create(Code.VEX_Kmovd_r32_kr, edx, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovd_regK_regK() {
			TestAssembler(c => c.kmovd(k2, k3), Instruction.Create(Code.VEX_Kmovd_kr_km32, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovd_m_regK() {
			TestAssembler(c => c.kmovd(__[rcx], k3), Instruction.Create(Code.VEX_Kmovd_m32_kr, __[rcx].ToMemoryOperand(Bitness), k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovd_regK_m() {
			TestAssembler(c => c.kmovd(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovd_kr_km32, k2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovq_regK_reg64() {
			TestAssembler(c => c.kmovq(k2, rbx), Instruction.Create(Code.VEX_Kmovq_kr_r64, k2, rbx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovq_reg64_regK() {
			TestAssembler(c => c.kmovq(rdx, k3), Instruction.Create(Code.VEX_Kmovq_r64_kr, rdx, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovq_regK_regK() {
			TestAssembler(c => c.kmovq(k2, k3), Instruction.Create(Code.VEX_Kmovq_kr_km64, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovq_m_regK() {
			TestAssembler(c => c.kmovq(__[rcx], k3), Instruction.Create(Code.VEX_Kmovq_m64_kr, __[rcx].ToMemoryOperand(Bitness), k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovq_regK_m() {
			TestAssembler(c => c.kmovq(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovq_kr_km64, k2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovw_regK_reg32() {
			TestAssembler(c => c.kmovw(k2, ebx), Instruction.Create(Code.VEX_Kmovw_kr_r32, k2, ebx));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovw_reg32_regK() {
			TestAssembler(c => c.kmovw(edx, k3), Instruction.Create(Code.VEX_Kmovw_r32_kr, edx, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovw_regK_regK() {
			TestAssembler(c => c.kmovw(k2, k3), Instruction.Create(Code.VEX_Kmovw_kr_km16, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovw_m_regK() {
			TestAssembler(c => c.kmovw(__[rcx], k3), Instruction.Create(Code.VEX_Kmovw_m16_kr, __[rcx].ToMemoryOperand(Bitness), k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kmovw_regK_m() {
			TestAssembler(c => c.kmovw(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovw_kr_km16, k2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void knotb_regK_regK() {
			TestAssembler(c => c.knotb(k2, k3), Instruction.Create(Code.VEX_Knotb_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void knotd_regK_regK() {
			TestAssembler(c => c.knotd(k2, k3), Instruction.Create(Code.VEX_Knotd_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void knotq_regK_regK() {
			TestAssembler(c => c.knotq(k2, k3), Instruction.Create(Code.VEX_Knotq_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void knotw_regK_regK() {
			TestAssembler(c => c.knotw(k2, k3), Instruction.Create(Code.VEX_Knotw_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void korb_regK_regK_regK() {
			TestAssembler(c => c.korb(k2, k3, k4), Instruction.Create(Code.VEX_Korb_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kord_regK_regK_regK() {
			TestAssembler(c => c.kord(k2, k3, k4), Instruction.Create(Code.VEX_Kord_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void korq_regK_regK_regK() {
			TestAssembler(c => c.korq(k2, k3, k4), Instruction.Create(Code.VEX_Korq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kortestb_regK_regK() {
			TestAssembler(c => c.kortestb(k2, k3), Instruction.Create(Code.VEX_Kortestb_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kortestd_regK_regK() {
			TestAssembler(c => c.kortestd(k2, k3), Instruction.Create(Code.VEX_Kortestd_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kortestq_regK_regK() {
			TestAssembler(c => c.kortestq(k2, k3), Instruction.Create(Code.VEX_Kortestq_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kortestw_regK_regK() {
			TestAssembler(c => c.kortestw(k2, k3), Instruction.Create(Code.VEX_Kortestw_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void korw_regK_regK_regK() {
			TestAssembler(c => c.korw(k2, k3, k4), Instruction.Create(Code.VEX_Korw_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftlb_regK_regK_i() {
			TestAssembler(c => c.kshiftlb(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftlb_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftlb_regK_regK_u() {
			TestAssembler(c => c.kshiftlb(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftlb_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftld_regK_regK_i() {
			TestAssembler(c => c.kshiftld(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftld_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftld_regK_regK_u() {
			TestAssembler(c => c.kshiftld(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftld_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftlq_regK_regK_i() {
			TestAssembler(c => c.kshiftlq(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftlq_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftlq_regK_regK_u() {
			TestAssembler(c => c.kshiftlq(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftlq_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftlw_regK_regK_i() {
			TestAssembler(c => c.kshiftlw(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftlw_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftlw_regK_regK_u() {
			TestAssembler(c => c.kshiftlw(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftlw_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrb_regK_regK_i() {
			TestAssembler(c => c.kshiftrb(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrb_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrb_regK_regK_u() {
			TestAssembler(c => c.kshiftrb(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftrb_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrd_regK_regK_i() {
			TestAssembler(c => c.kshiftrd(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrd_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrd_regK_regK_u() {
			TestAssembler(c => c.kshiftrd(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftrd_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrq_regK_regK_i() {
			TestAssembler(c => c.kshiftrq(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrq_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrq_regK_regK_u() {
			TestAssembler(c => c.kshiftrq(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftrq_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrw_regK_regK_i() {
			TestAssembler(c => c.kshiftrw(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrw_kr_kr_imm8, k2, k3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kshiftrw_regK_regK_u() {
			TestAssembler(c => c.kshiftrw(k2, k3, (byte)127), Instruction.Create(Code.VEX_Kshiftrw_kr_kr_imm8, k2, k3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void ktestb_regK_regK() {
			TestAssembler(c => c.ktestb(k2, k3), Instruction.Create(Code.VEX_Ktestb_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void ktestd_regK_regK() {
			TestAssembler(c => c.ktestd(k2, k3), Instruction.Create(Code.VEX_Ktestd_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void ktestq_regK_regK() {
			TestAssembler(c => c.ktestq(k2, k3), Instruction.Create(Code.VEX_Ktestq_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void ktestw_regK_regK() {
			TestAssembler(c => c.ktestw(k2, k3), Instruction.Create(Code.VEX_Ktestw_kr_kr, k2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kunpckbw_regK_regK_regK() {
			TestAssembler(c => c.kunpckbw(k2, k3, k4), Instruction.Create(Code.VEX_Kunpckbw_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kunpckdq_regK_regK_regK() {
			TestAssembler(c => c.kunpckdq(k2, k3, k4), Instruction.Create(Code.VEX_Kunpckdq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kunpckwd_regK_regK_regK() {
			TestAssembler(c => c.kunpckwd(k2, k3, k4), Instruction.Create(Code.VEX_Kunpckwd_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxnorb_regK_regK_regK() {
			TestAssembler(c => c.kxnorb(k2, k3, k4), Instruction.Create(Code.VEX_Kxnorb_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxnord_regK_regK_regK() {
			TestAssembler(c => c.kxnord(k2, k3, k4), Instruction.Create(Code.VEX_Kxnord_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxnorq_regK_regK_regK() {
			TestAssembler(c => c.kxnorq(k2, k3, k4), Instruction.Create(Code.VEX_Kxnorq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxnorw_regK_regK_regK() {
			TestAssembler(c => c.kxnorw(k2, k3, k4), Instruction.Create(Code.VEX_Kxnorw_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxorb_regK_regK_regK() {
			TestAssembler(c => c.kxorb(k2, k3, k4), Instruction.Create(Code.VEX_Kxorb_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxord_regK_regK_regK() {
			TestAssembler(c => c.kxord(k2, k3, k4), Instruction.Create(Code.VEX_Kxord_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxorq_regK_regK_regK() {
			TestAssembler(c => c.kxorq(k2, k3, k4), Instruction.Create(Code.VEX_Kxorq_kr_kr_kr, k2, k3, k4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void kxorw_regK_regK_regK() {
			TestAssembler(c => c.kxorw(k2, k3, k4), Instruction.Create(Code.VEX_Kxorw_kr_kr_kr, k2, k3, k4));
		}
#endif

		[Fact]
		public void lahf() {
			TestAssembler(c => c.lahf(), Instruction.Create(Code.Lahf));
		}

		[Fact]
		public void lar_reg16_reg16() {
			TestAssembler(c => c.lar(dx, bx), Instruction.Create(Code.Lar_r16_rm16, dx, bx));
		}

		[Fact]
		public void lar_reg32_reg32() {
			TestAssembler(c => c.lar(edx, ebx), Instruction.Create(Code.Lar_r32_r32m16, edx, ebx));
		}

		[Fact]
		public void lar_reg64_reg64() {
			TestAssembler(c => c.lar(rdx, rbx), Instruction.Create(Code.Lar_r64_r64m16, rdx, rbx));
		}

		[Fact]
		public void lar_reg16_m() {
			TestAssembler(c => c.lar(dx, __word_ptr[rcx]), Instruction.Create(Code.Lar_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lar_reg32_m() {
			TestAssembler(c => c.lar(edx, __dword_ptr[rcx]), Instruction.Create(Code.Lar_r32_r32m16, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lddqu_regXMM_m() {
			TestAssembler(c => c.lddqu(xmm2, __[rcx]), Instruction.Create(Code.Lddqu_xmm_m128, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ldmxcsr_m() {
			TestAssembler(c => c.ldmxcsr(__[rcx]), Instruction.Create(Code.Ldmxcsr_m32, __[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_VEX
		[Fact]
		public void ldtilecfg_m() {
			TestAssembler(c => c.ldtilecfg(__[rcx]), Instruction.Create(Code.VEX_Ldtilecfg_m512, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void lea_reg16_m() {
			TestAssembler(c => c.lea(dx, __[rcx]), Instruction.Create(Code.Lea_r16_m, dx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lea_reg32_m() {
			TestAssembler(c => c.lea(edx, __[rcx]), Instruction.Create(Code.Lea_r32_m, edx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lea_reg64_m() {
			TestAssembler(c => c.lea(rdx, __[rcx]), Instruction.Create(Code.Lea_r64_m, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void leave() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.leave(), Instruction.Create(Code.Leaveq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lfence() {
			TestAssembler(c => c.lfence(), Instruction.Create(Code.Lfence));
		}

		[Fact]
		public void lfs_reg16_m() {
			TestAssembler(c => c.lfs(dx, __[rcx]), Instruction.Create(Code.Lfs_r16_m1616, dx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lfs_reg32_m() {
			TestAssembler(c => c.lfs(edx, __[rcx]), Instruction.Create(Code.Lfs_r32_m1632, edx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lfs_reg64_m() {
			TestAssembler(c => c.lfs(rdx, __[rcx]), Instruction.Create(Code.Lfs_r64_m1664, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lgdt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.lgdt(__[rcx]), Instruction.Create(Code.Lgdt_m1664, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lgs_reg16_m() {
			TestAssembler(c => c.lgs(dx, __[rcx]), Instruction.Create(Code.Lgs_r16_m1616, dx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lgs_reg32_m() {
			TestAssembler(c => c.lgs(edx, __[rcx]), Instruction.Create(Code.Lgs_r32_m1632, edx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lgs_reg64_m() {
			TestAssembler(c => c.lgs(rdx, __[rcx]), Instruction.Create(Code.Lgs_r64_m1664, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lidt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.lidt(__[rcx]), Instruction.Create(Code.Lidt_m1664, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lkgs_reg16() {
			TestAssembler(c => c.lkgs(dx), Instruction.Create(Code.Lkgs_rm16, dx));
		}

		[Fact]
		public void lkgs_reg32() {
			TestAssembler(c => c.lkgs(edx), Instruction.Create(Code.Lkgs_r32m16, edx));
		}

		[Fact]
		public void lkgs_reg64() {
			TestAssembler(c => c.lkgs(rdx), Instruction.Create(Code.Lkgs_r64m16, rdx));
		}

		[Fact]
		public void lkgs_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.lkgs(__dword_ptr[rcx]), Instruction.Create(Code.Lkgs_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void lldt_reg16() {
			TestAssembler(c => c.lldt(dx), Instruction.Create(Code.Lldt_rm16, dx));
		}

		[Fact]
		public void lldt_reg32() {
			TestAssembler(c => c.lldt(edx), Instruction.Create(Code.Lldt_r32m16, edx));
		}

		[Fact]
		public void lldt_reg64() {
			TestAssembler(c => c.lldt(rdx), Instruction.Create(Code.Lldt_r64m16, rdx));
		}

		[Fact]
		public void lldt_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.lldt(__dword_ptr[rcx]), Instruction.Create(Code.Lldt_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

#if !NO_XOP
		[Fact]
		public void llwpcb_reg32() {
			TestAssembler(c => c.llwpcb(edx), Instruction.Create(Code.XOP_Llwpcb_r32, edx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void llwpcb_reg64() {
			TestAssembler(c => c.llwpcb(rdx), Instruction.Create(Code.XOP_Llwpcb_r64, rdx));
		}
#endif

		[Fact]
		public void lmsw_reg16() {
			TestAssembler(c => c.lmsw(dx), Instruction.Create(Code.Lmsw_rm16, dx));
		}

		[Fact]
		public void lmsw_reg32() {
			TestAssembler(c => c.lmsw(edx), Instruction.Create(Code.Lmsw_r32m16, edx));
		}

		[Fact]
		public void lmsw_reg64() {
			TestAssembler(c => c.lmsw(rdx), Instruction.Create(Code.Lmsw_r64m16, rdx));
		}

		[Fact]
		public void lmsw_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.lmsw(__dword_ptr[rcx]), Instruction.Create(Code.Lmsw_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void loadiwkey_regXMM_regXMM() {
			TestAssembler(c => c.loadiwkey(xmm2, xmm3), Instruction.Create(Code.Loadiwkey_xmm_xmm, xmm2, xmm3));
		}

		[Fact]
		public void lodsb() {
			TestAssembler(c => c.lodsb(), Instruction.CreateLodsb(Bitness));
		}

		[Fact]
		public void lodsd() {
			TestAssembler(c => c.lodsd(), Instruction.CreateLodsd(Bitness));
		}

		[Fact]
		public void lodsq() {
			TestAssembler(c => c.lodsq(), Instruction.CreateLodsq(Bitness));
		}

		[Fact]
		public void lodsw() {
			TestAssembler(c => c.lodsw(), Instruction.CreateLodsw(Bitness));
		}

		[Fact]
		public void loop_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loop(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loop_rel8_64_RCX, 1), 1), LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loop_lu() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loop(12752), Instruction.CreateBranch(Code.Loop_rel8_64_RCX, 12752), LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loope_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loope(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loope_rel8_64_RCX, 1), 1), LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loope_lu() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loope(12752), Instruction.CreateBranch(Code.Loope_rel8_64_RCX, 12752), LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopne_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopne(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loopne_rel8_64_RCX, 1), 1), LocalOpCodeFlags.Branch);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopne_lu() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopne(12752), Instruction.CreateBranch(Code.Loopne_rel8_64_RCX, 12752), LocalOpCodeFlags.BranchUlong);
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lsl_reg16_reg16() {
			TestAssembler(c => c.lsl(dx, bx), Instruction.Create(Code.Lsl_r16_rm16, dx, bx));
		}

		[Fact]
		public void lsl_reg32_reg32() {
			TestAssembler(c => c.lsl(edx, ebx), Instruction.Create(Code.Lsl_r32_r32m16, edx, ebx));
		}

		[Fact]
		public void lsl_reg64_reg64() {
			TestAssembler(c => c.lsl(rdx, rbx), Instruction.Create(Code.Lsl_r64_r64m16, rdx, rbx));
		}

		[Fact]
		public void lsl_reg16_m() {
			TestAssembler(c => c.lsl(dx, __word_ptr[rcx]), Instruction.Create(Code.Lsl_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lsl_reg32_m() {
			TestAssembler(c => c.lsl(edx, __dword_ptr[rcx]), Instruction.Create(Code.Lsl_r32_r32m16, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lss_reg16_m() {
			TestAssembler(c => c.lss(dx, __[rcx]), Instruction.Create(Code.Lss_r16_m1616, dx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lss_reg32_m() {
			TestAssembler(c => c.lss(edx, __[rcx]), Instruction.Create(Code.Lss_r32_m1632, edx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lss_reg64_m() {
			TestAssembler(c => c.lss(rdx, __[rcx]), Instruction.Create(Code.Lss_r64_m1664, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ltr_reg16() {
			TestAssembler(c => c.ltr(dx), Instruction.Create(Code.Ltr_rm16, dx));
		}

		[Fact]
		public void ltr_reg32() {
			TestAssembler(c => c.ltr(edx), Instruction.Create(Code.Ltr_r32m16, edx));
		}

		[Fact]
		public void ltr_reg64() {
			TestAssembler(c => c.ltr(rdx), Instruction.Create(Code.Ltr_r64m16, rdx));
		}

		[Fact]
		public void ltr_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.ltr(__dword_ptr[rcx]), Instruction.Create(Code.Ltr_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

#if !NO_XOP
		[Fact]
		public void lwpins_reg32_reg32_i() {
			TestAssembler(c => c.lwpins(edx, ebx, int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, edx, ebx, int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg64_reg32_i() {
			TestAssembler(c => c.lwpins(rdx, ebx, int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, rdx, ebx, int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg32_m_i() {
			TestAssembler(c => c.lwpins(edx, __dword_ptr[rcx], int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg64_m_i() {
			TestAssembler(c => c.lwpins(rdx, __dword_ptr[rcx], int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, rdx, __dword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg32_reg32_u() {
			TestAssembler(c => c.lwpins(edx, ebx, (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, edx, ebx, (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg64_reg32_u() {
			TestAssembler(c => c.lwpins(rdx, ebx, (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, rdx, ebx, (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg32_m_u() {
			TestAssembler(c => c.lwpins(edx, __dword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpins_reg64_m_u() {
			TestAssembler(c => c.lwpins(rdx, __dword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, rdx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg32_reg32_i() {
			TestAssembler(c => c.lwpval(edx, ebx, int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, edx, ebx, int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg64_reg32_i() {
			TestAssembler(c => c.lwpval(rdx, ebx, int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, rdx, ebx, int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg32_m_i() {
			TestAssembler(c => c.lwpval(edx, __dword_ptr[rcx], int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg64_m_i() {
			TestAssembler(c => c.lwpval(rdx, __dword_ptr[rcx], int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, rdx, __dword_ptr[rcx].ToMemoryOperand(Bitness), int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg32_reg32_u() {
			TestAssembler(c => c.lwpval(edx, ebx, (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, edx, ebx, (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg64_reg32_u() {
			TestAssembler(c => c.lwpval(rdx, ebx, (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, rdx, ebx, (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg32_m_u() {
			TestAssembler(c => c.lwpval(edx, __dword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}
#endif

#if !NO_XOP
		[Fact]
		public void lwpval_reg64_m_u() {
			TestAssembler(c => c.lwpval(rdx, __dword_ptr[rcx], (uint)int.MaxValue), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, rdx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
		}
#endif

		[Fact]
		public void lzcnt_reg16_reg16() {
			TestAssembler(c => c.lzcnt(dx, bx), Instruction.Create(Code.Lzcnt_r16_rm16, dx, bx));
		}

		[Fact]
		public void lzcnt_reg32_reg32() {
			TestAssembler(c => c.lzcnt(edx, ebx), Instruction.Create(Code.Lzcnt_r32_rm32, edx, ebx));
		}

		[Fact]
		public void lzcnt_reg64_reg64() {
			TestAssembler(c => c.lzcnt(rdx, rbx), Instruction.Create(Code.Lzcnt_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void lzcnt_reg16_m() {
			TestAssembler(c => c.lzcnt(dx, __word_ptr[rcx]), Instruction.Create(Code.Lzcnt_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lzcnt_reg32_m() {
			TestAssembler(c => c.lzcnt(edx, __dword_ptr[rcx]), Instruction.Create(Code.Lzcnt_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void lzcnt_reg64_m() {
			TestAssembler(c => c.lzcnt(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Lzcnt_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void maskmovdqu_regXMM_regXMM() {
			TestAssembler(c => c.maskmovdqu(xmm2, xmm3), Instruction.CreateMaskmovdqu(Bitness, xmm2, xmm3));
		}

		[Fact]
		public void maskmovq_regMM_regMM() {
			TestAssembler(c => c.maskmovq(mm2, mm3), Instruction.CreateMaskmovq(Bitness, mm2, mm3));
		}

		[Fact]
		public void maxpd_regXMM_regXMM() {
			TestAssembler(c => c.maxpd(xmm2, xmm3), Instruction.Create(Code.Maxpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void maxpd_regXMM_m() {
			TestAssembler(c => c.maxpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void maxps_regXMM_regXMM() {
			TestAssembler(c => c.maxps(xmm2, xmm3), Instruction.Create(Code.Maxps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void maxps_regXMM_m() {
			TestAssembler(c => c.maxps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void maxsd_regXMM_regXMM() {
			TestAssembler(c => c.maxsd(xmm2, xmm3), Instruction.Create(Code.Maxsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void maxsd_regXMM_m() {
			TestAssembler(c => c.maxsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void maxss_regXMM_regXMM() {
			TestAssembler(c => c.maxss(xmm2, xmm3), Instruction.Create(Code.Maxss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void maxss_regXMM_m() {
			TestAssembler(c => c.maxss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mcommit() {
			TestAssembler(c => c.mcommit(), Instruction.Create(Code.Mcommit));
		}

		[Fact]
		public void mfence() {
			TestAssembler(c => c.mfence(), Instruction.Create(Code.Mfence));
		}

		[Fact]
		public void minpd_regXMM_regXMM() {
			TestAssembler(c => c.minpd(xmm2, xmm3), Instruction.Create(Code.Minpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void minpd_regXMM_m() {
			TestAssembler(c => c.minpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void minps_regXMM_regXMM() {
			TestAssembler(c => c.minps(xmm2, xmm3), Instruction.Create(Code.Minps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void minps_regXMM_m() {
			TestAssembler(c => c.minps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void minsd_regXMM_regXMM() {
			TestAssembler(c => c.minsd(xmm2, xmm3), Instruction.Create(Code.Minsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void minsd_regXMM_m() {
			TestAssembler(c => c.minsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void minss_regXMM_regXMM() {
			TestAssembler(c => c.minss(xmm2, xmm3), Instruction.Create(Code.Minss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void minss_regXMM_m() {
			TestAssembler(c => c.minss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void monitor() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.monitor(), Instruction.Create(Code.Monitorq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void monitorx() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.monitorx(), Instruction.Create(Code.Monitorxq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void montmul() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.montmul(), Instruction.Create(Code.Montmul_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void mov_reg8_reg8() {
			TestAssembler(c => c.mov(dl, bl), Instruction.Create(Code.Mov_rm8_r8, dl, bl));
		}

		[Fact]
		public void mov_m_reg8() {
			{ /* if (src.Value == Register.AL && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x0123456789abcdef], al), Instruction.Create(Code.Mov_moffs8_AL, __[0x0123456789abcdef].ToMemoryOperand(Bitness), al));
			} /* else */ { // skip (src.Value == Register.AL && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], bl), Instruction.Create(Code.Mov_rm8_r8, __[rdi].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void mov_reg16_reg16() {
			TestAssembler(c => c.mov(dx, bx), Instruction.Create(Code.Mov_rm16_r16, dx, bx));
		}

		[Fact]
		public void mov_regSegment_reg16() {
			TestAssembler(c => c.mov(ds, bx), Instruction.Create(Code.Mov_Sreg_rm16, ds, bx));
		}

		[Fact]
		public void mov_m_reg16() {
			{ /* if (src.Value == Register.AX && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x0123456789abcdef], ax), Instruction.Create(Code.Mov_moffs16_AX, __[0x0123456789abcdef].ToMemoryOperand(Bitness), ax));
			} /* else */ { // skip (src.Value == Register.AX && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], bx), Instruction.Create(Code.Mov_rm16_r16, __[rdi].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void mov_reg32_reg32() {
			TestAssembler(c => c.mov(edx, ebx), Instruction.Create(Code.Mov_rm32_r32, edx, ebx));
		}

		[Fact]
		public void mov_regSegment_reg32() {
			TestAssembler(c => c.mov(ds, ebx), Instruction.Create(Code.Mov_Sreg_r32m16, ds, ebx));
		}

		[Fact]
		public void mov_m_reg32() {
			{ /* if (src.Value == Register.EAX && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x0123456789abcdef], eax), Instruction.Create(Code.Mov_moffs32_EAX, __[0x0123456789abcdef].ToMemoryOperand(Bitness), eax));
			} /* else */ { // skip (src.Value == Register.EAX && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], ebx), Instruction.Create(Code.Mov_rm32_r32, __[rdi].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void mov_reg64_reg64() {
			TestAssembler(c => c.mov(rdx, rbx), Instruction.Create(Code.Mov_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void mov_regSegment_reg64() {
			TestAssembler(c => c.mov(ds, rbx), Instruction.Create(Code.Mov_Sreg_r64m16, ds, rbx));
		}

		[Fact]
		public void mov_regCR_reg64() {
			TestAssembler(c => c.mov(cr2, rbx), Instruction.Create(Code.Mov_cr_r64, cr2, rbx));
		}

		[Fact]
		public void mov_regDR_reg64() {
			TestAssembler(c => c.mov(dr1, rbx), Instruction.Create(Code.Mov_dr_r64, dr1, rbx));
		}

		[Fact]
		public void mov_m_reg64() {
			{ /* if (src.Value == Register.RAX && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x0123456789abcdef], rax), Instruction.Create(Code.Mov_moffs64_RAX, __[0x0123456789abcdef].ToMemoryOperand(Bitness), rax));
			} /* else */ { // skip (src.Value == Register.RAX && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], rbx), Instruction.Create(Code.Mov_rm64_r64, __[rdi].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void mov_reg16_regSegment() {
			TestAssembler(c => c.mov(dx, ds), Instruction.Create(Code.Mov_rm16_Sreg, dx, ds));
		}

		[Fact]
		public void mov_reg32_regSegment() {
			TestAssembler(c => c.mov(edx, ds), Instruction.Create(Code.Mov_r32m16_Sreg, edx, ds));
		}

		[Fact]
		public void mov_reg64_regSegment() {
			TestAssembler(c => c.mov(rdx, ds), Instruction.Create(Code.Mov_r64m16_Sreg, rdx, ds));
		}

		[Fact]
		public void mov_m_regSegment() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.mov(__dword_ptr[rcx], ds), Instruction.Create(Code.Mov_r32m16_Sreg, __dword_ptr[rcx].ToMemoryOperand(Bitness), ds));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void mov_reg64_regCR() {
			TestAssembler(c => c.mov(rdx, cr2), Instruction.Create(Code.Mov_r64_cr, rdx, cr2));
		}

		[Fact]
		public void mov_reg64_regDR() {
			TestAssembler(c => c.mov(rdx, dr1), Instruction.Create(Code.Mov_r64_dr, rdx, dr1));
		}

		[Fact]
		public void mov_reg8_m() {
			{ /* if (dst.Value == Register.AL && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(al, __[0x0123456789abcdef]), Instruction.Create(Code.Mov_AL_moffs8, al, __[0x0123456789abcdef].ToMemoryOperand(Bitness)));
			} /* else */ { // skip (dst.Value == Register.AL && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(dl, __[rsi]), Instruction.Create(Code.Mov_r8_rm8, dl, __[rsi].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mov_reg16_m() {
			{ /* if (dst.Value == Register.AX && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(ax, __[0x0123456789abcdef]), Instruction.Create(Code.Mov_AX_moffs16, ax, __[0x0123456789abcdef].ToMemoryOperand(Bitness)));
			} /* else */ { // skip (dst.Value == Register.AX && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(dx, __[rsi]), Instruction.Create(Code.Mov_r16_rm16, dx, __[rsi].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mov_reg32_m() {
			{ /* if (dst.Value == Register.EAX && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(eax, __[0x0123456789abcdef]), Instruction.Create(Code.Mov_EAX_moffs32, eax, __[0x0123456789abcdef].ToMemoryOperand(Bitness)));
			} /* else */ { // skip (dst.Value == Register.EAX && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(edx, __[rsi]), Instruction.Create(Code.Mov_r32_rm32, edx, __[rsi].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mov_reg64_m() {
			{ /* if (dst.Value == Register.RAX && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(rax, __[0x0123456789abcdef]), Instruction.Create(Code.Mov_RAX_moffs64, rax, __[0x0123456789abcdef].ToMemoryOperand(Bitness)));
			} /* else */ { // skip (dst.Value == Register.RAX && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(rdx, __[rsi]), Instruction.Create(Code.Mov_r64_rm64, rdx, __[rsi].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mov_regSegment_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.mov(ds, __dword_ptr[rcx]), Instruction.Create(Code.Mov_Sreg_r32m16, ds, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void mov_reg8_i() {
			TestAssembler(c => c.mov(dl, -5), Instruction.Create(Code.Mov_r8_imm8, dl, -5));
		}

		[Fact]
		public void mov_reg16_i() {
			TestAssembler(c => c.mov(dx, 16567), Instruction.Create(Code.Mov_r16_imm16, dx, 16567));
		}

		[Fact]
		public void mov_reg32_i() {
			TestAssembler(c => c.mov(edx, int.MaxValue), Instruction.Create(Code.Mov_r32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void mov_reg64_i() {
			TestAssembler(c => c.mov(rdx, long.MinValue), Instruction.Create(Code.Mov_r64_imm64, rdx, long.MinValue));
		}

		[Fact]
		public void mov_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.mov(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Mov_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.mov(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Mov_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.mov(__word_ptr[rdx], 16567), Instruction.Create(Code.Mov_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.mov(__byte_ptr[rdx], -5), Instruction.Create(Code.Mov_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.mov(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Mov_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void mov_reg8_u() {
			TestAssembler(c => c.mov(dl, (byte)127), Instruction.Create(Code.Mov_r8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void mov_reg16_u() {
			TestAssembler(c => c.mov(dx, (ushort)16567), Instruction.Create(Code.Mov_r16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void mov_reg32_u() {
			TestAssembler(c => c.mov(edx, (uint)int.MaxValue), Instruction.Create(Code.Mov_r32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void mov_reg64_u() {
			TestAssembler(c => c.mov(rdx, unchecked(long.MinValue)), Instruction.Create(Code.Mov_r64_imm64, rdx, unchecked(long.MinValue)));
		}

		[Fact]
		public void mov_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.mov(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Mov_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.mov(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Mov_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.mov(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Mov_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void movapd_regXMM_regXMM() {
			TestAssembler(c => c.movapd(xmm2, xmm3), Instruction.Create(Code.Movapd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movapd_m_regXMM() {
			TestAssembler(c => c.movapd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movapd_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movapd_regXMM_m() {
			TestAssembler(c => c.movapd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movapd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movaps_regXMM_regXMM() {
			TestAssembler(c => c.movaps(xmm2, xmm3), Instruction.Create(Code.Movaps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movaps_m_regXMM() {
			TestAssembler(c => c.movaps(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movaps_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movaps_regXMM_m() {
			TestAssembler(c => c.movaps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movaps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movbe_m_reg16() {
			TestAssembler(c => c.movbe(__[rcx], bx), Instruction.Create(Code.Movbe_m16_r16, __[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void movbe_m_reg32() {
			TestAssembler(c => c.movbe(__[rcx], ebx), Instruction.Create(Code.Movbe_m32_r32, __[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void movbe_m_reg64() {
			TestAssembler(c => c.movbe(__[rcx], rbx), Instruction.Create(Code.Movbe_m64_r64, __[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void movbe_reg16_m() {
			TestAssembler(c => c.movbe(dx, __[rcx]), Instruction.Create(Code.Movbe_r16_m16, dx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movbe_reg32_m() {
			TestAssembler(c => c.movbe(edx, __[rcx]), Instruction.Create(Code.Movbe_r32_m32, edx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movbe_reg64_m() {
			TestAssembler(c => c.movbe(rdx, __[rcx]), Instruction.Create(Code.Movbe_r64_m64, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movd_regMM_reg32() {
			TestAssembler(c => c.movd(mm2, ebx), Instruction.Create(Code.Movd_mm_rm32, mm2, ebx));
		}

		[Fact]
		public void movd_regXMM_reg32() {
			TestAssembler(c => c.movd(xmm2, ebx), Instruction.Create(Code.Movd_xmm_rm32, xmm2, ebx));
		}

		[Fact]
		public void movd_reg32_regMM() {
			TestAssembler(c => c.movd(edx, mm3), Instruction.Create(Code.Movd_rm32_mm, edx, mm3));
		}

		[Fact]
		public void movd_m_regMM() {
			TestAssembler(c => c.movd(__dword_ptr[rcx], mm3), Instruction.Create(Code.Movd_rm32_mm, __dword_ptr[rcx].ToMemoryOperand(Bitness), mm3));
		}

		[Fact]
		public void movd_reg32_regXMM() {
			TestAssembler(c => c.movd(edx, xmm3), Instruction.Create(Code.Movd_rm32_xmm, edx, xmm3));
		}

		[Fact]
		public void movd_m_regXMM() {
			TestAssembler(c => c.movd(__dword_ptr[rcx], xmm3), Instruction.Create(Code.Movd_rm32_xmm, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movd_regMM_m() {
			TestAssembler(c => c.movd(mm2, __dword_ptr[rcx]), Instruction.Create(Code.Movd_mm_rm32, mm2, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movd_regXMM_m() {
			TestAssembler(c => c.movd(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.Movd_xmm_rm32, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movddup_regXMM_regXMM() {
			TestAssembler(c => c.movddup(xmm2, xmm3), Instruction.Create(Code.Movddup_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void movddup_regXMM_m() {
			TestAssembler(c => c.movddup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movddup_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movdir64b_reg32_m() {
			TestAssembler(c => c.movdir64b(edx, __[ecx]), Instruction.Create(Code.Movdir64b_r32_m512, edx, __[ecx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movdir64b_reg64_m() {
			TestAssembler(c => c.movdir64b(rdx, __[rcx]), Instruction.Create(Code.Movdir64b_r64_m512, rdx, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movdiri_m_reg32() {
			TestAssembler(c => c.movdiri(__[rcx], ebx), Instruction.Create(Code.Movdiri_m32_r32, __[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void movdiri_m_reg64() {
			TestAssembler(c => c.movdiri(__[rcx], rbx), Instruction.Create(Code.Movdiri_m64_r64, __[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void movdq2q_regMM_regXMM() {
			TestAssembler(c => c.movdq2q(mm2, xmm3), Instruction.Create(Code.Movdq2q_mm_xmm, mm2, xmm3));
		}

		[Fact]
		public void movdqa_regXMM_regXMM() {
			TestAssembler(c => c.movdqa(xmm2, xmm3), Instruction.Create(Code.Movdqa_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movdqa_m_regXMM() {
			TestAssembler(c => c.movdqa(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movdqa_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movdqa_regXMM_m() {
			TestAssembler(c => c.movdqa(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movdqa_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movdqu_regXMM_regXMM() {
			TestAssembler(c => c.movdqu(xmm2, xmm3), Instruction.Create(Code.Movdqu_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movdqu_m_regXMM() {
			TestAssembler(c => c.movdqu(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movdqu_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movdqu_regXMM_m() {
			TestAssembler(c => c.movdqu(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movdqu_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movhlps_regXMM_regXMM() {
			TestAssembler(c => c.movhlps(xmm2, xmm3), Instruction.Create(Code.Movhlps_xmm_xmm, xmm2, xmm3));
		}

		[Fact]
		public void movhpd_m_regXMM() {
			TestAssembler(c => c.movhpd(__[rcx], xmm3), Instruction.Create(Code.Movhpd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movhpd_regXMM_m() {
			TestAssembler(c => c.movhpd(xmm2, __[rcx]), Instruction.Create(Code.Movhpd_xmm_m64, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movhps_m_regXMM() {
			TestAssembler(c => c.movhps(__[rcx], xmm3), Instruction.Create(Code.Movhps_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movhps_regXMM_m() {
			TestAssembler(c => c.movhps(xmm2, __[rcx]), Instruction.Create(Code.Movhps_xmm_m64, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movlhps_regXMM_regXMM() {
			TestAssembler(c => c.movlhps(xmm2, xmm3), Instruction.Create(Code.Movlhps_xmm_xmm, xmm2, xmm3));
		}

		[Fact]
		public void movlpd_m_regXMM() {
			TestAssembler(c => c.movlpd(__[rcx], xmm3), Instruction.Create(Code.Movlpd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movlpd_regXMM_m() {
			TestAssembler(c => c.movlpd(xmm2, __[rcx]), Instruction.Create(Code.Movlpd_xmm_m64, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movlps_m_regXMM() {
			TestAssembler(c => c.movlps(__[rcx], xmm3), Instruction.Create(Code.Movlps_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movlps_regXMM_m() {
			TestAssembler(c => c.movlps(xmm2, __[rcx]), Instruction.Create(Code.Movlps_xmm_m64, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movmskpd_reg32_regXMM() {
			TestAssembler(c => c.movmskpd(edx, xmm3), Instruction.Create(Code.Movmskpd_r32_xmm, edx, xmm3));
		}

		[Fact]
		public void movmskpd_reg64_regXMM() {
			TestAssembler(c => c.movmskpd(rdx, xmm3), Instruction.Create(Code.Movmskpd_r64_xmm, rdx, xmm3));
		}

		[Fact]
		public void movmskps_reg32_regXMM() {
			TestAssembler(c => c.movmskps(edx, xmm3), Instruction.Create(Code.Movmskps_r32_xmm, edx, xmm3));
		}

		[Fact]
		public void movmskps_reg64_regXMM() {
			TestAssembler(c => c.movmskps(rdx, xmm3), Instruction.Create(Code.Movmskps_r64_xmm, rdx, xmm3));
		}

		[Fact]
		public void movntdq_m_regXMM() {
			TestAssembler(c => c.movntdq(__[rcx], xmm3), Instruction.Create(Code.Movntdq_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movntdqa_regXMM_m() {
			TestAssembler(c => c.movntdqa(xmm2, __[rcx]), Instruction.Create(Code.Movntdqa_xmm_m128, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movnti_m_reg32() {
			TestAssembler(c => c.movnti(__[rcx], ebx), Instruction.Create(Code.Movnti_m32_r32, __[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void movnti_m_reg64() {
			TestAssembler(c => c.movnti(__[rcx], rbx), Instruction.Create(Code.Movnti_m64_r64, __[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void movntpd_m_regXMM() {
			TestAssembler(c => c.movntpd(__[rcx], xmm3), Instruction.Create(Code.Movntpd_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movntps_m_regXMM() {
			TestAssembler(c => c.movntps(__[rcx], xmm3), Instruction.Create(Code.Movntps_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movntq_m_regMM() {
			TestAssembler(c => c.movntq(__[rcx], mm3), Instruction.Create(Code.Movntq_m64_mm, __[rcx].ToMemoryOperand(Bitness), mm3));
		}

		[Fact]
		public void movntsd_m_regXMM() {
			TestAssembler(c => c.movntsd(__[rcx], xmm3), Instruction.Create(Code.Movntsd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movntss_m_regXMM() {
			TestAssembler(c => c.movntss(__[rcx], xmm3), Instruction.Create(Code.Movntss_m32_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movq_regMM_reg64() {
			TestAssembler(c => c.movq(mm2, rbx), Instruction.Create(Code.Movq_mm_rm64, mm2, rbx));
		}

		[Fact]
		public void movq_regXMM_reg64() {
			TestAssembler(c => c.movq(xmm2, rbx), Instruction.Create(Code.Movq_xmm_rm64, xmm2, rbx));
		}

		[Fact]
		public void movq_reg64_regMM() {
			TestAssembler(c => c.movq(rdx, mm3), Instruction.Create(Code.Movq_rm64_mm, rdx, mm3));
		}

		[Fact]
		public void movq_regMM_regMM() {
			TestAssembler(c => c.movq(mm2, mm3), Instruction.Create(Code.Movq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void movq_m_regMM() {
			TestAssembler(c => c.movq(__qword_ptr[rcx], mm3), Instruction.Create(Code.Movq_mmm64_mm, __qword_ptr[rcx].ToMemoryOperand(Bitness), mm3));
		}

		[Fact]
		public void movq_reg64_regXMM() {
			TestAssembler(c => c.movq(rdx, xmm3), Instruction.Create(Code.Movq_rm64_xmm, rdx, xmm3));
		}

		[Fact]
		public void movq_regXMM_regXMM() {
			TestAssembler(c => c.movq(xmm2, xmm3), Instruction.Create(Code.Movq_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void movq_m_regXMM() {
			TestAssembler(c => c.movq(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movq_xmmm64_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movq_regMM_m() {
			TestAssembler(c => c.movq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Movq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movq_regXMM_m() {
			TestAssembler(c => c.movq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movq2dq_regXMM_regMM() {
			TestAssembler(c => c.movq2dq(xmm2, mm3), Instruction.Create(Code.Movq2dq_xmm_mm, xmm2, mm3));
		}

		[Fact]
		public void movsb() {
			TestAssembler(c => c.movsb(), Instruction.CreateMovsb(Bitness));
		}

		[Fact]
		public void movsd() {
			TestAssembler(c => c.movsd(), Instruction.CreateMovsd(Bitness));
		}

		[Fact]
		public void movsd_regXMM_regXMM() {
			TestAssembler(c => c.movsd(xmm2, xmm3), Instruction.Create(Code.Movsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void movsd_m_regXMM() {
			TestAssembler(c => c.movsd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movsd_xmmm64_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movsd_regXMM_m() {
			TestAssembler(c => c.movsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movshdup_regXMM_regXMM() {
			TestAssembler(c => c.movshdup(xmm2, xmm3), Instruction.Create(Code.Movshdup_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movshdup_regXMM_m() {
			TestAssembler(c => c.movshdup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movshdup_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movsldup_regXMM_regXMM() {
			TestAssembler(c => c.movsldup(xmm2, xmm3), Instruction.Create(Code.Movsldup_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movsldup_regXMM_m() {
			TestAssembler(c => c.movsldup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movsldup_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movsq() {
			TestAssembler(c => c.movsq(), Instruction.CreateMovsq(Bitness));
		}

		[Fact]
		public void movss_regXMM_regXMM() {
			TestAssembler(c => c.movss(xmm2, xmm3), Instruction.Create(Code.Movss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void movss_m_regXMM() {
			TestAssembler(c => c.movss(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movss_xmmm32_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movss_regXMM_m() {
			TestAssembler(c => c.movss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movsw() {
			TestAssembler(c => c.movsw(), Instruction.CreateMovsw(Bitness));
		}

		[Fact]
		public void movsx_reg16_reg8() {
			TestAssembler(c => c.movsx(dx, bl), Instruction.Create(Code.Movsx_r16_rm8, dx, bl));
		}

		[Fact]
		public void movsx_reg32_reg8() {
			TestAssembler(c => c.movsx(edx, bl), Instruction.Create(Code.Movsx_r32_rm8, edx, bl));
		}

		[Fact]
		public void movsx_reg64_reg8() {
			TestAssembler(c => c.movsx(rdx, bl), Instruction.Create(Code.Movsx_r64_rm8, rdx, bl));
		}

		[Fact]
		public void movsx_reg16_reg16() {
			TestAssembler(c => c.movsx(dx, bx), Instruction.Create(Code.Movsx_r16_rm16, dx, bx));
		}

		[Fact]
		public void movsx_reg32_reg16() {
			TestAssembler(c => c.movsx(edx, bx), Instruction.Create(Code.Movsx_r32_rm16, edx, bx));
		}

		[Fact]
		public void movsx_reg64_reg16() {
			TestAssembler(c => c.movsx(rdx, bx), Instruction.Create(Code.Movsx_r64_rm16, rdx, bx));
		}

		[Fact]
		public void movsx_reg16_m() {
			{ /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.movsx(dx, __word_ptr[rdx]), Instruction.Create(Code.Movsx_r16_rm16, dx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.movsx(dx, __byte_ptr[rdx]), Instruction.Create(Code.Movsx_r16_rm8, dx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.movsx(dx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movsx_r16_rm8, dx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void movsx_reg32_m() {
			{ /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.movsx(edx, __word_ptr[rdx]), Instruction.Create(Code.Movsx_r32_rm16, edx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.movsx(edx, __byte_ptr[rdx]), Instruction.Create(Code.Movsx_r32_rm8, edx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.movsx(edx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movsx_r32_rm8, edx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void movsx_reg64_m() {
			{ /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.movsx(rdx, __word_ptr[rdx]), Instruction.Create(Code.Movsx_r64_rm16, rdx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.movsx(rdx, __byte_ptr[rdx]), Instruction.Create(Code.Movsx_r64_rm8, rdx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.movsx(rdx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movsx_r64_rm8, rdx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void movsxd_reg16_reg16() {
			TestAssembler(c => c.movsxd(dx, bx), Instruction.Create(Code.Movsxd_r16_rm16, dx, bx));
		}

		[Fact]
		public void movsxd_reg32_reg32() {
			TestAssembler(c => c.movsxd(edx, ebx), Instruction.Create(Code.Movsxd_r32_rm32, edx, ebx));
		}

		[Fact]
		public void movsxd_reg64_reg32() {
			TestAssembler(c => c.movsxd(rdx, ebx), Instruction.Create(Code.Movsxd_r64_rm32, rdx, ebx));
		}

		[Fact]
		public void movsxd_reg16_m() {
			TestAssembler(c => c.movsxd(dx, __word_ptr[rcx]), Instruction.Create(Code.Movsxd_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movsxd_reg32_m() {
			TestAssembler(c => c.movsxd(edx, __dword_ptr[rcx]), Instruction.Create(Code.Movsxd_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movsxd_reg64_m() {
			TestAssembler(c => c.movsxd(rdx, __dword_ptr[rcx]), Instruction.Create(Code.Movsxd_r64_rm32, rdx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movupd_regXMM_regXMM() {
			TestAssembler(c => c.movupd(xmm2, xmm3), Instruction.Create(Code.Movupd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movupd_m_regXMM() {
			TestAssembler(c => c.movupd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movupd_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movupd_regXMM_m() {
			TestAssembler(c => c.movupd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movupd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movups_regXMM_regXMM() {
			TestAssembler(c => c.movups(xmm2, xmm3), Instruction.Create(Code.Movups_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void movups_m_regXMM() {
			TestAssembler(c => c.movups(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movups_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}

		[Fact]
		public void movups_regXMM_m() {
			TestAssembler(c => c.movups(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movups_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void movzx_reg16_reg8() {
			TestAssembler(c => c.movzx(dx, bl), Instruction.Create(Code.Movzx_r16_rm8, dx, bl));
		}

		[Fact]
		public void movzx_reg32_reg8() {
			TestAssembler(c => c.movzx(edx, bl), Instruction.Create(Code.Movzx_r32_rm8, edx, bl));
		}

		[Fact]
		public void movzx_reg64_reg8() {
			TestAssembler(c => c.movzx(rdx, bl), Instruction.Create(Code.Movzx_r64_rm8, rdx, bl));
		}

		[Fact]
		public void movzx_reg16_reg16() {
			TestAssembler(c => c.movzx(dx, bx), Instruction.Create(Code.Movzx_r16_rm16, dx, bx));
		}

		[Fact]
		public void movzx_reg32_reg16() {
			TestAssembler(c => c.movzx(edx, bx), Instruction.Create(Code.Movzx_r32_rm16, edx, bx));
		}

		[Fact]
		public void movzx_reg64_reg16() {
			TestAssembler(c => c.movzx(rdx, bx), Instruction.Create(Code.Movzx_r64_rm16, rdx, bx));
		}

		[Fact]
		public void movzx_reg16_m() {
			{ /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.movzx(dx, __word_ptr[rdx]), Instruction.Create(Code.Movzx_r16_rm16, dx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.movzx(dx, __byte_ptr[rdx]), Instruction.Create(Code.Movzx_r16_rm8, dx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.movzx(dx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movzx_r16_rm8, dx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void movzx_reg32_m() {
			{ /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.movzx(edx, __word_ptr[rdx]), Instruction.Create(Code.Movzx_r32_rm16, edx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.movzx(edx, __byte_ptr[rdx]), Instruction.Create(Code.Movzx_r32_rm8, edx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.movzx(edx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movzx_r32_rm8, edx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void movzx_reg64_m() {
			{ /* if (src.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.movzx(rdx, __word_ptr[rdx]), Instruction.Create(Code.Movzx_r64_rm16, rdx, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.movzx(rdx, __byte_ptr[rdx]), Instruction.Create(Code.Movzx_r64_rm8, rdx, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.movzx(rdx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movzx_r64_rm8, rdx, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void mpsadbw_regXMM_regXMM_i() {
			TestAssembler(c => c.mpsadbw(xmm2, xmm3, -5), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void mpsadbw_regXMM_m_i() {
			TestAssembler(c => c.mpsadbw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void mpsadbw_regXMM_regXMM_u() {
			TestAssembler(c => c.mpsadbw(xmm2, xmm3, (byte)127), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void mpsadbw_regXMM_m_u() {
			TestAssembler(c => c.mpsadbw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void mul_reg8() {
			TestAssembler(c => c.mul(dl), Instruction.Create(Code.Mul_rm8, dl));
		}

		[Fact]
		public void mul_reg16() {
			TestAssembler(c => c.mul(dx), Instruction.Create(Code.Mul_rm16, dx));
		}

		[Fact]
		public void mul_reg32() {
			TestAssembler(c => c.mul(edx), Instruction.Create(Code.Mul_rm32, edx));
		}

		[Fact]
		public void mul_reg64() {
			TestAssembler(c => c.mul(rdx), Instruction.Create(Code.Mul_rm64, rdx));
		}

		[Fact]
		public void mul_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.mul(__qword_ptr[rdx]), Instruction.Create(Code.Mul_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.mul(__dword_ptr[rdx]), Instruction.Create(Code.Mul_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.mul(__word_ptr[rdx]), Instruction.Create(Code.Mul_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.mul(__byte_ptr[rdx]), Instruction.Create(Code.Mul_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.mul(__zmmword_ptr[rdx]), Instruction.Create(Code.Mul_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void mulpd_regXMM_regXMM() {
			TestAssembler(c => c.mulpd(xmm2, xmm3), Instruction.Create(Code.Mulpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void mulpd_regXMM_m() {
			TestAssembler(c => c.mulpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mulps_regXMM_regXMM() {
			TestAssembler(c => c.mulps(xmm2, xmm3), Instruction.Create(Code.Mulps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void mulps_regXMM_m() {
			TestAssembler(c => c.mulps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mulsd_regXMM_regXMM() {
			TestAssembler(c => c.mulsd(xmm2, xmm3), Instruction.Create(Code.Mulsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void mulsd_regXMM_m() {
			TestAssembler(c => c.mulsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void mulss_regXMM_regXMM() {
			TestAssembler(c => c.mulss(xmm2, xmm3), Instruction.Create(Code.Mulss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void mulss_regXMM_m() {
			TestAssembler(c => c.mulss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_VEX
		[Fact]
		public void mulx_reg32_reg32_reg32() {
			TestAssembler(c => c.mulx(edx, ebx, esp), Instruction.Create(Code.VEX_Mulx_r32_r32_rm32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void mulx_reg64_reg64_reg64() {
			TestAssembler(c => c.mulx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Mulx_r64_r64_rm64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void mulx_reg32_reg32_m() {
			TestAssembler(c => c.mulx(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Mulx_r32_r32_rm32, edx, ebx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void mulx_reg64_reg64_m() {
			TestAssembler(c => c.mulx(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Mulx_r64_r64_rm64, rdx, rbx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void mwait() {
			TestAssembler(c => c.mwait(), Instruction.Create(Code.Mwait));
		}

		[Fact]
		public void mwaitx() {
			TestAssembler(c => c.mwaitx(), Instruction.Create(Code.Mwaitx));
		}

		[Fact]
		public void neg_reg8() {
			TestAssembler(c => c.neg(dl), Instruction.Create(Code.Neg_rm8, dl));
		}

		[Fact]
		public void neg_reg16() {
			TestAssembler(c => c.neg(dx), Instruction.Create(Code.Neg_rm16, dx));
		}

		[Fact]
		public void neg_reg32() {
			TestAssembler(c => c.neg(edx), Instruction.Create(Code.Neg_rm32, edx));
		}

		[Fact]
		public void neg_reg64() {
			TestAssembler(c => c.neg(rdx), Instruction.Create(Code.Neg_rm64, rdx));
		}

		[Fact]
		public void neg_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.neg(__qword_ptr[rdx]), Instruction.Create(Code.Neg_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.neg(__dword_ptr[rdx]), Instruction.Create(Code.Neg_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.neg(__word_ptr[rdx]), Instruction.Create(Code.Neg_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.neg(__byte_ptr[rdx]), Instruction.Create(Code.Neg_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.neg(__zmmword_ptr[rdx]), Instruction.Create(Code.Neg_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void nop() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.nop(), Instruction.Create(Code.Nopd));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void nop_reg16() {
			TestAssembler(c => c.nop(dx), Instruction.Create(Code.Nop_rm16, dx));
		}

		[Fact]
		public void nop_reg32() {
			TestAssembler(c => c.nop(edx), Instruction.Create(Code.Nop_rm32, edx));
		}

		[Fact]
		public void nop_reg64() {
			TestAssembler(c => c.nop(rdx), Instruction.Create(Code.Nop_rm64, rdx));
		}

		[Fact]
		public void nop_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.nop(__qword_ptr[rdx]), Instruction.Create(Code.Nop_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.nop(__dword_ptr[rdx]), Instruction.Create(Code.Nop_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.nop(__word_ptr[rdx]), Instruction.Create(Code.Nop_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.nop(__zmmword_ptr[rdx]), Instruction.Create(Code.Nop_rm16, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void not_reg8() {
			TestAssembler(c => c.not(dl), Instruction.Create(Code.Not_rm8, dl));
		}

		[Fact]
		public void not_reg16() {
			TestAssembler(c => c.not(dx), Instruction.Create(Code.Not_rm16, dx));
		}

		[Fact]
		public void not_reg32() {
			TestAssembler(c => c.not(edx), Instruction.Create(Code.Not_rm32, edx));
		}

		[Fact]
		public void not_reg64() {
			TestAssembler(c => c.not(rdx), Instruction.Create(Code.Not_rm64, rdx));
		}

		[Fact]
		public void not_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.not(__qword_ptr[rdx]), Instruction.Create(Code.Not_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.not(__dword_ptr[rdx]), Instruction.Create(Code.Not_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.not(__word_ptr[rdx]), Instruction.Create(Code.Not_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.not(__byte_ptr[rdx]), Instruction.Create(Code.Not_rm8, __byte_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.not(__zmmword_ptr[rdx]), Instruction.Create(Code.Not_rm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void or_reg8_reg8() {
			TestAssembler(c => c.or(dl, bl), Instruction.Create(Code.Or_rm8_r8, dl, bl));
		}

		[Fact]
		public void or_m_reg8() {
			TestAssembler(c => c.or(__byte_ptr[rcx], bl), Instruction.Create(Code.Or_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void or_reg16_reg16() {
			TestAssembler(c => c.or(dx, bx), Instruction.Create(Code.Or_rm16_r16, dx, bx));
		}

		[Fact]
		public void or_m_reg16() {
			TestAssembler(c => c.or(__word_ptr[rcx], bx), Instruction.Create(Code.Or_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void or_reg32_reg32() {
			TestAssembler(c => c.or(edx, ebx), Instruction.Create(Code.Or_rm32_r32, edx, ebx));
		}

		[Fact]
		public void or_m_reg32() {
			TestAssembler(c => c.or(__dword_ptr[rcx], ebx), Instruction.Create(Code.Or_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void or_reg64_reg64() {
			TestAssembler(c => c.or(rdx, rbx), Instruction.Create(Code.Or_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void or_m_reg64() {
			TestAssembler(c => c.or(__qword_ptr[rcx], rbx), Instruction.Create(Code.Or_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void or_reg8_m() {
			TestAssembler(c => c.or(dl, __byte_ptr[rcx]), Instruction.Create(Code.Or_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void or_reg16_m() {
			TestAssembler(c => c.or(dx, __word_ptr[rcx]), Instruction.Create(Code.Or_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void or_reg32_m() {
			TestAssembler(c => c.or(edx, __dword_ptr[rcx]), Instruction.Create(Code.Or_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void or_reg64_m() {
			TestAssembler(c => c.or(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Or_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void or_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.or(al, -5), Instruction.Create(Code.Or_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.or(dl, -5), Instruction.Create(Code.Or_rm8_imm8, dl, -5));
		}

		[Fact]
		public void or_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.or(ax, 16567), Instruction.Create(Code.Or_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.or(dx, sbyte.MinValue), Instruction.Create(Code.Or_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.or(dx, sbyte.MaxValue), Instruction.Create(Code.Or_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.or(dx, 16567), Instruction.Create(Code.Or_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void or_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.or(eax, int.MaxValue), Instruction.Create(Code.Or_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.or(edx, sbyte.MinValue), Instruction.Create(Code.Or_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.or(edx, sbyte.MaxValue), Instruction.Create(Code.Or_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.or(edx, int.MaxValue), Instruction.Create(Code.Or_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void or_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.or(rax, int.MinValue), Instruction.Create(Code.Or_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.or(rdx, sbyte.MinValue), Instruction.Create(Code.Or_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.or(rdx, sbyte.MaxValue), Instruction.Create(Code.Or_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.or(rdx, int.MinValue), Instruction.Create(Code.Or_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void or_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.or(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Or_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.or(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Or_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.or(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Or_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.or(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Or_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.or(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Or_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.or(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Or_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.or(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Or_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.or(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Or_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.or(__word_ptr[rdx], 16567), Instruction.Create(Code.Or_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.or(__byte_ptr[rdx], -5), Instruction.Create(Code.Or_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.or(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Or_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void or_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.or(al, (byte)127), Instruction.Create(Code.Or_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.or(dl, (byte)127), Instruction.Create(Code.Or_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void or_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.or(ax, (ushort)16567), Instruction.Create(Code.Or_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.or(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Or_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.or(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Or_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.or(dx, (ushort)16567), Instruction.Create(Code.Or_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void or_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.or(eax, (uint)int.MaxValue), Instruction.Create(Code.Or_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.or(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Or_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.or(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Or_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.or(edx, (uint)int.MaxValue), Instruction.Create(Code.Or_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void or_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.or(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Or_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.or(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Or_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.or(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Or_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.or(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Or_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.or(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Or_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.or(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Or_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.or(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Or_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void orpd_regXMM_regXMM() {
			TestAssembler(c => c.orpd(xmm2, xmm3), Instruction.Create(Code.Orpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void orpd_regXMM_m() {
			TestAssembler(c => c.orpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Orpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void orps_regXMM_regXMM() {
			TestAssembler(c => c.orps(xmm2, xmm3), Instruction.Create(Code.Orps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void orps_regXMM_m() {
			TestAssembler(c => c.orps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Orps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void @out_reg16_reg8() {
			TestAssembler(c => c.@out(dx, al), Instruction.Create(Code.Out_DX_AL, dx, al));
		}

		[Fact]
		public void @out_i_reg8() {
			TestAssembler(c => c.@out(-5, al), Instruction.Create(Code.Out_imm8_AL, -5, al));
		}

		[Fact]
		public void @out_u_reg8() {
			TestAssembler(c => c.@out((byte)127, al), Instruction.Create(Code.Out_imm8_AL, (uint)(byte)127, al));
		}

		[Fact]
		public void @out_reg16_reg16() {
			TestAssembler(c => c.@out(dx, ax), Instruction.Create(Code.Out_DX_AX, dx, ax));
		}

		[Fact]
		public void @out_i_reg16() {
			TestAssembler(c => c.@out(-5, ax), Instruction.Create(Code.Out_imm8_AX, -5, ax));
		}

		[Fact]
		public void @out_u_reg16() {
			TestAssembler(c => c.@out((byte)127, ax), Instruction.Create(Code.Out_imm8_AX, (uint)(byte)127, ax));
		}

		[Fact]
		public void @out_reg16_reg32() {
			TestAssembler(c => c.@out(dx, eax), Instruction.Create(Code.Out_DX_EAX, dx, eax));
		}

		[Fact]
		public void @out_i_reg32() {
			TestAssembler(c => c.@out(-5, eax), Instruction.Create(Code.Out_imm8_EAX, -5, eax));
		}

		[Fact]
		public void @out_u_reg32() {
			TestAssembler(c => c.@out((byte)127, eax), Instruction.Create(Code.Out_imm8_EAX, (uint)(byte)127, eax));
		}

		[Fact]
		public void outsb() {
			TestAssembler(c => c.outsb(), Instruction.CreateOutsb(Bitness));
		}

		[Fact]
		public void outsd() {
			TestAssembler(c => c.outsd(), Instruction.CreateOutsd(Bitness));
		}

		[Fact]
		public void outsw() {
			TestAssembler(c => c.outsw(), Instruction.CreateOutsw(Bitness));
		}

		[Fact]
		public void pabsb_regMM_regMM() {
			TestAssembler(c => c.pabsb(mm2, mm3), Instruction.Create(Code.Pabsb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pabsb_regXMM_regXMM() {
			TestAssembler(c => c.pabsb(xmm2, xmm3), Instruction.Create(Code.Pabsb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pabsb_regMM_m() {
			TestAssembler(c => c.pabsb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pabsb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pabsb_regXMM_m() {
			TestAssembler(c => c.pabsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pabsb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pabsd_regMM_regMM() {
			TestAssembler(c => c.pabsd(mm2, mm3), Instruction.Create(Code.Pabsd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pabsd_regXMM_regXMM() {
			TestAssembler(c => c.pabsd(xmm2, xmm3), Instruction.Create(Code.Pabsd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pabsd_regMM_m() {
			TestAssembler(c => c.pabsd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pabsd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pabsd_regXMM_m() {
			TestAssembler(c => c.pabsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pabsd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pabsw_regMM_regMM() {
			TestAssembler(c => c.pabsw(mm2, mm3), Instruction.Create(Code.Pabsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pabsw_regXMM_regXMM() {
			TestAssembler(c => c.pabsw(xmm2, xmm3), Instruction.Create(Code.Pabsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pabsw_regMM_m() {
			TestAssembler(c => c.pabsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pabsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pabsw_regXMM_m() {
			TestAssembler(c => c.pabsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pabsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packssdw_regMM_regMM() {
			TestAssembler(c => c.packssdw(mm2, mm3), Instruction.Create(Code.Packssdw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void packssdw_regXMM_regXMM() {
			TestAssembler(c => c.packssdw(xmm2, xmm3), Instruction.Create(Code.Packssdw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void packssdw_regMM_m() {
			TestAssembler(c => c.packssdw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Packssdw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packssdw_regXMM_m() {
			TestAssembler(c => c.packssdw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packssdw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packsswb_regMM_regMM() {
			TestAssembler(c => c.packsswb(mm2, mm3), Instruction.Create(Code.Packsswb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void packsswb_regXMM_regXMM() {
			TestAssembler(c => c.packsswb(xmm2, xmm3), Instruction.Create(Code.Packsswb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void packsswb_regMM_m() {
			TestAssembler(c => c.packsswb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Packsswb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packsswb_regXMM_m() {
			TestAssembler(c => c.packsswb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packsswb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packusdw_regXMM_regXMM() {
			TestAssembler(c => c.packusdw(xmm2, xmm3), Instruction.Create(Code.Packusdw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void packusdw_regXMM_m() {
			TestAssembler(c => c.packusdw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packusdw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packuswb_regMM_regMM() {
			TestAssembler(c => c.packuswb(mm2, mm3), Instruction.Create(Code.Packuswb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void packuswb_regXMM_regXMM() {
			TestAssembler(c => c.packuswb(xmm2, xmm3), Instruction.Create(Code.Packuswb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void packuswb_regMM_m() {
			TestAssembler(c => c.packuswb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Packuswb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void packuswb_regXMM_m() {
			TestAssembler(c => c.packuswb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packuswb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddb_regMM_regMM() {
			TestAssembler(c => c.paddb(mm2, mm3), Instruction.Create(Code.Paddb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddb_regXMM_regXMM() {
			TestAssembler(c => c.paddb(xmm2, xmm3), Instruction.Create(Code.Paddb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddb_regMM_m() {
			TestAssembler(c => c.paddb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddb_regXMM_m() {
			TestAssembler(c => c.paddb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddd_regMM_regMM() {
			TestAssembler(c => c.paddd(mm2, mm3), Instruction.Create(Code.Paddd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddd_regXMM_regXMM() {
			TestAssembler(c => c.paddd(xmm2, xmm3), Instruction.Create(Code.Paddd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddd_regMM_m() {
			TestAssembler(c => c.paddd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddd_regXMM_m() {
			TestAssembler(c => c.paddd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddq_regMM_regMM() {
			TestAssembler(c => c.paddq(mm2, mm3), Instruction.Create(Code.Paddq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddq_regXMM_regXMM() {
			TestAssembler(c => c.paddq(xmm2, xmm3), Instruction.Create(Code.Paddq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddq_regMM_m() {
			TestAssembler(c => c.paddq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddq_regXMM_m() {
			TestAssembler(c => c.paddq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddsb_regMM_regMM() {
			TestAssembler(c => c.paddsb(mm2, mm3), Instruction.Create(Code.Paddsb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddsb_regXMM_regXMM() {
			TestAssembler(c => c.paddsb(xmm2, xmm3), Instruction.Create(Code.Paddsb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddsb_regMM_m() {
			TestAssembler(c => c.paddsb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddsb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddsb_regXMM_m() {
			TestAssembler(c => c.paddsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddsb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddsw_regMM_regMM() {
			TestAssembler(c => c.paddsw(mm2, mm3), Instruction.Create(Code.Paddsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddsw_regXMM_regXMM() {
			TestAssembler(c => c.paddsw(xmm2, xmm3), Instruction.Create(Code.Paddsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddsw_regMM_m() {
			TestAssembler(c => c.paddsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddsw_regXMM_m() {
			TestAssembler(c => c.paddsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddusb_regMM_regMM() {
			TestAssembler(c => c.paddusb(mm2, mm3), Instruction.Create(Code.Paddusb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddusb_regXMM_regXMM() {
			TestAssembler(c => c.paddusb(xmm2, xmm3), Instruction.Create(Code.Paddusb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddusb_regMM_m() {
			TestAssembler(c => c.paddusb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddusb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddusb_regXMM_m() {
			TestAssembler(c => c.paddusb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddusb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddusw_regMM_regMM() {
			TestAssembler(c => c.paddusw(mm2, mm3), Instruction.Create(Code.Paddusw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddusw_regXMM_regXMM() {
			TestAssembler(c => c.paddusw(xmm2, xmm3), Instruction.Create(Code.Paddusw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddusw_regMM_m() {
			TestAssembler(c => c.paddusw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddusw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddusw_regXMM_m() {
			TestAssembler(c => c.paddusw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddusw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddw_regMM_regMM() {
			TestAssembler(c => c.paddw(mm2, mm3), Instruction.Create(Code.Paddw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void paddw_regXMM_regXMM() {
			TestAssembler(c => c.paddw(xmm2, xmm3), Instruction.Create(Code.Paddw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void paddw_regMM_m() {
			TestAssembler(c => c.paddw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void paddw_regXMM_m() {
			TestAssembler(c => c.paddw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void palignr_regMM_regMM_i() {
			TestAssembler(c => c.palignr(mm2, mm3, -5), Instruction.Create(Code.Palignr_mm_mmm64_imm8, mm2, mm3, -5));
		}

		[Fact]
		public void palignr_regXMM_regXMM_i() {
			TestAssembler(c => c.palignr(xmm2, xmm3, -5), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void palignr_regMM_m_i() {
			TestAssembler(c => c.palignr(mm2, __qword_ptr[rcx], -5), Instruction.Create(Code.Palignr_mm_mmm64_imm8, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void palignr_regXMM_m_i() {
			TestAssembler(c => c.palignr(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void palignr_regMM_regMM_u() {
			TestAssembler(c => c.palignr(mm2, mm3, (byte)127), Instruction.Create(Code.Palignr_mm_mmm64_imm8, mm2, mm3, (uint)(byte)127));
		}

		[Fact]
		public void palignr_regXMM_regXMM_u() {
			TestAssembler(c => c.palignr(xmm2, xmm3, (byte)127), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void palignr_regMM_m_u() {
			TestAssembler(c => c.palignr(mm2, __qword_ptr[rcx], (byte)127), Instruction.Create(Code.Palignr_mm_mmm64_imm8, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void palignr_regXMM_m_u() {
			TestAssembler(c => c.palignr(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pand_regMM_regMM() {
			TestAssembler(c => c.pand(mm2, mm3), Instruction.Create(Code.Pand_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pand_regXMM_regXMM() {
			TestAssembler(c => c.pand(xmm2, xmm3), Instruction.Create(Code.Pand_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pand_regMM_m() {
			TestAssembler(c => c.pand(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pand_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pand_regXMM_m() {
			TestAssembler(c => c.pand(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pand_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pandn_regMM_regMM() {
			TestAssembler(c => c.pandn(mm2, mm3), Instruction.Create(Code.Pandn_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pandn_regXMM_regXMM() {
			TestAssembler(c => c.pandn(xmm2, xmm3), Instruction.Create(Code.Pandn_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pandn_regMM_m() {
			TestAssembler(c => c.pandn(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pandn_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pandn_regXMM_m() {
			TestAssembler(c => c.pandn(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pandn_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pause() {
			TestAssembler(c => c.pause(), Instruction.Create(Code.Pause));
		}

		[Fact]
		public void pavgb_regMM_regMM() {
			TestAssembler(c => c.pavgb(mm2, mm3), Instruction.Create(Code.Pavgb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pavgb_regXMM_regXMM() {
			TestAssembler(c => c.pavgb(xmm2, xmm3), Instruction.Create(Code.Pavgb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pavgb_regMM_m() {
			TestAssembler(c => c.pavgb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pavgb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pavgb_regXMM_m() {
			TestAssembler(c => c.pavgb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pavgb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_D3NOW
		[Fact]
		public void pavgusb_regMM_regMM() {
			TestAssembler(c => c.pavgusb(mm2, mm3), Instruction.Create(Code.D3NOW_Pavgusb_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pavgusb_regMM_m() {
			TestAssembler(c => c.pavgusb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pavgusb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void pavgw_regMM_regMM() {
			TestAssembler(c => c.pavgw(mm2, mm3), Instruction.Create(Code.Pavgw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pavgw_regXMM_regXMM() {
			TestAssembler(c => c.pavgw(xmm2, xmm3), Instruction.Create(Code.Pavgw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pavgw_regMM_m() {
			TestAssembler(c => c.pavgw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pavgw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pavgw_regXMM_m() {
			TestAssembler(c => c.pavgw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pavgw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pblendvb_regXMM_regXMM() {
			TestAssembler(c => c.pblendvb(xmm2, xmm3), Instruction.Create(Code.Pblendvb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pblendvb_regXMM_m() {
			TestAssembler(c => c.pblendvb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pblendvb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pblendw_regXMM_regXMM_i() {
			TestAssembler(c => c.pblendw(xmm2, xmm3, -5), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pblendw_regXMM_m_i() {
			TestAssembler(c => c.pblendw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pblendw_regXMM_regXMM_u() {
			TestAssembler(c => c.pblendw(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pblendw_regXMM_m_u() {
			TestAssembler(c => c.pblendw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pclmulhqhqdq_regXMM_regXMM() {
			TestAssembler(c => c.pclmulhqhqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, xmm3, 17));
		}

		[Fact]
		public void pclmulhqhqdq_regXMM_m() {
			TestAssembler(c => c.pclmulhqhqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}

		[Fact]
		public void pclmulhqlqdq_regXMM_regXMM() {
			TestAssembler(c => c.pclmulhqlqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, xmm3, 1));
		}

		[Fact]
		public void pclmulhqlqdq_regXMM_m() {
			TestAssembler(c => c.pclmulhqlqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}

		[Fact]
		public void pclmullqhqdq_regXMM_regXMM() {
			TestAssembler(c => c.pclmullqhqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, xmm3, 16));
		}

		[Fact]
		public void pclmullqhqdq_regXMM_m() {
			TestAssembler(c => c.pclmullqhqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}

		[Fact]
		public void pclmullqlqdq_regXMM_regXMM() {
			TestAssembler(c => c.pclmullqlqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, xmm3, 0));
		}

		[Fact]
		public void pclmullqlqdq_regXMM_m() {
			TestAssembler(c => c.pclmullqlqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}

		[Fact]
		public void pclmulqdq_regXMM_regXMM_i() {
			TestAssembler(c => c.pclmulqdq(xmm2, xmm3, -5), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pclmulqdq_regXMM_m_i() {
			TestAssembler(c => c.pclmulqdq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pclmulqdq_regXMM_regXMM_u() {
			TestAssembler(c => c.pclmulqdq(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pclmulqdq_regXMM_m_u() {
			TestAssembler(c => c.pclmulqdq(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcmpeqb_regMM_regMM() {
			TestAssembler(c => c.pcmpeqb(mm2, mm3), Instruction.Create(Code.Pcmpeqb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pcmpeqb_regXMM_regXMM() {
			TestAssembler(c => c.pcmpeqb(xmm2, xmm3), Instruction.Create(Code.Pcmpeqb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpeqb_regMM_m() {
			TestAssembler(c => c.pcmpeqb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpeqb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpeqb_regXMM_m() {
			TestAssembler(c => c.pcmpeqb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpeqd_regMM_regMM() {
			TestAssembler(c => c.pcmpeqd(mm2, mm3), Instruction.Create(Code.Pcmpeqd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pcmpeqd_regXMM_regXMM() {
			TestAssembler(c => c.pcmpeqd(xmm2, xmm3), Instruction.Create(Code.Pcmpeqd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpeqd_regMM_m() {
			TestAssembler(c => c.pcmpeqd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpeqd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpeqd_regXMM_m() {
			TestAssembler(c => c.pcmpeqd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpeqq_regXMM_regXMM() {
			TestAssembler(c => c.pcmpeqq(xmm2, xmm3), Instruction.Create(Code.Pcmpeqq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpeqq_regXMM_m() {
			TestAssembler(c => c.pcmpeqq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpeqw_regMM_regMM() {
			TestAssembler(c => c.pcmpeqw(mm2, mm3), Instruction.Create(Code.Pcmpeqw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pcmpeqw_regXMM_regXMM() {
			TestAssembler(c => c.pcmpeqw(xmm2, xmm3), Instruction.Create(Code.Pcmpeqw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpeqw_regMM_m() {
			TestAssembler(c => c.pcmpeqw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpeqw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpeqw_regXMM_m() {
			TestAssembler(c => c.pcmpeqw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpestri_regXMM_regXMM_i() {
			TestAssembler(c => c.pcmpestri(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pcmpestri_regXMM_m_i() {
			TestAssembler(c => c.pcmpestri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pcmpestri_regXMM_regXMM_u() {
			TestAssembler(c => c.pcmpestri(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pcmpestri_regXMM_m_u() {
			TestAssembler(c => c.pcmpestri(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcmpestri64_regXMM_regXMM_i() {
			TestAssembler(c => c.pcmpestri64(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pcmpestri64_regXMM_m_i() {
			TestAssembler(c => c.pcmpestri64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pcmpestri64_regXMM_regXMM_u() {
			TestAssembler(c => c.pcmpestri64(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pcmpestri64_regXMM_m_u() {
			TestAssembler(c => c.pcmpestri64(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcmpestrm_regXMM_regXMM_i() {
			TestAssembler(c => c.pcmpestrm(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pcmpestrm_regXMM_m_i() {
			TestAssembler(c => c.pcmpestrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pcmpestrm_regXMM_regXMM_u() {
			TestAssembler(c => c.pcmpestrm(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pcmpestrm_regXMM_m_u() {
			TestAssembler(c => c.pcmpestrm(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcmpestrm64_regXMM_regXMM_i() {
			TestAssembler(c => c.pcmpestrm64(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pcmpestrm64_regXMM_m_i() {
			TestAssembler(c => c.pcmpestrm64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pcmpestrm64_regXMM_regXMM_u() {
			TestAssembler(c => c.pcmpestrm64(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pcmpestrm64_regXMM_m_u() {
			TestAssembler(c => c.pcmpestrm64(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcmpgtb_regMM_regMM() {
			TestAssembler(c => c.pcmpgtb(mm2, mm3), Instruction.Create(Code.Pcmpgtb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pcmpgtb_regXMM_regXMM() {
			TestAssembler(c => c.pcmpgtb(xmm2, xmm3), Instruction.Create(Code.Pcmpgtb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpgtb_regMM_m() {
			TestAssembler(c => c.pcmpgtb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpgtb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpgtb_regXMM_m() {
			TestAssembler(c => c.pcmpgtb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpgtd_regMM_regMM() {
			TestAssembler(c => c.pcmpgtd(mm2, mm3), Instruction.Create(Code.Pcmpgtd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pcmpgtd_regXMM_regXMM() {
			TestAssembler(c => c.pcmpgtd(xmm2, xmm3), Instruction.Create(Code.Pcmpgtd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpgtd_regMM_m() {
			TestAssembler(c => c.pcmpgtd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpgtd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpgtd_regXMM_m() {
			TestAssembler(c => c.pcmpgtd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpgtq_regXMM_regXMM() {
			TestAssembler(c => c.pcmpgtq(xmm2, xmm3), Instruction.Create(Code.Pcmpgtq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpgtq_regXMM_m() {
			TestAssembler(c => c.pcmpgtq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpgtw_regMM_regMM() {
			TestAssembler(c => c.pcmpgtw(mm2, mm3), Instruction.Create(Code.Pcmpgtw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pcmpgtw_regXMM_regXMM() {
			TestAssembler(c => c.pcmpgtw(xmm2, xmm3), Instruction.Create(Code.Pcmpgtw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pcmpgtw_regMM_m() {
			TestAssembler(c => c.pcmpgtw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpgtw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpgtw_regXMM_m() {
			TestAssembler(c => c.pcmpgtw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pcmpistri_regXMM_regXMM_i() {
			TestAssembler(c => c.pcmpistri(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pcmpistri_regXMM_m_i() {
			TestAssembler(c => c.pcmpistri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pcmpistri_regXMM_regXMM_u() {
			TestAssembler(c => c.pcmpistri(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pcmpistri_regXMM_m_u() {
			TestAssembler(c => c.pcmpistri(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcmpistrm_regXMM_regXMM_i() {
			TestAssembler(c => c.pcmpistrm(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pcmpistrm_regXMM_m_i() {
			TestAssembler(c => c.pcmpistrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pcmpistrm_regXMM_regXMM_u() {
			TestAssembler(c => c.pcmpistrm(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pcmpistrm_regXMM_m_u() {
			TestAssembler(c => c.pcmpistrm(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pcommit() {
			TestAssembler(c => c.pcommit(), Instruction.Create(Code.Pcommit));
		}

		[Fact]
		public void pconfig() {
			TestAssembler(c => c.pconfig(), Instruction.Create(Code.Pconfig));
		}

#if !NO_VEX
		[Fact]
		public void pdep_reg32_reg32_reg32() {
			TestAssembler(c => c.pdep(edx, ebx, esp), Instruction.Create(Code.VEX_Pdep_r32_r32_rm32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pdep_reg64_reg64_reg64() {
			TestAssembler(c => c.pdep(rdx, rbx, rsp), Instruction.Create(Code.VEX_Pdep_r64_r64_rm64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pdep_reg32_reg32_m() {
			TestAssembler(c => c.pdep(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Pdep_r32_r32_rm32, edx, ebx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pdep_reg64_reg64_m() {
			TestAssembler(c => c.pdep(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Pdep_r64_r64_rm64, rdx, rbx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pext_reg32_reg32_reg32() {
			TestAssembler(c => c.pext(edx, ebx, esp), Instruction.Create(Code.VEX_Pext_r32_r32_rm32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pext_reg64_reg64_reg64() {
			TestAssembler(c => c.pext(rdx, rbx, rsp), Instruction.Create(Code.VEX_Pext_r64_r64_rm64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pext_reg32_reg32_m() {
			TestAssembler(c => c.pext(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Pext_r32_r32_rm32, edx, ebx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void pext_reg64_reg64_m() {
			TestAssembler(c => c.pext(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Pext_r64_r64_rm64, rdx, rbx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void pextrb_reg32_regXMM_i() {
			TestAssembler(c => c.pextrb(edx, xmm3, -5), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, edx, xmm3, -5));
		}

		[Fact]
		public void pextrb_reg64_regXMM_i() {
			TestAssembler(c => c.pextrb(rdx, xmm3, -5), Instruction.Create(Code.Pextrb_r64m8_xmm_imm8, rdx, xmm3, -5));
		}

		[Fact]
		public void pextrb_m_regXMM_i() {
			TestAssembler(c => c.pextrb(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5));
		}

		[Fact]
		public void pextrb_reg32_regXMM_u() {
			TestAssembler(c => c.pextrb(edx, xmm3, (byte)127), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, edx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrb_reg64_regXMM_u() {
			TestAssembler(c => c.pextrb(rdx, xmm3, (byte)127), Instruction.Create(Code.Pextrb_r64m8_xmm_imm8, rdx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrb_m_regXMM_u() {
			TestAssembler(c => c.pextrb(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrd_reg32_regXMM_i() {
			TestAssembler(c => c.pextrd(edx, xmm3, -5), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, edx, xmm3, -5));
		}

		[Fact]
		public void pextrd_m_regXMM_i() {
			TestAssembler(c => c.pextrd(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5));
		}

		[Fact]
		public void pextrd_reg32_regXMM_u() {
			TestAssembler(c => c.pextrd(edx, xmm3, (byte)127), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, edx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrd_m_regXMM_u() {
			TestAssembler(c => c.pextrd(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrq_reg64_regXMM_i() {
			TestAssembler(c => c.pextrq(rdx, xmm3, -5), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, rdx, xmm3, -5));
		}

		[Fact]
		public void pextrq_m_regXMM_i() {
			TestAssembler(c => c.pextrq(__qword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5));
		}

		[Fact]
		public void pextrq_reg64_regXMM_u() {
			TestAssembler(c => c.pextrq(rdx, xmm3, (byte)127), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, rdx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrq_m_regXMM_u() {
			TestAssembler(c => c.pextrq(__qword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrw_reg32_regMM_i() {
			TestAssembler(c => c.pextrw(edx, mm3, -5), Instruction.Create(Code.Pextrw_r32_mm_imm8, edx, mm3, -5));
		}

		[Fact]
		public void pextrw_reg64_regMM_i() {
			TestAssembler(c => c.pextrw(rdx, mm3, -5), Instruction.Create(Code.Pextrw_r64_mm_imm8, rdx, mm3, -5));
		}

		[Fact]
		public void pextrw_reg32_regXMM_i() {
			TestAssembler(c => c.pextrw(edx, xmm3, -5), Instruction.Create(Code.Pextrw_r32_xmm_imm8, edx, xmm3, -5));
		}

		[Fact]
		public void pextrw_reg64_regXMM_i() {
			TestAssembler(c => c.pextrw(rdx, xmm3, -5), Instruction.Create(Code.Pextrw_r64_xmm_imm8, rdx, xmm3, -5));
		}

		[Fact]
		public void pextrw_m_regXMM_i() {
			TestAssembler(c => c.pextrw(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrw_r32m16_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5));
		}

		[Fact]
		public void pextrw_reg32_regMM_u() {
			TestAssembler(c => c.pextrw(edx, mm3, (byte)127), Instruction.Create(Code.Pextrw_r32_mm_imm8, edx, mm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrw_reg64_regMM_u() {
			TestAssembler(c => c.pextrw(rdx, mm3, (byte)127), Instruction.Create(Code.Pextrw_r64_mm_imm8, rdx, mm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrw_reg32_regXMM_u() {
			TestAssembler(c => c.pextrw(edx, xmm3, (byte)127), Instruction.Create(Code.Pextrw_r32_xmm_imm8, edx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrw_reg64_regXMM_u() {
			TestAssembler(c => c.pextrw(rdx, xmm3, (byte)127), Instruction.Create(Code.Pextrw_r64_xmm_imm8, rdx, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pextrw_m_regXMM_u() {
			TestAssembler(c => c.pextrw(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.Pextrw_r32m16_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127));
		}

#if !NO_D3NOW
		[Fact]
		public void pf2id_regMM_regMM() {
			TestAssembler(c => c.pf2id(mm2, mm3), Instruction.Create(Code.D3NOW_Pf2id_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pf2id_regMM_m() {
			TestAssembler(c => c.pf2id(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pf2id_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pf2iw_regMM_regMM() {
			TestAssembler(c => c.pf2iw(mm2, mm3), Instruction.Create(Code.D3NOW_Pf2iw_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pf2iw_regMM_m() {
			TestAssembler(c => c.pf2iw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pf2iw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfacc_regMM_regMM() {
			TestAssembler(c => c.pfacc(mm2, mm3), Instruction.Create(Code.D3NOW_Pfacc_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfacc_regMM_m() {
			TestAssembler(c => c.pfacc(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfacc_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfadd_regMM_regMM() {
			TestAssembler(c => c.pfadd(mm2, mm3), Instruction.Create(Code.D3NOW_Pfadd_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfadd_regMM_m() {
			TestAssembler(c => c.pfadd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfadd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfcmpeq_regMM_regMM() {
			TestAssembler(c => c.pfcmpeq(mm2, mm3), Instruction.Create(Code.D3NOW_Pfcmpeq_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfcmpeq_regMM_m() {
			TestAssembler(c => c.pfcmpeq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfcmpeq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfcmpge_regMM_regMM() {
			TestAssembler(c => c.pfcmpge(mm2, mm3), Instruction.Create(Code.D3NOW_Pfcmpge_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfcmpge_regMM_m() {
			TestAssembler(c => c.pfcmpge(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfcmpge_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfcmpgt_regMM_regMM() {
			TestAssembler(c => c.pfcmpgt(mm2, mm3), Instruction.Create(Code.D3NOW_Pfcmpgt_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfcmpgt_regMM_m() {
			TestAssembler(c => c.pfcmpgt(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfcmpgt_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfmax_regMM_regMM() {
			TestAssembler(c => c.pfmax(mm2, mm3), Instruction.Create(Code.D3NOW_Pfmax_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfmax_regMM_m() {
			TestAssembler(c => c.pfmax(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfmax_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfmin_regMM_regMM() {
			TestAssembler(c => c.pfmin(mm2, mm3), Instruction.Create(Code.D3NOW_Pfmin_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfmin_regMM_m() {
			TestAssembler(c => c.pfmin(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfmin_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfmul_regMM_regMM() {
			TestAssembler(c => c.pfmul(mm2, mm3), Instruction.Create(Code.D3NOW_Pfmul_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfmul_regMM_m() {
			TestAssembler(c => c.pfmul(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfmul_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfnacc_regMM_regMM() {
			TestAssembler(c => c.pfnacc(mm2, mm3), Instruction.Create(Code.D3NOW_Pfnacc_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfnacc_regMM_m() {
			TestAssembler(c => c.pfnacc(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfnacc_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfpnacc_regMM_regMM() {
			TestAssembler(c => c.pfpnacc(mm2, mm3), Instruction.Create(Code.D3NOW_Pfpnacc_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfpnacc_regMM_m() {
			TestAssembler(c => c.pfpnacc(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfpnacc_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrcp_regMM_regMM() {
			TestAssembler(c => c.pfrcp(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrcp_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrcp_regMM_m() {
			TestAssembler(c => c.pfrcp(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrcp_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrcpit1_regMM_regMM() {
			TestAssembler(c => c.pfrcpit1(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrcpit1_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrcpit1_regMM_m() {
			TestAssembler(c => c.pfrcpit1(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrcpit1_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrcpit2_regMM_regMM() {
			TestAssembler(c => c.pfrcpit2(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrcpit2_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrcpit2_regMM_m() {
			TestAssembler(c => c.pfrcpit2(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrcpit2_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrsqit1_regMM_regMM() {
			TestAssembler(c => c.pfrsqit1(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrsqit1_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrsqit1_regMM_m() {
			TestAssembler(c => c.pfrsqit1(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrsqit1_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrsqrt_regMM_regMM() {
			TestAssembler(c => c.pfrsqrt(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrsqrt_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfrsqrt_regMM_m() {
			TestAssembler(c => c.pfrsqrt(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrsqrt_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfsub_regMM_regMM() {
			TestAssembler(c => c.pfsub(mm2, mm3), Instruction.Create(Code.D3NOW_Pfsub_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfsub_regMM_m() {
			TestAssembler(c => c.pfsub(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfsub_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfsubr_regMM_regMM() {
			TestAssembler(c => c.pfsubr(mm2, mm3), Instruction.Create(Code.D3NOW_Pfsubr_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pfsubr_regMM_m() {
			TestAssembler(c => c.pfsubr(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfsubr_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void phaddd_regMM_regMM() {
			TestAssembler(c => c.phaddd(mm2, mm3), Instruction.Create(Code.Phaddd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void phaddd_regXMM_regXMM() {
			TestAssembler(c => c.phaddd(xmm2, xmm3), Instruction.Create(Code.Phaddd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phaddd_regMM_m() {
			TestAssembler(c => c.phaddd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phaddd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phaddd_regXMM_m() {
			TestAssembler(c => c.phaddd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phaddd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phaddsw_regMM_regMM() {
			TestAssembler(c => c.phaddsw(mm2, mm3), Instruction.Create(Code.Phaddsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void phaddsw_regXMM_regXMM() {
			TestAssembler(c => c.phaddsw(xmm2, xmm3), Instruction.Create(Code.Phaddsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phaddsw_regMM_m() {
			TestAssembler(c => c.phaddsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phaddsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phaddsw_regXMM_m() {
			TestAssembler(c => c.phaddsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phaddsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phaddw_regMM_regMM() {
			TestAssembler(c => c.phaddw(mm2, mm3), Instruction.Create(Code.Phaddw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void phaddw_regXMM_regXMM() {
			TestAssembler(c => c.phaddw(xmm2, xmm3), Instruction.Create(Code.Phaddw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phaddw_regMM_m() {
			TestAssembler(c => c.phaddw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phaddw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phaddw_regXMM_m() {
			TestAssembler(c => c.phaddw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phaddw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phminposuw_regXMM_regXMM() {
			TestAssembler(c => c.phminposuw(xmm2, xmm3), Instruction.Create(Code.Phminposuw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phminposuw_regXMM_m() {
			TestAssembler(c => c.phminposuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phminposuw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phsubd_regMM_regMM() {
			TestAssembler(c => c.phsubd(mm2, mm3), Instruction.Create(Code.Phsubd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void phsubd_regXMM_regXMM() {
			TestAssembler(c => c.phsubd(xmm2, xmm3), Instruction.Create(Code.Phsubd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phsubd_regMM_m() {
			TestAssembler(c => c.phsubd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phsubd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phsubd_regXMM_m() {
			TestAssembler(c => c.phsubd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phsubd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phsubsw_regMM_regMM() {
			TestAssembler(c => c.phsubsw(mm2, mm3), Instruction.Create(Code.Phsubsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void phsubsw_regXMM_regXMM() {
			TestAssembler(c => c.phsubsw(xmm2, xmm3), Instruction.Create(Code.Phsubsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phsubsw_regMM_m() {
			TestAssembler(c => c.phsubsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phsubsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phsubsw_regXMM_m() {
			TestAssembler(c => c.phsubsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phsubsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phsubw_regMM_regMM() {
			TestAssembler(c => c.phsubw(mm2, mm3), Instruction.Create(Code.Phsubw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void phsubw_regXMM_regXMM() {
			TestAssembler(c => c.phsubw(xmm2, xmm3), Instruction.Create(Code.Phsubw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void phsubw_regMM_m() {
			TestAssembler(c => c.phsubw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phsubw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void phsubw_regXMM_m() {
			TestAssembler(c => c.phsubw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phsubw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_D3NOW
		[Fact]
		public void pi2fd_regMM_regMM() {
			TestAssembler(c => c.pi2fd(mm2, mm3), Instruction.Create(Code.D3NOW_Pi2fd_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pi2fd_regMM_m() {
			TestAssembler(c => c.pi2fd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pi2fd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pi2fw_regMM_regMM() {
			TestAssembler(c => c.pi2fw(mm2, mm3), Instruction.Create(Code.D3NOW_Pi2fw_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pi2fw_regMM_m() {
			TestAssembler(c => c.pi2fw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pi2fw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void pinsrb_regXMM_reg32_i() {
			TestAssembler(c => c.pinsrb(xmm2, ebx, -5), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, xmm2, ebx, -5));
		}

		[Fact]
		public void pinsrb_regXMM_reg64_i() {
			TestAssembler(c => c.pinsrb(xmm2, rbx, -5), Instruction.Create(Code.Pinsrb_xmm_r64m8_imm8, xmm2, rbx, -5));
		}

		[Fact]
		public void pinsrb_regXMM_m_i() {
			TestAssembler(c => c.pinsrb(xmm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pinsrb_regXMM_reg32_u() {
			TestAssembler(c => c.pinsrb(xmm2, ebx, (byte)127), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, xmm2, ebx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrb_regXMM_reg64_u() {
			TestAssembler(c => c.pinsrb(xmm2, rbx, (byte)127), Instruction.Create(Code.Pinsrb_xmm_r64m8_imm8, xmm2, rbx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrb_regXMM_m_u() {
			TestAssembler(c => c.pinsrb(xmm2, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pinsrd_regXMM_reg32_i() {
			TestAssembler(c => c.pinsrd(xmm2, ebx, -5), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, xmm2, ebx, -5));
		}

		[Fact]
		public void pinsrd_regXMM_m_i() {
			TestAssembler(c => c.pinsrd(xmm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pinsrd_regXMM_reg32_u() {
			TestAssembler(c => c.pinsrd(xmm2, ebx, (byte)127), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, xmm2, ebx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrd_regXMM_m_u() {
			TestAssembler(c => c.pinsrd(xmm2, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pinsrq_regXMM_reg64_i() {
			TestAssembler(c => c.pinsrq(xmm2, rbx, -5), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, xmm2, rbx, -5));
		}

		[Fact]
		public void pinsrq_regXMM_m_i() {
			TestAssembler(c => c.pinsrq(xmm2, __qword_ptr[rcx], -5), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, xmm2, __qword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pinsrq_regXMM_reg64_u() {
			TestAssembler(c => c.pinsrq(xmm2, rbx, (byte)127), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, xmm2, rbx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrq_regXMM_m_u() {
			TestAssembler(c => c.pinsrq(xmm2, __qword_ptr[rcx], (byte)127), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, xmm2, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pinsrw_regMM_reg32_i() {
			TestAssembler(c => c.pinsrw(mm2, ebx, -5), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, mm2, ebx, -5));
		}

		[Fact]
		public void pinsrw_regXMM_reg32_i() {
			TestAssembler(c => c.pinsrw(xmm2, ebx, -5), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, xmm2, ebx, -5));
		}

		[Fact]
		public void pinsrw_regMM_reg64_i() {
			TestAssembler(c => c.pinsrw(mm2, rbx, -5), Instruction.Create(Code.Pinsrw_mm_r64m16_imm8, mm2, rbx, -5));
		}

		[Fact]
		public void pinsrw_regXMM_reg64_i() {
			TestAssembler(c => c.pinsrw(xmm2, rbx, -5), Instruction.Create(Code.Pinsrw_xmm_r64m16_imm8, xmm2, rbx, -5));
		}

		[Fact]
		public void pinsrw_regMM_m_i() {
			TestAssembler(c => c.pinsrw(mm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, mm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pinsrw_regXMM_m_i() {
			TestAssembler(c => c.pinsrw(xmm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pinsrw_regMM_reg32_u() {
			TestAssembler(c => c.pinsrw(mm2, ebx, (byte)127), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, mm2, ebx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrw_regXMM_reg32_u() {
			TestAssembler(c => c.pinsrw(xmm2, ebx, (byte)127), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, xmm2, ebx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrw_regMM_reg64_u() {
			TestAssembler(c => c.pinsrw(mm2, rbx, (byte)127), Instruction.Create(Code.Pinsrw_mm_r64m16_imm8, mm2, rbx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrw_regXMM_reg64_u() {
			TestAssembler(c => c.pinsrw(xmm2, rbx, (byte)127), Instruction.Create(Code.Pinsrw_xmm_r64m16_imm8, xmm2, rbx, (uint)(byte)127));
		}

		[Fact]
		public void pinsrw_regMM_m_u() {
			TestAssembler(c => c.pinsrw(mm2, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, mm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pinsrw_regXMM_m_u() {
			TestAssembler(c => c.pinsrw(xmm2, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pmaddubsw_regMM_regMM() {
			TestAssembler(c => c.pmaddubsw(mm2, mm3), Instruction.Create(Code.Pmaddubsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmaddubsw_regXMM_regXMM() {
			TestAssembler(c => c.pmaddubsw(xmm2, xmm3), Instruction.Create(Code.Pmaddubsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaddubsw_regMM_m() {
			TestAssembler(c => c.pmaddubsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaddubsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaddubsw_regXMM_m() {
			TestAssembler(c => c.pmaddubsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaddubsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaddwd_regMM_regMM() {
			TestAssembler(c => c.pmaddwd(mm2, mm3), Instruction.Create(Code.Pmaddwd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmaddwd_regXMM_regXMM() {
			TestAssembler(c => c.pmaddwd(xmm2, xmm3), Instruction.Create(Code.Pmaddwd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaddwd_regMM_m() {
			TestAssembler(c => c.pmaddwd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaddwd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaddwd_regXMM_m() {
			TestAssembler(c => c.pmaddwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaddwd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxsb_regXMM_regXMM() {
			TestAssembler(c => c.pmaxsb(xmm2, xmm3), Instruction.Create(Code.Pmaxsb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaxsb_regXMM_m() {
			TestAssembler(c => c.pmaxsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxsb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxsd_regXMM_regXMM() {
			TestAssembler(c => c.pmaxsd(xmm2, xmm3), Instruction.Create(Code.Pmaxsd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaxsd_regXMM_m() {
			TestAssembler(c => c.pmaxsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxsd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxsw_regMM_regMM() {
			TestAssembler(c => c.pmaxsw(mm2, mm3), Instruction.Create(Code.Pmaxsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmaxsw_regXMM_regXMM() {
			TestAssembler(c => c.pmaxsw(xmm2, xmm3), Instruction.Create(Code.Pmaxsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaxsw_regMM_m() {
			TestAssembler(c => c.pmaxsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaxsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxsw_regXMM_m() {
			TestAssembler(c => c.pmaxsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxub_regMM_regMM() {
			TestAssembler(c => c.pmaxub(mm2, mm3), Instruction.Create(Code.Pmaxub_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmaxub_regXMM_regXMM() {
			TestAssembler(c => c.pmaxub(xmm2, xmm3), Instruction.Create(Code.Pmaxub_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaxub_regMM_m() {
			TestAssembler(c => c.pmaxub(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaxub_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxub_regXMM_m() {
			TestAssembler(c => c.pmaxub(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxub_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxud_regXMM_regXMM() {
			TestAssembler(c => c.pmaxud(xmm2, xmm3), Instruction.Create(Code.Pmaxud_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaxud_regXMM_m() {
			TestAssembler(c => c.pmaxud(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxud_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmaxuw_regXMM_regXMM() {
			TestAssembler(c => c.pmaxuw(xmm2, xmm3), Instruction.Create(Code.Pmaxuw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmaxuw_regXMM_m() {
			TestAssembler(c => c.pmaxuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxuw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminsb_regXMM_regXMM() {
			TestAssembler(c => c.pminsb(xmm2, xmm3), Instruction.Create(Code.Pminsb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pminsb_regXMM_m() {
			TestAssembler(c => c.pminsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminsb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminsd_regXMM_regXMM() {
			TestAssembler(c => c.pminsd(xmm2, xmm3), Instruction.Create(Code.Pminsd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pminsd_regXMM_m() {
			TestAssembler(c => c.pminsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminsd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminsw_regMM_regMM() {
			TestAssembler(c => c.pminsw(mm2, mm3), Instruction.Create(Code.Pminsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pminsw_regXMM_regXMM() {
			TestAssembler(c => c.pminsw(xmm2, xmm3), Instruction.Create(Code.Pminsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pminsw_regMM_m() {
			TestAssembler(c => c.pminsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pminsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminsw_regXMM_m() {
			TestAssembler(c => c.pminsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminub_regMM_regMM() {
			TestAssembler(c => c.pminub(mm2, mm3), Instruction.Create(Code.Pminub_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pminub_regXMM_regXMM() {
			TestAssembler(c => c.pminub(xmm2, xmm3), Instruction.Create(Code.Pminub_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pminub_regMM_m() {
			TestAssembler(c => c.pminub(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pminub_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminub_regXMM_m() {
			TestAssembler(c => c.pminub(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminub_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminud_regXMM_regXMM() {
			TestAssembler(c => c.pminud(xmm2, xmm3), Instruction.Create(Code.Pminud_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pminud_regXMM_m() {
			TestAssembler(c => c.pminud(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminud_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pminuw_regXMM_regXMM() {
			TestAssembler(c => c.pminuw(xmm2, xmm3), Instruction.Create(Code.Pminuw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pminuw_regXMM_m() {
			TestAssembler(c => c.pminuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminuw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovmskb_reg32_regMM() {
			TestAssembler(c => c.pmovmskb(edx, mm3), Instruction.Create(Code.Pmovmskb_r32_mm, edx, mm3));
		}

		[Fact]
		public void pmovmskb_reg64_regMM() {
			TestAssembler(c => c.pmovmskb(rdx, mm3), Instruction.Create(Code.Pmovmskb_r64_mm, rdx, mm3));
		}

		[Fact]
		public void pmovmskb_reg32_regXMM() {
			TestAssembler(c => c.pmovmskb(edx, xmm3), Instruction.Create(Code.Pmovmskb_r32_xmm, edx, xmm3));
		}

		[Fact]
		public void pmovmskb_reg64_regXMM() {
			TestAssembler(c => c.pmovmskb(rdx, xmm3), Instruction.Create(Code.Pmovmskb_r64_xmm, rdx, xmm3));
		}

		[Fact]
		public void pmovsxbd_regXMM_regXMM() {
			TestAssembler(c => c.pmovsxbd(xmm2, xmm3), Instruction.Create(Code.Pmovsxbd_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void pmovsxbd_regXMM_m() {
			TestAssembler(c => c.pmovsxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxbd_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovsxbq_regXMM_regXMM() {
			TestAssembler(c => c.pmovsxbq(xmm2, xmm3), Instruction.Create(Code.Pmovsxbq_xmm_xmmm16, xmm2, xmm3));
		}

		[Fact]
		public void pmovsxbq_regXMM_m() {
			TestAssembler(c => c.pmovsxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxbq_xmm_xmmm16, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovsxbw_regXMM_regXMM() {
			TestAssembler(c => c.pmovsxbw(xmm2, xmm3), Instruction.Create(Code.Pmovsxbw_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void pmovsxbw_regXMM_m() {
			TestAssembler(c => c.pmovsxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxbw_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovsxdq_regXMM_regXMM() {
			TestAssembler(c => c.pmovsxdq(xmm2, xmm3), Instruction.Create(Code.Pmovsxdq_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void pmovsxdq_regXMM_m() {
			TestAssembler(c => c.pmovsxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxdq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovsxwd_regXMM_regXMM() {
			TestAssembler(c => c.pmovsxwd(xmm2, xmm3), Instruction.Create(Code.Pmovsxwd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void pmovsxwd_regXMM_m() {
			TestAssembler(c => c.pmovsxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxwd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovsxwq_regXMM_regXMM() {
			TestAssembler(c => c.pmovsxwq(xmm2, xmm3), Instruction.Create(Code.Pmovsxwq_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void pmovsxwq_regXMM_m() {
			TestAssembler(c => c.pmovsxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxwq_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovzxbd_regXMM_regXMM() {
			TestAssembler(c => c.pmovzxbd(xmm2, xmm3), Instruction.Create(Code.Pmovzxbd_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void pmovzxbd_regXMM_m() {
			TestAssembler(c => c.pmovzxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxbd_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovzxbq_regXMM_regXMM() {
			TestAssembler(c => c.pmovzxbq(xmm2, xmm3), Instruction.Create(Code.Pmovzxbq_xmm_xmmm16, xmm2, xmm3));
		}

		[Fact]
		public void pmovzxbq_regXMM_m() {
			TestAssembler(c => c.pmovzxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxbq_xmm_xmmm16, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovzxbw_regXMM_regXMM() {
			TestAssembler(c => c.pmovzxbw(xmm2, xmm3), Instruction.Create(Code.Pmovzxbw_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void pmovzxbw_regXMM_m() {
			TestAssembler(c => c.pmovzxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxbw_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovzxdq_regXMM_regXMM() {
			TestAssembler(c => c.pmovzxdq(xmm2, xmm3), Instruction.Create(Code.Pmovzxdq_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void pmovzxdq_regXMM_m() {
			TestAssembler(c => c.pmovzxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxdq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovzxwd_regXMM_regXMM() {
			TestAssembler(c => c.pmovzxwd(xmm2, xmm3), Instruction.Create(Code.Pmovzxwd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void pmovzxwd_regXMM_m() {
			TestAssembler(c => c.pmovzxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxwd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmovzxwq_regXMM_regXMM() {
			TestAssembler(c => c.pmovzxwq(xmm2, xmm3), Instruction.Create(Code.Pmovzxwq_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void pmovzxwq_regXMM_m() {
			TestAssembler(c => c.pmovzxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxwq_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmuldq_regXMM_regXMM() {
			TestAssembler(c => c.pmuldq(xmm2, xmm3), Instruction.Create(Code.Pmuldq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmuldq_regXMM_m() {
			TestAssembler(c => c.pmuldq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmuldq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmulhrsw_regMM_regMM() {
			TestAssembler(c => c.pmulhrsw(mm2, mm3), Instruction.Create(Code.Pmulhrsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmulhrsw_regXMM_regXMM() {
			TestAssembler(c => c.pmulhrsw(xmm2, xmm3), Instruction.Create(Code.Pmulhrsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmulhrsw_regMM_m() {
			TestAssembler(c => c.pmulhrsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmulhrsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmulhrsw_regXMM_m() {
			TestAssembler(c => c.pmulhrsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulhrsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_D3NOW
		[Fact]
		public void pmulhrw_regMM_regMM() {
			TestAssembler(c => c.pmulhrw(mm2, mm3), Instruction.Create(Code.D3NOW_Pmulhrw_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pmulhrw_regMM_m() {
			TestAssembler(c => c.pmulhrw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pmulhrw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void pmulhuw_regMM_regMM() {
			TestAssembler(c => c.pmulhuw(mm2, mm3), Instruction.Create(Code.Pmulhuw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmulhuw_regXMM_regXMM() {
			TestAssembler(c => c.pmulhuw(xmm2, xmm3), Instruction.Create(Code.Pmulhuw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmulhuw_regMM_m() {
			TestAssembler(c => c.pmulhuw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmulhuw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmulhuw_regXMM_m() {
			TestAssembler(c => c.pmulhuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulhuw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmulhw_regMM_regMM() {
			TestAssembler(c => c.pmulhw(mm2, mm3), Instruction.Create(Code.Pmulhw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmulhw_regXMM_regXMM() {
			TestAssembler(c => c.pmulhw(xmm2, xmm3), Instruction.Create(Code.Pmulhw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmulhw_regMM_m() {
			TestAssembler(c => c.pmulhw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmulhw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmulhw_regXMM_m() {
			TestAssembler(c => c.pmulhw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulhw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmulld_regXMM_regXMM() {
			TestAssembler(c => c.pmulld(xmm2, xmm3), Instruction.Create(Code.Pmulld_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmulld_regXMM_m() {
			TestAssembler(c => c.pmulld(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulld_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmullw_regMM_regMM() {
			TestAssembler(c => c.pmullw(mm2, mm3), Instruction.Create(Code.Pmullw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmullw_regXMM_regXMM() {
			TestAssembler(c => c.pmullw(xmm2, xmm3), Instruction.Create(Code.Pmullw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmullw_regMM_m() {
			TestAssembler(c => c.pmullw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmullw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmullw_regXMM_m() {
			TestAssembler(c => c.pmullw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmullw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmuludq_regMM_regMM() {
			TestAssembler(c => c.pmuludq(mm2, mm3), Instruction.Create(Code.Pmuludq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pmuludq_regXMM_regXMM() {
			TestAssembler(c => c.pmuludq(xmm2, xmm3), Instruction.Create(Code.Pmuludq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pmuludq_regMM_m() {
			TestAssembler(c => c.pmuludq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmuludq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pmuludq_regXMM_m() {
			TestAssembler(c => c.pmuludq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmuludq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pop_reg16() {
			TestAssembler(c => c.pop(dx), Instruction.Create(Code.Pop_r16, dx));
		}

		[Fact]
		public void pop_reg64() {
			TestAssembler(c => c.pop(rdx), Instruction.Create(Code.Pop_r64, rdx));
		}

		[Fact]
		public void pop_regSegment() {
			{ /* if (dst == Register.FS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.pop(fs), Instruction.Create(Code.Popq_FS, fs));
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.GS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.pop(gs), Instruction.Create(Code.Popq_GS, gs));
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.ES) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Popd_ES - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.SS) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Popd_SS - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.DS) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Popd_DS - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			}
			{
				// See manual test for this case pop
			}
		}

		[Fact]
		public void pop_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.pop(__qword_ptr[rdx]), Instruction.Create(Code.Pop_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{
					// Skipping Pop_rm32 - Not supported for Bit64
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.pop(__word_ptr[rdx]), Instruction.Create(Code.Pop_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.pop(__zmmword_ptr[rdx]), Instruction.Create(Code.Pop_rm16, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void popcnt_reg16_reg16() {
			TestAssembler(c => c.popcnt(dx, bx), Instruction.Create(Code.Popcnt_r16_rm16, dx, bx));
		}

		[Fact]
		public void popcnt_reg32_reg32() {
			TestAssembler(c => c.popcnt(edx, ebx), Instruction.Create(Code.Popcnt_r32_rm32, edx, ebx));
		}

		[Fact]
		public void popcnt_reg64_reg64() {
			TestAssembler(c => c.popcnt(rdx, rbx), Instruction.Create(Code.Popcnt_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void popcnt_reg16_m() {
			TestAssembler(c => c.popcnt(dx, __word_ptr[rcx]), Instruction.Create(Code.Popcnt_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void popcnt_reg32_m() {
			TestAssembler(c => c.popcnt(edx, __dword_ptr[rcx]), Instruction.Create(Code.Popcnt_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void popcnt_reg64_m() {
			TestAssembler(c => c.popcnt(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Popcnt_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void popf() {
			TestAssembler(c => c.popf(), Instruction.Create(Code.Popfw));
		}

		[Fact]
		public void popfq() {
			TestAssembler(c => c.popfq(), Instruction.Create(Code.Popfq));
		}

		[Fact]
		public void por_regMM_regMM() {
			TestAssembler(c => c.por(mm2, mm3), Instruction.Create(Code.Por_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void por_regXMM_regXMM() {
			TestAssembler(c => c.por(xmm2, xmm3), Instruction.Create(Code.Por_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void por_regMM_m() {
			TestAssembler(c => c.por(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Por_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void por_regXMM_m() {
			TestAssembler(c => c.por(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Por_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetch_m() {
			TestAssembler(c => c.prefetch(__[rcx]), Instruction.Create(Code.Prefetch_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetchnta_m() {
			TestAssembler(c => c.prefetchnta(__[rcx]), Instruction.Create(Code.Prefetchnta_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetcht0_m() {
			TestAssembler(c => c.prefetcht0(__[rcx]), Instruction.Create(Code.Prefetcht0_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetcht1_m() {
			TestAssembler(c => c.prefetcht1(__[rcx]), Instruction.Create(Code.Prefetcht1_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetcht2_m() {
			TestAssembler(c => c.prefetcht2(__[rcx]), Instruction.Create(Code.Prefetcht2_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetchw_m() {
			TestAssembler(c => c.prefetchw(__[rcx]), Instruction.Create(Code.Prefetchw_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void prefetchwt1_m() {
			TestAssembler(c => c.prefetchwt1(__[rcx]), Instruction.Create(Code.Prefetchwt1_m8, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psadbw_regMM_regMM() {
			TestAssembler(c => c.psadbw(mm2, mm3), Instruction.Create(Code.Psadbw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psadbw_regXMM_regXMM() {
			TestAssembler(c => c.psadbw(xmm2, xmm3), Instruction.Create(Code.Psadbw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psadbw_regMM_m() {
			TestAssembler(c => c.psadbw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psadbw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psadbw_regXMM_m() {
			TestAssembler(c => c.psadbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psadbw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pshufb_regMM_regMM() {
			TestAssembler(c => c.pshufb(mm2, mm3), Instruction.Create(Code.Pshufb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pshufb_regXMM_regXMM() {
			TestAssembler(c => c.pshufb(xmm2, xmm3), Instruction.Create(Code.Pshufb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pshufb_regMM_m() {
			TestAssembler(c => c.pshufb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pshufb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pshufb_regXMM_m() {
			TestAssembler(c => c.pshufb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pshufb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pshufd_regXMM_regXMM_i() {
			TestAssembler(c => c.pshufd(xmm2, xmm3, -5), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pshufd_regXMM_m_i() {
			TestAssembler(c => c.pshufd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pshufd_regXMM_regXMM_u() {
			TestAssembler(c => c.pshufd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pshufd_regXMM_m_u() {
			TestAssembler(c => c.pshufd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pshufhw_regXMM_regXMM_i() {
			TestAssembler(c => c.pshufhw(xmm2, xmm3, -5), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pshufhw_regXMM_m_i() {
			TestAssembler(c => c.pshufhw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pshufhw_regXMM_regXMM_u() {
			TestAssembler(c => c.pshufhw(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pshufhw_regXMM_m_u() {
			TestAssembler(c => c.pshufhw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pshuflw_regXMM_regXMM_i() {
			TestAssembler(c => c.pshuflw(xmm2, xmm3, -5), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void pshuflw_regXMM_m_i() {
			TestAssembler(c => c.pshuflw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pshuflw_regXMM_regXMM_u() {
			TestAssembler(c => c.pshuflw(xmm2, xmm3, (byte)127), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void pshuflw_regXMM_m_u() {
			TestAssembler(c => c.pshuflw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void pshufw_regMM_regMM_i() {
			TestAssembler(c => c.pshufw(mm2, mm3, -5), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, mm2, mm3, -5));
		}

		[Fact]
		public void pshufw_regMM_m_i() {
			TestAssembler(c => c.pshufw(mm2, __qword_ptr[rcx], -5), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void pshufw_regMM_regMM_u() {
			TestAssembler(c => c.pshufw(mm2, mm3, (byte)127), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, mm2, mm3, (uint)(byte)127));
		}

		[Fact]
		public void pshufw_regMM_m_u() {
			TestAssembler(c => c.pshufw(mm2, __qword_ptr[rcx], (byte)127), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void psignb_regMM_regMM() {
			TestAssembler(c => c.psignb(mm2, mm3), Instruction.Create(Code.Psignb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psignb_regXMM_regXMM() {
			TestAssembler(c => c.psignb(xmm2, xmm3), Instruction.Create(Code.Psignb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psignb_regMM_m() {
			TestAssembler(c => c.psignb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psignb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psignb_regXMM_m() {
			TestAssembler(c => c.psignb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psignb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psignd_regMM_regMM() {
			TestAssembler(c => c.psignd(mm2, mm3), Instruction.Create(Code.Psignd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psignd_regXMM_regXMM() {
			TestAssembler(c => c.psignd(xmm2, xmm3), Instruction.Create(Code.Psignd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psignd_regMM_m() {
			TestAssembler(c => c.psignd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psignd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psignd_regXMM_m() {
			TestAssembler(c => c.psignd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psignd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psignw_regMM_regMM() {
			TestAssembler(c => c.psignw(mm2, mm3), Instruction.Create(Code.Psignw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psignw_regXMM_regXMM() {
			TestAssembler(c => c.psignw(xmm2, xmm3), Instruction.Create(Code.Psignw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psignw_regMM_m() {
			TestAssembler(c => c.psignw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psignw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psignw_regXMM_m() {
			TestAssembler(c => c.psignw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psignw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pslld_regMM_regMM() {
			TestAssembler(c => c.pslld(mm2, mm3), Instruction.Create(Code.Pslld_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pslld_regXMM_regXMM() {
			TestAssembler(c => c.pslld(xmm2, xmm3), Instruction.Create(Code.Pslld_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pslld_regMM_m() {
			TestAssembler(c => c.pslld(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pslld_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pslld_regXMM_m() {
			TestAssembler(c => c.pslld(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pslld_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pslld_regMM_i() {
			TestAssembler(c => c.pslld(mm2, -5), Instruction.Create(Code.Pslld_mm_imm8, mm2, -5));
		}

		[Fact]
		public void pslld_regXMM_i() {
			TestAssembler(c => c.pslld(xmm2, -5), Instruction.Create(Code.Pslld_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void pslld_regMM_u() {
			TestAssembler(c => c.pslld(mm2, (byte)127), Instruction.Create(Code.Pslld_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void pslld_regXMM_u() {
			TestAssembler(c => c.pslld(xmm2, (byte)127), Instruction.Create(Code.Pslld_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void pslldq_regXMM_i() {
			TestAssembler(c => c.pslldq(xmm2, -5), Instruction.Create(Code.Pslldq_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void pslldq_regXMM_u() {
			TestAssembler(c => c.pslldq(xmm2, (byte)127), Instruction.Create(Code.Pslldq_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psllq_regMM_regMM() {
			TestAssembler(c => c.psllq(mm2, mm3), Instruction.Create(Code.Psllq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psllq_regXMM_regXMM() {
			TestAssembler(c => c.psllq(xmm2, xmm3), Instruction.Create(Code.Psllq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psllq_regMM_m() {
			TestAssembler(c => c.psllq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psllq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psllq_regXMM_m() {
			TestAssembler(c => c.psllq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psllq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psllq_regMM_i() {
			TestAssembler(c => c.psllq(mm2, -5), Instruction.Create(Code.Psllq_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psllq_regXMM_i() {
			TestAssembler(c => c.psllq(xmm2, -5), Instruction.Create(Code.Psllq_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psllq_regMM_u() {
			TestAssembler(c => c.psllq(mm2, (byte)127), Instruction.Create(Code.Psllq_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psllq_regXMM_u() {
			TestAssembler(c => c.psllq(xmm2, (byte)127), Instruction.Create(Code.Psllq_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psllw_regMM_regMM() {
			TestAssembler(c => c.psllw(mm2, mm3), Instruction.Create(Code.Psllw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psllw_regXMM_regXMM() {
			TestAssembler(c => c.psllw(xmm2, xmm3), Instruction.Create(Code.Psllw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psllw_regMM_m() {
			TestAssembler(c => c.psllw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psllw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psllw_regXMM_m() {
			TestAssembler(c => c.psllw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psllw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psllw_regMM_i() {
			TestAssembler(c => c.psllw(mm2, -5), Instruction.Create(Code.Psllw_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psllw_regXMM_i() {
			TestAssembler(c => c.psllw(xmm2, -5), Instruction.Create(Code.Psllw_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psllw_regMM_u() {
			TestAssembler(c => c.psllw(mm2, (byte)127), Instruction.Create(Code.Psllw_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psllw_regXMM_u() {
			TestAssembler(c => c.psllw(xmm2, (byte)127), Instruction.Create(Code.Psllw_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psmash() {
			TestAssembler(c => c.psmash(), Instruction.Create(Code.Psmash));
		}

		[Fact]
		public void psrad_regMM_regMM() {
			TestAssembler(c => c.psrad(mm2, mm3), Instruction.Create(Code.Psrad_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psrad_regXMM_regXMM() {
			TestAssembler(c => c.psrad(xmm2, xmm3), Instruction.Create(Code.Psrad_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psrad_regMM_m() {
			TestAssembler(c => c.psrad(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrad_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrad_regXMM_m() {
			TestAssembler(c => c.psrad(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrad_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrad_regMM_i() {
			TestAssembler(c => c.psrad(mm2, -5), Instruction.Create(Code.Psrad_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psrad_regXMM_i() {
			TestAssembler(c => c.psrad(xmm2, -5), Instruction.Create(Code.Psrad_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psrad_regMM_u() {
			TestAssembler(c => c.psrad(mm2, (byte)127), Instruction.Create(Code.Psrad_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psrad_regXMM_u() {
			TestAssembler(c => c.psrad(xmm2, (byte)127), Instruction.Create(Code.Psrad_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psraw_regMM_regMM() {
			TestAssembler(c => c.psraw(mm2, mm3), Instruction.Create(Code.Psraw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psraw_regXMM_regXMM() {
			TestAssembler(c => c.psraw(xmm2, xmm3), Instruction.Create(Code.Psraw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psraw_regMM_m() {
			TestAssembler(c => c.psraw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psraw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psraw_regXMM_m() {
			TestAssembler(c => c.psraw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psraw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psraw_regMM_i() {
			TestAssembler(c => c.psraw(mm2, -5), Instruction.Create(Code.Psraw_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psraw_regXMM_i() {
			TestAssembler(c => c.psraw(xmm2, -5), Instruction.Create(Code.Psraw_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psraw_regMM_u() {
			TestAssembler(c => c.psraw(mm2, (byte)127), Instruction.Create(Code.Psraw_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psraw_regXMM_u() {
			TestAssembler(c => c.psraw(xmm2, (byte)127), Instruction.Create(Code.Psraw_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psrld_regMM_regMM() {
			TestAssembler(c => c.psrld(mm2, mm3), Instruction.Create(Code.Psrld_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psrld_regXMM_regXMM() {
			TestAssembler(c => c.psrld(xmm2, xmm3), Instruction.Create(Code.Psrld_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psrld_regMM_m() {
			TestAssembler(c => c.psrld(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrld_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrld_regXMM_m() {
			TestAssembler(c => c.psrld(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrld_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrld_regMM_i() {
			TestAssembler(c => c.psrld(mm2, -5), Instruction.Create(Code.Psrld_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psrld_regXMM_i() {
			TestAssembler(c => c.psrld(xmm2, -5), Instruction.Create(Code.Psrld_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psrld_regMM_u() {
			TestAssembler(c => c.psrld(mm2, (byte)127), Instruction.Create(Code.Psrld_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psrld_regXMM_u() {
			TestAssembler(c => c.psrld(xmm2, (byte)127), Instruction.Create(Code.Psrld_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psrldq_regXMM_i() {
			TestAssembler(c => c.psrldq(xmm2, -5), Instruction.Create(Code.Psrldq_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psrldq_regXMM_u() {
			TestAssembler(c => c.psrldq(xmm2, (byte)127), Instruction.Create(Code.Psrldq_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psrlq_regMM_regMM() {
			TestAssembler(c => c.psrlq(mm2, mm3), Instruction.Create(Code.Psrlq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psrlq_regXMM_regXMM() {
			TestAssembler(c => c.psrlq(xmm2, xmm3), Instruction.Create(Code.Psrlq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psrlq_regMM_m() {
			TestAssembler(c => c.psrlq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrlq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrlq_regXMM_m() {
			TestAssembler(c => c.psrlq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrlq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrlq_regMM_i() {
			TestAssembler(c => c.psrlq(mm2, -5), Instruction.Create(Code.Psrlq_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psrlq_regXMM_i() {
			TestAssembler(c => c.psrlq(xmm2, -5), Instruction.Create(Code.Psrlq_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psrlq_regMM_u() {
			TestAssembler(c => c.psrlq(mm2, (byte)127), Instruction.Create(Code.Psrlq_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psrlq_regXMM_u() {
			TestAssembler(c => c.psrlq(xmm2, (byte)127), Instruction.Create(Code.Psrlq_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psrlw_regMM_regMM() {
			TestAssembler(c => c.psrlw(mm2, mm3), Instruction.Create(Code.Psrlw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psrlw_regXMM_regXMM() {
			TestAssembler(c => c.psrlw(xmm2, xmm3), Instruction.Create(Code.Psrlw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psrlw_regMM_m() {
			TestAssembler(c => c.psrlw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrlw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrlw_regXMM_m() {
			TestAssembler(c => c.psrlw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrlw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psrlw_regMM_i() {
			TestAssembler(c => c.psrlw(mm2, -5), Instruction.Create(Code.Psrlw_mm_imm8, mm2, -5));
		}

		[Fact]
		public void psrlw_regXMM_i() {
			TestAssembler(c => c.psrlw(xmm2, -5), Instruction.Create(Code.Psrlw_xmm_imm8, xmm2, -5));
		}

		[Fact]
		public void psrlw_regMM_u() {
			TestAssembler(c => c.psrlw(mm2, (byte)127), Instruction.Create(Code.Psrlw_mm_imm8, mm2, (uint)(byte)127));
		}

		[Fact]
		public void psrlw_regXMM_u() {
			TestAssembler(c => c.psrlw(xmm2, (byte)127), Instruction.Create(Code.Psrlw_xmm_imm8, xmm2, (uint)(byte)127));
		}

		[Fact]
		public void psubb_regMM_regMM() {
			TestAssembler(c => c.psubb(mm2, mm3), Instruction.Create(Code.Psubb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubb_regXMM_regXMM() {
			TestAssembler(c => c.psubb(xmm2, xmm3), Instruction.Create(Code.Psubb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubb_regMM_m() {
			TestAssembler(c => c.psubb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubb_regXMM_m() {
			TestAssembler(c => c.psubb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubd_regMM_regMM() {
			TestAssembler(c => c.psubd(mm2, mm3), Instruction.Create(Code.Psubd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubd_regXMM_regXMM() {
			TestAssembler(c => c.psubd(xmm2, xmm3), Instruction.Create(Code.Psubd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubd_regMM_m() {
			TestAssembler(c => c.psubd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubd_regXMM_m() {
			TestAssembler(c => c.psubd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubq_regMM_regMM() {
			TestAssembler(c => c.psubq(mm2, mm3), Instruction.Create(Code.Psubq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubq_regXMM_regXMM() {
			TestAssembler(c => c.psubq(xmm2, xmm3), Instruction.Create(Code.Psubq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubq_regMM_m() {
			TestAssembler(c => c.psubq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubq_regXMM_m() {
			TestAssembler(c => c.psubq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubsb_regMM_regMM() {
			TestAssembler(c => c.psubsb(mm2, mm3), Instruction.Create(Code.Psubsb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubsb_regXMM_regXMM() {
			TestAssembler(c => c.psubsb(xmm2, xmm3), Instruction.Create(Code.Psubsb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubsb_regMM_m() {
			TestAssembler(c => c.psubsb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubsb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubsb_regXMM_m() {
			TestAssembler(c => c.psubsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubsb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubsw_regMM_regMM() {
			TestAssembler(c => c.psubsw(mm2, mm3), Instruction.Create(Code.Psubsw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubsw_regXMM_regXMM() {
			TestAssembler(c => c.psubsw(xmm2, xmm3), Instruction.Create(Code.Psubsw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubsw_regMM_m() {
			TestAssembler(c => c.psubsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubsw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubsw_regXMM_m() {
			TestAssembler(c => c.psubsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubusb_regMM_regMM() {
			TestAssembler(c => c.psubusb(mm2, mm3), Instruction.Create(Code.Psubusb_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubusb_regXMM_regXMM() {
			TestAssembler(c => c.psubusb(xmm2, xmm3), Instruction.Create(Code.Psubusb_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubusb_regMM_m() {
			TestAssembler(c => c.psubusb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubusb_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubusb_regXMM_m() {
			TestAssembler(c => c.psubusb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubusb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubusw_regMM_regMM() {
			TestAssembler(c => c.psubusw(mm2, mm3), Instruction.Create(Code.Psubusw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubusw_regXMM_regXMM() {
			TestAssembler(c => c.psubusw(xmm2, xmm3), Instruction.Create(Code.Psubusw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubusw_regMM_m() {
			TestAssembler(c => c.psubusw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubusw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubusw_regXMM_m() {
			TestAssembler(c => c.psubusw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubusw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubw_regMM_regMM() {
			TestAssembler(c => c.psubw(mm2, mm3), Instruction.Create(Code.Psubw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void psubw_regXMM_regXMM() {
			TestAssembler(c => c.psubw(xmm2, xmm3), Instruction.Create(Code.Psubw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void psubw_regMM_m() {
			TestAssembler(c => c.psubw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void psubw_regXMM_m() {
			TestAssembler(c => c.psubw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_D3NOW
		[Fact]
		public void pswapd_regMM_regMM() {
			TestAssembler(c => c.pswapd(mm2, mm3), Instruction.Create(Code.D3NOW_Pswapd_mm_mmm64, mm2, mm3));
		}
#endif

#if !NO_D3NOW
		[Fact]
		public void pswapd_regMM_m() {
			TestAssembler(c => c.pswapd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pswapd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void ptest_regXMM_regXMM() {
			TestAssembler(c => c.ptest(xmm2, xmm3), Instruction.Create(Code.Ptest_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void ptest_regXMM_m() {
			TestAssembler(c => c.ptest(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Ptest_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ptwrite_reg32() {
			TestAssembler(c => c.ptwrite(edx), Instruction.Create(Code.Ptwrite_rm32, edx));
		}

		[Fact]
		public void ptwrite_reg64() {
			TestAssembler(c => c.ptwrite(rdx), Instruction.Create(Code.Ptwrite_rm64, rdx));
		}

		[Fact]
		public void ptwrite_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.ptwrite(__qword_ptr[rdx]), Instruction.Create(Code.Ptwrite_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.ptwrite(__dword_ptr[rdx]), Instruction.Create(Code.Ptwrite_rm32, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.ptwrite(__zmmword_ptr[rdx]), Instruction.Create(Code.Ptwrite_rm32, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void punpckhbw_regMM_regMM() {
			TestAssembler(c => c.punpckhbw(mm2, mm3), Instruction.Create(Code.Punpckhbw_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void punpckhbw_regXMM_regXMM() {
			TestAssembler(c => c.punpckhbw(xmm2, xmm3), Instruction.Create(Code.Punpckhbw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpckhbw_regMM_m() {
			TestAssembler(c => c.punpckhbw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckhbw_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckhbw_regXMM_m() {
			TestAssembler(c => c.punpckhbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhbw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckhdq_regMM_regMM() {
			TestAssembler(c => c.punpckhdq(mm2, mm3), Instruction.Create(Code.Punpckhdq_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void punpckhdq_regXMM_regXMM() {
			TestAssembler(c => c.punpckhdq(xmm2, xmm3), Instruction.Create(Code.Punpckhdq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpckhdq_regMM_m() {
			TestAssembler(c => c.punpckhdq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckhdq_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckhdq_regXMM_m() {
			TestAssembler(c => c.punpckhdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhdq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckhqdq_regXMM_regXMM() {
			TestAssembler(c => c.punpckhqdq(xmm2, xmm3), Instruction.Create(Code.Punpckhqdq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpckhqdq_regXMM_m() {
			TestAssembler(c => c.punpckhqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhqdq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckhwd_regMM_regMM() {
			TestAssembler(c => c.punpckhwd(mm2, mm3), Instruction.Create(Code.Punpckhwd_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void punpckhwd_regXMM_regXMM() {
			TestAssembler(c => c.punpckhwd(xmm2, xmm3), Instruction.Create(Code.Punpckhwd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpckhwd_regMM_m() {
			TestAssembler(c => c.punpckhwd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckhwd_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckhwd_regXMM_m() {
			TestAssembler(c => c.punpckhwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhwd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpcklbw_regMM_regMM() {
			TestAssembler(c => c.punpcklbw(mm2, mm3), Instruction.Create(Code.Punpcklbw_mm_mmm32, mm2, mm3));
		}

		[Fact]
		public void punpcklbw_regXMM_regXMM() {
			TestAssembler(c => c.punpcklbw(xmm2, xmm3), Instruction.Create(Code.Punpcklbw_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpcklbw_regMM_m() {
			TestAssembler(c => c.punpcklbw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpcklbw_mm_mmm32, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpcklbw_regXMM_m() {
			TestAssembler(c => c.punpcklbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpcklbw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckldq_regMM_regMM() {
			TestAssembler(c => c.punpckldq(mm2, mm3), Instruction.Create(Code.Punpckldq_mm_mmm32, mm2, mm3));
		}

		[Fact]
		public void punpckldq_regXMM_regXMM() {
			TestAssembler(c => c.punpckldq(xmm2, xmm3), Instruction.Create(Code.Punpckldq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpckldq_regMM_m() {
			TestAssembler(c => c.punpckldq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckldq_mm_mmm32, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpckldq_regXMM_m() {
			TestAssembler(c => c.punpckldq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckldq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpcklqdq_regXMM_regXMM() {
			TestAssembler(c => c.punpcklqdq(xmm2, xmm3), Instruction.Create(Code.Punpcklqdq_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpcklqdq_regXMM_m() {
			TestAssembler(c => c.punpcklqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpcklqdq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpcklwd_regMM_regMM() {
			TestAssembler(c => c.punpcklwd(mm2, mm3), Instruction.Create(Code.Punpcklwd_mm_mmm32, mm2, mm3));
		}

		[Fact]
		public void punpcklwd_regXMM_regXMM() {
			TestAssembler(c => c.punpcklwd(xmm2, xmm3), Instruction.Create(Code.Punpcklwd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void punpcklwd_regMM_m() {
			TestAssembler(c => c.punpcklwd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpcklwd_mm_mmm32, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void punpcklwd_regXMM_m() {
			TestAssembler(c => c.punpcklwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpcklwd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void push_reg16() {
			TestAssembler(c => c.push(dx), Instruction.Create(Code.Push_r16, dx));
		}

		[Fact]
		public void push_reg64() {
			TestAssembler(c => c.push(rdx), Instruction.Create(Code.Push_r64, rdx));
		}

		[Fact]
		public void push_regSegment() {
			{ /* if (dst == Register.FS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.push(fs), Instruction.Create(Code.Pushq_FS, fs));
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.GS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.push(gs), Instruction.Create(Code.Pushq_GS, gs));
				} /* else skip (Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.ES) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Pushd_ES - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.CS) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Pushd_CS - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.SS) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Pushd_SS - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.DS) */
				{ /* if (Bitness >= 32) */
					{
						// Skipping Pushd_DS - Not supported for Bit64
					}
				} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
			}
			{
				// See manual test for this case push
			}
		}

		[Fact]
		public void push_m() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.push(__qword_ptr[rdx]), Instruction.Create(Code.Push_rm64, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{
					// Skipping Push_rm32 - Not supported for Bit64
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.push(__word_ptr[rdx]), Instruction.Create(Code.Push_rm16, __word_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.push(__zmmword_ptr[rdx]), Instruction.Create(Code.Push_rm16, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}

		[Fact]
		public void push_i() {
			{ /* if (Bitness == 64) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.push(sbyte.MinValue), Instruction.Create(Code.Pushq_imm8, sbyte.MinValue));
					TestAssembler(c => c.push(sbyte.MaxValue), Instruction.Create(Code.Pushq_imm8, sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.push(int.MinValue), Instruction.Create(Code.Pushq_imm32, int.MinValue));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void push_u() {
			{ /* if (Bitness >= 32) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					{
						// Skipping Pushd_imm8 - Not supported for Bit64
					}
					{
						// Skipping Pushd_imm8 - Not supported for Bit64
					}
				} /* else */ {
					// Skipping Pushd_imm32 - Not supported for Bit64
				}
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void pushf() {
			TestAssembler(c => c.pushf(), Instruction.Create(Code.Pushfw));
		}

		[Fact]
		public void pushfq() {
			TestAssembler(c => c.pushfq(), Instruction.Create(Code.Pushfq));
		}

		[Fact]
		public void pvalidate() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.pvalidate(), Instruction.Create(Code.Pvalidateq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void pxor_regMM_regMM() {
			TestAssembler(c => c.pxor(mm2, mm3), Instruction.Create(Code.Pxor_mm_mmm64, mm2, mm3));
		}

		[Fact]
		public void pxor_regXMM_regXMM() {
			TestAssembler(c => c.pxor(xmm2, xmm3), Instruction.Create(Code.Pxor_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void pxor_regMM_m() {
			TestAssembler(c => c.pxor(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pxor_mm_mmm64, mm2, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void pxor_regXMM_m() {
			TestAssembler(c => c.pxor(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pxor_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void rcl_reg8_reg8() {
			TestAssembler(c => c.rcl(dl, cl), Instruction.Create(Code.Rcl_rm8_CL, dl, cl));
		}

		[Fact]
		public void rcl_reg16_reg8() {
			TestAssembler(c => c.rcl(dx, cl), Instruction.Create(Code.Rcl_rm16_CL, dx, cl));
		}

		[Fact]
		public void rcl_reg32_reg8() {
			TestAssembler(c => c.rcl(edx, cl), Instruction.Create(Code.Rcl_rm32_CL, edx, cl));
		}

		[Fact]
		public void rcl_reg64_reg8() {
			TestAssembler(c => c.rcl(rdx, cl), Instruction.Create(Code.Rcl_rm64_CL, rdx, cl));
		}

		[Fact]
		public void rcl_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rcl(__qword_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rcl(__dword_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rcl(__word_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rcl(__byte_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.rcl(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void rcl_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dl, 1), Instruction.Create(Code.Rcl_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.rcl(dl, 2), Instruction.Create(Code.Rcl_rm8_imm8, dl, 2));
		}

		[Fact]
		public void rcl_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dx, 1), Instruction.Create(Code.Rcl_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.rcl(dx, 2), Instruction.Create(Code.Rcl_rm16_imm8, dx, 2));
		}

		[Fact]
		public void rcl_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(edx, 1), Instruction.Create(Code.Rcl_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.rcl(edx, 2), Instruction.Create(Code.Rcl_rm32_imm8, edx, 2));
		}

		[Fact]
		public void rcl_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(rdx, 1), Instruction.Create(Code.Rcl_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.rcl(rdx, 2), Instruction.Create(Code.Rcl_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void rcl_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.rcl(__qword_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.rcl(__dword_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.rcl(__word_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.rcl(__byte_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.rcl(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rcl(__qword_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rcl(__dword_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rcl(__word_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rcl(__byte_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.rcl(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void rcl_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dl, (byte)1), Instruction.Create(Code.Rcl_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcl(dl, (byte)2), Instruction.Create(Code.Rcl_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void rcl_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dx, (byte)1), Instruction.Create(Code.Rcl_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcl(dx, (byte)2), Instruction.Create(Code.Rcl_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void rcl_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(edx, (byte)1), Instruction.Create(Code.Rcl_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcl(edx, (byte)2), Instruction.Create(Code.Rcl_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void rcl_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(rdx, (byte)1), Instruction.Create(Code.Rcl_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcl(rdx, (byte)2), Instruction.Create(Code.Rcl_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void rcl_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.rcl(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.rcl(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.rcl(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.rcl(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rcl(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rcl(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rcl(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rcl(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void rcpps_regXMM_regXMM() {
			TestAssembler(c => c.rcpps(xmm2, xmm3), Instruction.Create(Code.Rcpps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void rcpps_regXMM_m() {
			TestAssembler(c => c.rcpps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rcpps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void rcpss_regXMM_regXMM() {
			TestAssembler(c => c.rcpss(xmm2, xmm3), Instruction.Create(Code.Rcpss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void rcpss_regXMM_m() {
			TestAssembler(c => c.rcpss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rcpss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void rcr_reg8_reg8() {
			TestAssembler(c => c.rcr(dl, cl), Instruction.Create(Code.Rcr_rm8_CL, dl, cl));
		}

		[Fact]
		public void rcr_reg16_reg8() {
			TestAssembler(c => c.rcr(dx, cl), Instruction.Create(Code.Rcr_rm16_CL, dx, cl));
		}

		[Fact]
		public void rcr_reg32_reg8() {
			TestAssembler(c => c.rcr(edx, cl), Instruction.Create(Code.Rcr_rm32_CL, edx, cl));
		}

		[Fact]
		public void rcr_reg64_reg8() {
			TestAssembler(c => c.rcr(rdx, cl), Instruction.Create(Code.Rcr_rm64_CL, rdx, cl));
		}

		[Fact]
		public void rcr_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rcr(__qword_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rcr(__dword_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rcr(__word_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rcr(__byte_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.rcr(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void rcr_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dl, 1), Instruction.Create(Code.Rcr_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.rcr(dl, 2), Instruction.Create(Code.Rcr_rm8_imm8, dl, 2));
		}

		[Fact]
		public void rcr_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dx, 1), Instruction.Create(Code.Rcr_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.rcr(dx, 2), Instruction.Create(Code.Rcr_rm16_imm8, dx, 2));
		}

		[Fact]
		public void rcr_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(edx, 1), Instruction.Create(Code.Rcr_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.rcr(edx, 2), Instruction.Create(Code.Rcr_rm32_imm8, edx, 2));
		}

		[Fact]
		public void rcr_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(rdx, 1), Instruction.Create(Code.Rcr_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.rcr(rdx, 2), Instruction.Create(Code.Rcr_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void rcr_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.rcr(__qword_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.rcr(__dword_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.rcr(__word_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.rcr(__byte_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.rcr(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rcr(__qword_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rcr(__dword_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rcr(__word_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rcr(__byte_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.rcr(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void rcr_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dl, (byte)1), Instruction.Create(Code.Rcr_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcr(dl, (byte)2), Instruction.Create(Code.Rcr_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void rcr_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dx, (byte)1), Instruction.Create(Code.Rcr_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcr(dx, (byte)2), Instruction.Create(Code.Rcr_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void rcr_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(edx, (byte)1), Instruction.Create(Code.Rcr_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcr(edx, (byte)2), Instruction.Create(Code.Rcr_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void rcr_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(rdx, (byte)1), Instruction.Create(Code.Rcr_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rcr(rdx, (byte)2), Instruction.Create(Code.Rcr_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void rcr_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.rcr(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.rcr(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.rcr(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.rcr(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rcr(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rcr(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rcr(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rcr(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void rdfsbase_reg32() {
			TestAssembler(c => c.rdfsbase(edx), Instruction.Create(Code.Rdfsbase_r32, edx));
		}

		[Fact]
		public void rdfsbase_reg64() {
			TestAssembler(c => c.rdfsbase(rdx), Instruction.Create(Code.Rdfsbase_r64, rdx));
		}

		[Fact]
		public void rdgsbase_reg32() {
			TestAssembler(c => c.rdgsbase(edx), Instruction.Create(Code.Rdgsbase_r32, edx));
		}

		[Fact]
		public void rdgsbase_reg64() {
			TestAssembler(c => c.rdgsbase(rdx), Instruction.Create(Code.Rdgsbase_r64, rdx));
		}

		[Fact]
		public void rdmsr() {
			TestAssembler(c => c.rdmsr(), Instruction.Create(Code.Rdmsr));
		}

		[Fact]
		public void rdpid_reg64() {
			TestAssembler(c => c.rdpid(rdx), Instruction.Create(Code.Rdpid_r64, rdx));
		}

		[Fact]
		public void rdpkru() {
			TestAssembler(c => c.rdpkru(), Instruction.Create(Code.Rdpkru));
		}

		[Fact]
		public void rdpmc() {
			TestAssembler(c => c.rdpmc(), Instruction.Create(Code.Rdpmc));
		}

		[Fact]
		public void rdpru() {
			TestAssembler(c => c.rdpru(), Instruction.Create(Code.Rdpru));
		}

		[Fact]
		public void rdrand_reg16() {
			TestAssembler(c => c.rdrand(dx), Instruction.Create(Code.Rdrand_r16, dx));
		}

		[Fact]
		public void rdrand_reg32() {
			TestAssembler(c => c.rdrand(edx), Instruction.Create(Code.Rdrand_r32, edx));
		}

		[Fact]
		public void rdrand_reg64() {
			TestAssembler(c => c.rdrand(rdx), Instruction.Create(Code.Rdrand_r64, rdx));
		}

		[Fact]
		public void rdseed_reg16() {
			TestAssembler(c => c.rdseed(dx), Instruction.Create(Code.Rdseed_r16, dx));
		}

		[Fact]
		public void rdseed_reg32() {
			TestAssembler(c => c.rdseed(edx), Instruction.Create(Code.Rdseed_r32, edx));
		}

		[Fact]
		public void rdseed_reg64() {
			TestAssembler(c => c.rdseed(rdx), Instruction.Create(Code.Rdseed_r64, rdx));
		}

		[Fact]
		public void rdsspd_reg32() {
			TestAssembler(c => c.rdsspd(edx), Instruction.Create(Code.Rdsspd_r32, edx));
		}

		[Fact]
		public void rdsspq_reg64() {
			TestAssembler(c => c.rdsspq(rdx), Instruction.Create(Code.Rdsspq_r64, rdx));
		}

		[Fact]
		public void rdtsc() {
			TestAssembler(c => c.rdtsc(), Instruction.Create(Code.Rdtsc));
		}

		[Fact]
		public void rdtscp() {
			TestAssembler(c => c.rdtscp(), Instruction.Create(Code.Rdtscp));
		}

		[Fact]
		public void reservednop_0f0d_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f0d(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F0D, dx, bx));
		}

		[Fact]
		public void reservednop_0f0d_m_reg16() {
			TestAssembler(c => c.reservednop_0f0d(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F0D, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f0d_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f0d(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F0D, edx, ebx));
		}

		[Fact]
		public void reservednop_0f0d_m_reg32() {
			TestAssembler(c => c.reservednop_0f0d(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F0D, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f0d_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f0d(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F0D, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f0d_m_reg64() {
			TestAssembler(c => c.reservednop_0f0d(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F0D, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f18_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f18(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F18, dx, bx));
		}

		[Fact]
		public void reservednop_0f18_m_reg16() {
			TestAssembler(c => c.reservednop_0f18(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F18, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f18_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f18(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F18, edx, ebx));
		}

		[Fact]
		public void reservednop_0f18_m_reg32() {
			TestAssembler(c => c.reservednop_0f18(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F18, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f18_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f18(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F18, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f18_m_reg64() {
			TestAssembler(c => c.reservednop_0f18(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F18, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f19_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f19(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F19, dx, bx));
		}

		[Fact]
		public void reservednop_0f19_m_reg16() {
			TestAssembler(c => c.reservednop_0f19(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F19, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f19_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f19(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F19, edx, ebx));
		}

		[Fact]
		public void reservednop_0f19_m_reg32() {
			TestAssembler(c => c.reservednop_0f19(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F19, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f19_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f19(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F19, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f19_m_reg64() {
			TestAssembler(c => c.reservednop_0f19(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F19, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f1a_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f1a(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1A, dx, bx));
		}

		[Fact]
		public void reservednop_0f1a_m_reg16() {
			TestAssembler(c => c.reservednop_0f1a(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1A, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f1a_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f1a(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1A, edx, ebx));
		}

		[Fact]
		public void reservednop_0f1a_m_reg32() {
			TestAssembler(c => c.reservednop_0f1a(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1A, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f1a_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f1a(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1A, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f1a_m_reg64() {
			TestAssembler(c => c.reservednop_0f1a(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1A, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f1b_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f1b(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1B, dx, bx));
		}

		[Fact]
		public void reservednop_0f1b_m_reg16() {
			TestAssembler(c => c.reservednop_0f1b(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1B, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f1b_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f1b(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1B, edx, ebx));
		}

		[Fact]
		public void reservednop_0f1b_m_reg32() {
			TestAssembler(c => c.reservednop_0f1b(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1B, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f1b_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f1b(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1B, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f1b_m_reg64() {
			TestAssembler(c => c.reservednop_0f1b(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1B, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f1c_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f1c(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1C, dx, bx));
		}

		[Fact]
		public void reservednop_0f1c_m_reg16() {
			TestAssembler(c => c.reservednop_0f1c(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1C, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f1c_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f1c(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1C, edx, ebx));
		}

		[Fact]
		public void reservednop_0f1c_m_reg32() {
			TestAssembler(c => c.reservednop_0f1c(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1C, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f1c_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f1c(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1C, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f1c_m_reg64() {
			TestAssembler(c => c.reservednop_0f1c(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1C, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f1d_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f1d(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1D, dx, bx));
		}

		[Fact]
		public void reservednop_0f1d_m_reg16() {
			TestAssembler(c => c.reservednop_0f1d(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1D, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f1d_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f1d(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1D, edx, ebx));
		}

		[Fact]
		public void reservednop_0f1d_m_reg32() {
			TestAssembler(c => c.reservednop_0f1d(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1D, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f1d_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f1d(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1D, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f1d_m_reg64() {
			TestAssembler(c => c.reservednop_0f1d(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1D, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f1e_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f1e(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1E, dx, bx));
		}

		[Fact]
		public void reservednop_0f1e_m_reg16() {
			TestAssembler(c => c.reservednop_0f1e(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1E, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f1e_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f1e(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1E, edx, ebx));
		}

		[Fact]
		public void reservednop_0f1e_m_reg32() {
			TestAssembler(c => c.reservednop_0f1e(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1E, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f1e_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f1e(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1E, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f1e_m_reg64() {
			TestAssembler(c => c.reservednop_0f1e(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1E, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void reservednop_0f1f_reg16_reg16() {
			TestAssembler(c => c.reservednop_0f1f(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1F, dx, bx));
		}

		[Fact]
		public void reservednop_0f1f_m_reg16() {
			TestAssembler(c => c.reservednop_0f1f(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1F, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void reservednop_0f1f_reg32_reg32() {
			TestAssembler(c => c.reservednop_0f1f(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1F, edx, ebx));
		}

		[Fact]
		public void reservednop_0f1f_m_reg32() {
			TestAssembler(c => c.reservednop_0f1f(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1F, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void reservednop_0f1f_reg64_reg64() {
			TestAssembler(c => c.reservednop_0f1f(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1F, rdx, rbx));
		}

		[Fact]
		public void reservednop_0f1f_m_reg64() {
			TestAssembler(c => c.reservednop_0f1f(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1F, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void ret() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ret(), Instruction.Create(Code.Retnq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ret_i() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ret(16567), Instruction.Create(Code.Retnq_imm16, 16567));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ret_u() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ret((ushort)16567), Instruction.Create(Code.Retnq_imm16, (uint)(ushort)16567));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void retf() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.retf(), Instruction.Create(Code.Retfq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void retf_i() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.retf(16567), Instruction.Create(Code.Retfq_imm16, 16567));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void retf_u() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.retf((ushort)16567), Instruction.Create(Code.Retfq_imm16, (uint)(ushort)16567));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void rmpadjust() {
			TestAssembler(c => c.rmpadjust(), Instruction.Create(Code.Rmpadjust));
		}

		[Fact]
		public void rmpupdate() {
			TestAssembler(c => c.rmpupdate(), Instruction.Create(Code.Rmpupdate));
		}

		[Fact]
		public void rol_reg8_reg8() {
			TestAssembler(c => c.rol(dl, cl), Instruction.Create(Code.Rol_rm8_CL, dl, cl));
		}

		[Fact]
		public void rol_reg16_reg8() {
			TestAssembler(c => c.rol(dx, cl), Instruction.Create(Code.Rol_rm16_CL, dx, cl));
		}

		[Fact]
		public void rol_reg32_reg8() {
			TestAssembler(c => c.rol(edx, cl), Instruction.Create(Code.Rol_rm32_CL, edx, cl));
		}

		[Fact]
		public void rol_reg64_reg8() {
			TestAssembler(c => c.rol(rdx, cl), Instruction.Create(Code.Rol_rm64_CL, rdx, cl));
		}

		[Fact]
		public void rol_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rol(__qword_ptr[rdx], cl), Instruction.Create(Code.Rol_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rol(__dword_ptr[rdx], cl), Instruction.Create(Code.Rol_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rol(__word_ptr[rdx], cl), Instruction.Create(Code.Rol_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rol(__byte_ptr[rdx], cl), Instruction.Create(Code.Rol_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.rol(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Rol_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void rol_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dl, 1), Instruction.Create(Code.Rol_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.rol(dl, 2), Instruction.Create(Code.Rol_rm8_imm8, dl, 2));
		}

		[Fact]
		public void rol_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dx, 1), Instruction.Create(Code.Rol_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.rol(dx, 2), Instruction.Create(Code.Rol_rm16_imm8, dx, 2));
		}

		[Fact]
		public void rol_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(edx, 1), Instruction.Create(Code.Rol_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.rol(edx, 2), Instruction.Create(Code.Rol_rm32_imm8, edx, 2));
		}

		[Fact]
		public void rol_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(rdx, 1), Instruction.Create(Code.Rol_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.rol(rdx, 2), Instruction.Create(Code.Rol_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void rol_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.rol(__qword_ptr[rdx], 1), Instruction.Create(Code.Rol_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.rol(__dword_ptr[rdx], 1), Instruction.Create(Code.Rol_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.rol(__word_ptr[rdx], 1), Instruction.Create(Code.Rol_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.rol(__byte_ptr[rdx], 1), Instruction.Create(Code.Rol_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.rol(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Rol_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rol(__qword_ptr[rdx], 2), Instruction.Create(Code.Rol_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rol(__dword_ptr[rdx], 2), Instruction.Create(Code.Rol_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rol(__word_ptr[rdx], 2), Instruction.Create(Code.Rol_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rol(__byte_ptr[rdx], 2), Instruction.Create(Code.Rol_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.rol(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Rol_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void rol_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dl, (byte)1), Instruction.Create(Code.Rol_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rol(dl, (byte)2), Instruction.Create(Code.Rol_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void rol_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dx, (byte)1), Instruction.Create(Code.Rol_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rol(dx, (byte)2), Instruction.Create(Code.Rol_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void rol_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(edx, (byte)1), Instruction.Create(Code.Rol_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rol(edx, (byte)2), Instruction.Create(Code.Rol_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void rol_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(rdx, (byte)1), Instruction.Create(Code.Rol_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.rol(rdx, (byte)2), Instruction.Create(Code.Rol_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void rol_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.rol(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.rol(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.rol(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.rol(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.rol(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.rol(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.rol(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.rol(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void ror_reg8_reg8() {
			TestAssembler(c => c.ror(dl, cl), Instruction.Create(Code.Ror_rm8_CL, dl, cl));
		}

		[Fact]
		public void ror_reg16_reg8() {
			TestAssembler(c => c.ror(dx, cl), Instruction.Create(Code.Ror_rm16_CL, dx, cl));
		}

		[Fact]
		public void ror_reg32_reg8() {
			TestAssembler(c => c.ror(edx, cl), Instruction.Create(Code.Ror_rm32_CL, edx, cl));
		}

		[Fact]
		public void ror_reg64_reg8() {
			TestAssembler(c => c.ror(rdx, cl), Instruction.Create(Code.Ror_rm64_CL, rdx, cl));
		}

		[Fact]
		public void ror_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.ror(__qword_ptr[rdx], cl), Instruction.Create(Code.Ror_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.ror(__dword_ptr[rdx], cl), Instruction.Create(Code.Ror_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.ror(__word_ptr[rdx], cl), Instruction.Create(Code.Ror_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.ror(__byte_ptr[rdx], cl), Instruction.Create(Code.Ror_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.ror(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Ror_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void ror_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dl, 1), Instruction.Create(Code.Ror_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.ror(dl, 2), Instruction.Create(Code.Ror_rm8_imm8, dl, 2));
		}

		[Fact]
		public void ror_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dx, 1), Instruction.Create(Code.Ror_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.ror(dx, 2), Instruction.Create(Code.Ror_rm16_imm8, dx, 2));
		}

		[Fact]
		public void ror_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(edx, 1), Instruction.Create(Code.Ror_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.ror(edx, 2), Instruction.Create(Code.Ror_rm32_imm8, edx, 2));
		}

		[Fact]
		public void ror_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(rdx, 1), Instruction.Create(Code.Ror_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.ror(rdx, 2), Instruction.Create(Code.Ror_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void ror_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.ror(__qword_ptr[rdx], 1), Instruction.Create(Code.Ror_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.ror(__dword_ptr[rdx], 1), Instruction.Create(Code.Ror_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.ror(__word_ptr[rdx], 1), Instruction.Create(Code.Ror_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.ror(__byte_ptr[rdx], 1), Instruction.Create(Code.Ror_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.ror(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Ror_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.ror(__qword_ptr[rdx], 2), Instruction.Create(Code.Ror_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.ror(__dword_ptr[rdx], 2), Instruction.Create(Code.Ror_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.ror(__word_ptr[rdx], 2), Instruction.Create(Code.Ror_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.ror(__byte_ptr[rdx], 2), Instruction.Create(Code.Ror_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.ror(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Ror_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void ror_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dl, (byte)1), Instruction.Create(Code.Ror_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.ror(dl, (byte)2), Instruction.Create(Code.Ror_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void ror_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dx, (byte)1), Instruction.Create(Code.Ror_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.ror(dx, (byte)2), Instruction.Create(Code.Ror_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void ror_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(edx, (byte)1), Instruction.Create(Code.Ror_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.ror(edx, (byte)2), Instruction.Create(Code.Ror_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void ror_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(rdx, (byte)1), Instruction.Create(Code.Ror_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.ror(rdx, (byte)2), Instruction.Create(Code.Ror_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void ror_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.ror(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.ror(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.ror(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.ror(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.ror(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.ror(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.ror(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.ror(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

#if !NO_VEX
		[Fact]
		public void rorx_reg32_reg32_i() {
			TestAssembler(c => c.rorx(edx, ebx, -5), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, edx, ebx, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg64_reg64_i() {
			TestAssembler(c => c.rorx(rdx, rbx, -5), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, rdx, rbx, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg32_m_i() {
			TestAssembler(c => c.rorx(edx, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg64_m_i() {
			TestAssembler(c => c.rorx(rdx, __qword_ptr[rcx], -5), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg32_reg32_u() {
			TestAssembler(c => c.rorx(edx, ebx, (byte)127), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, edx, ebx, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg64_reg64_u() {
			TestAssembler(c => c.rorx(rdx, rbx, (byte)127), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, rdx, rbx, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg32_m_u() {
			TestAssembler(c => c.rorx(edx, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void rorx_reg64_m_u() {
			TestAssembler(c => c.rorx(rdx, __qword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

		[Fact]
		public void roundpd_regXMM_regXMM_i() {
			TestAssembler(c => c.roundpd(xmm2, xmm3, -5), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void roundpd_regXMM_m_i() {
			TestAssembler(c => c.roundpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void roundpd_regXMM_regXMM_u() {
			TestAssembler(c => c.roundpd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void roundpd_regXMM_m_u() {
			TestAssembler(c => c.roundpd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void roundps_regXMM_regXMM_i() {
			TestAssembler(c => c.roundps(xmm2, xmm3, -5), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void roundps_regXMM_m_i() {
			TestAssembler(c => c.roundps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void roundps_regXMM_regXMM_u() {
			TestAssembler(c => c.roundps(xmm2, xmm3, (byte)127), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void roundps_regXMM_m_u() {
			TestAssembler(c => c.roundps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void roundsd_regXMM_regXMM_i() {
			TestAssembler(c => c.roundsd(xmm2, xmm3, -5), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void roundsd_regXMM_m_i() {
			TestAssembler(c => c.roundsd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void roundsd_regXMM_regXMM_u() {
			TestAssembler(c => c.roundsd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void roundsd_regXMM_m_u() {
			TestAssembler(c => c.roundsd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void roundss_regXMM_regXMM_i() {
			TestAssembler(c => c.roundss(xmm2, xmm3, -5), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void roundss_regXMM_m_i() {
			TestAssembler(c => c.roundss(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void roundss_regXMM_regXMM_u() {
			TestAssembler(c => c.roundss(xmm2, xmm3, (byte)127), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void roundss_regXMM_m_u() {
			TestAssembler(c => c.roundss(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void rsm() {
			TestAssembler(c => c.rsm(), Instruction.Create(Code.Rsm));
		}

		[Fact]
		public void rsqrtps_regXMM_regXMM() {
			TestAssembler(c => c.rsqrtps(xmm2, xmm3), Instruction.Create(Code.Rsqrtps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void rsqrtps_regXMM_m() {
			TestAssembler(c => c.rsqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rsqrtps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void rsqrtss_regXMM_regXMM() {
			TestAssembler(c => c.rsqrtss(xmm2, xmm3), Instruction.Create(Code.Rsqrtss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void rsqrtss_regXMM_m() {
			TestAssembler(c => c.rsqrtss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rsqrtss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void rstorssp_m() {
			TestAssembler(c => c.rstorssp(__[rcx]), Instruction.Create(Code.Rstorssp_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sahf() {
			TestAssembler(c => c.sahf(), Instruction.Create(Code.Sahf));
		}

		[Fact]
		public void sal_reg8_reg8() {
			TestAssembler(c => c.sal(dl, cl), Instruction.Create(Code.Sal_rm8_CL, dl, cl));
		}

		[Fact]
		public void sal_reg16_reg8() {
			TestAssembler(c => c.sal(dx, cl), Instruction.Create(Code.Sal_rm16_CL, dx, cl));
		}

		[Fact]
		public void sal_reg32_reg8() {
			TestAssembler(c => c.sal(edx, cl), Instruction.Create(Code.Sal_rm32_CL, edx, cl));
		}

		[Fact]
		public void sal_reg64_reg8() {
			TestAssembler(c => c.sal(rdx, cl), Instruction.Create(Code.Sal_rm64_CL, rdx, cl));
		}

		[Fact]
		public void sal_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.sal(__qword_ptr[rdx], cl), Instruction.Create(Code.Sal_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.sal(__dword_ptr[rdx], cl), Instruction.Create(Code.Sal_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.sal(__word_ptr[rdx], cl), Instruction.Create(Code.Sal_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sal(__byte_ptr[rdx], cl), Instruction.Create(Code.Sal_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.sal(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Sal_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void sal_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dl, 1), Instruction.Create(Code.Sal_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.sal(dl, 2), Instruction.Create(Code.Sal_rm8_imm8, dl, 2));
		}

		[Fact]
		public void sal_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dx, 1), Instruction.Create(Code.Sal_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.sal(dx, 2), Instruction.Create(Code.Sal_rm16_imm8, dx, 2));
		}

		[Fact]
		public void sal_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(edx, 1), Instruction.Create(Code.Sal_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.sal(edx, 2), Instruction.Create(Code.Sal_rm32_imm8, edx, 2));
		}

		[Fact]
		public void sal_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(rdx, 1), Instruction.Create(Code.Sal_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.sal(rdx, 2), Instruction.Create(Code.Sal_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void sal_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.sal(__qword_ptr[rdx], 1), Instruction.Create(Code.Sal_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.sal(__dword_ptr[rdx], 1), Instruction.Create(Code.Sal_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.sal(__word_ptr[rdx], 1), Instruction.Create(Code.Sal_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.sal(__byte_ptr[rdx], 1), Instruction.Create(Code.Sal_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.sal(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Sal_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.sal(__qword_ptr[rdx], 2), Instruction.Create(Code.Sal_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.sal(__dword_ptr[rdx], 2), Instruction.Create(Code.Sal_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.sal(__word_ptr[rdx], 2), Instruction.Create(Code.Sal_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sal(__byte_ptr[rdx], 2), Instruction.Create(Code.Sal_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.sal(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Sal_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void sal_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dl, (byte)1), Instruction.Create(Code.Sal_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sal(dl, (byte)2), Instruction.Create(Code.Sal_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void sal_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dx, (byte)1), Instruction.Create(Code.Sal_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sal(dx, (byte)2), Instruction.Create(Code.Sal_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void sal_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(edx, (byte)1), Instruction.Create(Code.Sal_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sal(edx, (byte)2), Instruction.Create(Code.Sal_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void sal_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(rdx, (byte)1), Instruction.Create(Code.Sal_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sal(rdx, (byte)2), Instruction.Create(Code.Sal_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void sal_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.sal(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.sal(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.sal(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.sal(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.sal(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.sal(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.sal(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sal(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void sar_reg8_reg8() {
			TestAssembler(c => c.sar(dl, cl), Instruction.Create(Code.Sar_rm8_CL, dl, cl));
		}

		[Fact]
		public void sar_reg16_reg8() {
			TestAssembler(c => c.sar(dx, cl), Instruction.Create(Code.Sar_rm16_CL, dx, cl));
		}

		[Fact]
		public void sar_reg32_reg8() {
			TestAssembler(c => c.sar(edx, cl), Instruction.Create(Code.Sar_rm32_CL, edx, cl));
		}

		[Fact]
		public void sar_reg64_reg8() {
			TestAssembler(c => c.sar(rdx, cl), Instruction.Create(Code.Sar_rm64_CL, rdx, cl));
		}

		[Fact]
		public void sar_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.sar(__qword_ptr[rdx], cl), Instruction.Create(Code.Sar_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.sar(__dword_ptr[rdx], cl), Instruction.Create(Code.Sar_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.sar(__word_ptr[rdx], cl), Instruction.Create(Code.Sar_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sar(__byte_ptr[rdx], cl), Instruction.Create(Code.Sar_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.sar(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Sar_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void sar_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dl, 1), Instruction.Create(Code.Sar_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.sar(dl, 2), Instruction.Create(Code.Sar_rm8_imm8, dl, 2));
		}

		[Fact]
		public void sar_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dx, 1), Instruction.Create(Code.Sar_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.sar(dx, 2), Instruction.Create(Code.Sar_rm16_imm8, dx, 2));
		}

		[Fact]
		public void sar_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(edx, 1), Instruction.Create(Code.Sar_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.sar(edx, 2), Instruction.Create(Code.Sar_rm32_imm8, edx, 2));
		}

		[Fact]
		public void sar_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(rdx, 1), Instruction.Create(Code.Sar_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.sar(rdx, 2), Instruction.Create(Code.Sar_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void sar_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.sar(__qword_ptr[rdx], 1), Instruction.Create(Code.Sar_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.sar(__dword_ptr[rdx], 1), Instruction.Create(Code.Sar_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.sar(__word_ptr[rdx], 1), Instruction.Create(Code.Sar_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.sar(__byte_ptr[rdx], 1), Instruction.Create(Code.Sar_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.sar(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Sar_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.sar(__qword_ptr[rdx], 2), Instruction.Create(Code.Sar_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.sar(__dword_ptr[rdx], 2), Instruction.Create(Code.Sar_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.sar(__word_ptr[rdx], 2), Instruction.Create(Code.Sar_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sar(__byte_ptr[rdx], 2), Instruction.Create(Code.Sar_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.sar(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Sar_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void sar_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dl, (byte)1), Instruction.Create(Code.Sar_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sar(dl, (byte)2), Instruction.Create(Code.Sar_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void sar_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dx, (byte)1), Instruction.Create(Code.Sar_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sar(dx, (byte)2), Instruction.Create(Code.Sar_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void sar_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(edx, (byte)1), Instruction.Create(Code.Sar_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sar(edx, (byte)2), Instruction.Create(Code.Sar_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void sar_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(rdx, (byte)1), Instruction.Create(Code.Sar_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.sar(rdx, (byte)2), Instruction.Create(Code.Sar_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void sar_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.sar(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.sar(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.sar(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.sar(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.sar(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.sar(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.sar(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sar(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

#if !NO_VEX
		[Fact]
		public void sarx_reg32_reg32_reg32() {
			TestAssembler(c => c.sarx(edx, ebx, esp), Instruction.Create(Code.VEX_Sarx_r32_rm32_r32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void sarx_reg32_m_reg32() {
			TestAssembler(c => c.sarx(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Sarx_r32_rm32_r32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void sarx_reg64_reg64_reg64() {
			TestAssembler(c => c.sarx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Sarx_r64_rm64_r64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void sarx_reg64_m_reg64() {
			TestAssembler(c => c.sarx(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Sarx_r64_rm64_r64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), rsp));
		}
#endif

		[Fact]
		public void saveprevssp() {
			TestAssembler(c => c.saveprevssp(), Instruction.Create(Code.Saveprevssp));
		}

		[Fact]
		public void sbb_reg8_reg8() {
			TestAssembler(c => c.sbb(dl, bl), Instruction.Create(Code.Sbb_rm8_r8, dl, bl));
		}

		[Fact]
		public void sbb_m_reg8() {
			TestAssembler(c => c.sbb(__byte_ptr[rcx], bl), Instruction.Create(Code.Sbb_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void sbb_reg16_reg16() {
			TestAssembler(c => c.sbb(dx, bx), Instruction.Create(Code.Sbb_rm16_r16, dx, bx));
		}

		[Fact]
		public void sbb_m_reg16() {
			TestAssembler(c => c.sbb(__word_ptr[rcx], bx), Instruction.Create(Code.Sbb_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void sbb_reg32_reg32() {
			TestAssembler(c => c.sbb(edx, ebx), Instruction.Create(Code.Sbb_rm32_r32, edx, ebx));
		}

		[Fact]
		public void sbb_m_reg32() {
			TestAssembler(c => c.sbb(__dword_ptr[rcx], ebx), Instruction.Create(Code.Sbb_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void sbb_reg64_reg64() {
			TestAssembler(c => c.sbb(rdx, rbx), Instruction.Create(Code.Sbb_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void sbb_m_reg64() {
			TestAssembler(c => c.sbb(__qword_ptr[rcx], rbx), Instruction.Create(Code.Sbb_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void sbb_reg8_m() {
			TestAssembler(c => c.sbb(dl, __byte_ptr[rcx]), Instruction.Create(Code.Sbb_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sbb_reg16_m() {
			TestAssembler(c => c.sbb(dx, __word_ptr[rcx]), Instruction.Create(Code.Sbb_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sbb_reg32_m() {
			TestAssembler(c => c.sbb(edx, __dword_ptr[rcx]), Instruction.Create(Code.Sbb_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sbb_reg64_m() {
			TestAssembler(c => c.sbb(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Sbb_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sbb_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sbb(al, -5), Instruction.Create(Code.Sbb_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.sbb(dl, -5), Instruction.Create(Code.Sbb_rm8_imm8, dl, -5));
		}

		[Fact]
		public void sbb_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sbb(ax, 16567), Instruction.Create(Code.Sbb_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sbb(dx, sbyte.MinValue), Instruction.Create(Code.Sbb_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.sbb(dx, sbyte.MaxValue), Instruction.Create(Code.Sbb_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.sbb(dx, 16567), Instruction.Create(Code.Sbb_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void sbb_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sbb(eax, int.MaxValue), Instruction.Create(Code.Sbb_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sbb(edx, sbyte.MinValue), Instruction.Create(Code.Sbb_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.sbb(edx, sbyte.MaxValue), Instruction.Create(Code.Sbb_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.sbb(edx, int.MaxValue), Instruction.Create(Code.Sbb_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void sbb_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.sbb(rax, int.MinValue), Instruction.Create(Code.Sbb_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sbb(rdx, sbyte.MinValue), Instruction.Create(Code.Sbb_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.sbb(rdx, sbyte.MaxValue), Instruction.Create(Code.Sbb_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.sbb(rdx, int.MinValue), Instruction.Create(Code.Sbb_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void sbb_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sbb(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Sbb_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.sbb(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Sbb_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.sbb(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Sbb_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sbb(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Sbb_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.sbb(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Sbb_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.sbb(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Sbb_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sbb(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Sbb_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.sbb(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Sbb_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.sbb(__word_ptr[rdx], 16567), Instruction.Create(Code.Sbb_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sbb(__byte_ptr[rdx], -5), Instruction.Create(Code.Sbb_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.sbb(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Sbb_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void sbb_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sbb(al, (byte)127), Instruction.Create(Code.Sbb_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.sbb(dl, (byte)127), Instruction.Create(Code.Sbb_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void sbb_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sbb(ax, (ushort)16567), Instruction.Create(Code.Sbb_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.sbb(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Sbb_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.sbb(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Sbb_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.sbb(dx, (ushort)16567), Instruction.Create(Code.Sbb_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void sbb_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sbb(eax, (uint)int.MaxValue), Instruction.Create(Code.Sbb_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.sbb(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Sbb_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.sbb(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Sbb_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.sbb(edx, (uint)int.MaxValue), Instruction.Create(Code.Sbb_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void sbb_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.sbb(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Sbb_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.sbb(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Sbb_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.sbb(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Sbb_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.sbb(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Sbb_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.sbb(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Sbb_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.sbb(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Sbb_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sbb(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Sbb_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void scasb() {
			TestAssembler(c => c.scasb(), Instruction.CreateScasb(Bitness));
		}

		[Fact]
		public void scasd() {
			TestAssembler(c => c.scasd(), Instruction.CreateScasd(Bitness));
		}

		[Fact]
		public void scasq() {
			TestAssembler(c => c.scasq(), Instruction.CreateScasq(Bitness));
		}

		[Fact]
		public void scasw() {
			TestAssembler(c => c.scasw(), Instruction.CreateScasw(Bitness));
		}

		[Fact]
		public void seamcall() {
			TestAssembler(c => c.seamcall(), Instruction.Create(Code.Seamcall));
		}

		[Fact]
		public void seamops() {
			TestAssembler(c => c.seamops(), Instruction.Create(Code.Seamops));
		}

		[Fact]
		public void seamret() {
			TestAssembler(c => c.seamret(), Instruction.Create(Code.Seamret));
		}

		[Fact]
		public void senduipi_reg64() {
			TestAssembler(c => c.senduipi(rdx), Instruction.Create(Code.Senduipi_r64, rdx));
		}

		[Fact]
		public void serialize() {
			TestAssembler(c => c.serialize(), Instruction.Create(Code.Serialize));
		}

		[Fact]
		public void seta_reg8() {
			TestAssembler(c => c.seta(dl), Instruction.Create(Code.Seta_rm8, dl));
		}

		[Fact]
		public void seta_m() {
			TestAssembler(c => c.seta(__byte_ptr[rcx]), Instruction.Create(Code.Seta_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setae_reg8() {
			TestAssembler(c => c.setae(dl), Instruction.Create(Code.Setae_rm8, dl));
		}

		[Fact]
		public void setae_m() {
			TestAssembler(c => c.setae(__byte_ptr[rcx]), Instruction.Create(Code.Setae_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setb_reg8() {
			TestAssembler(c => c.setb(dl), Instruction.Create(Code.Setb_rm8, dl));
		}

		[Fact]
		public void setb_m() {
			TestAssembler(c => c.setb(__byte_ptr[rcx]), Instruction.Create(Code.Setb_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setbe_reg8() {
			TestAssembler(c => c.setbe(dl), Instruction.Create(Code.Setbe_rm8, dl));
		}

		[Fact]
		public void setbe_m() {
			TestAssembler(c => c.setbe(__byte_ptr[rcx]), Instruction.Create(Code.Setbe_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sete_reg8() {
			TestAssembler(c => c.sete(dl), Instruction.Create(Code.Sete_rm8, dl));
		}

		[Fact]
		public void sete_m() {
			TestAssembler(c => c.sete(__byte_ptr[rcx]), Instruction.Create(Code.Sete_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setg_reg8() {
			TestAssembler(c => c.setg(dl), Instruction.Create(Code.Setg_rm8, dl));
		}

		[Fact]
		public void setg_m() {
			TestAssembler(c => c.setg(__byte_ptr[rcx]), Instruction.Create(Code.Setg_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setge_reg8() {
			TestAssembler(c => c.setge(dl), Instruction.Create(Code.Setge_rm8, dl));
		}

		[Fact]
		public void setge_m() {
			TestAssembler(c => c.setge(__byte_ptr[rcx]), Instruction.Create(Code.Setge_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setl_reg8() {
			TestAssembler(c => c.setl(dl), Instruction.Create(Code.Setl_rm8, dl));
		}

		[Fact]
		public void setl_m() {
			TestAssembler(c => c.setl(__byte_ptr[rcx]), Instruction.Create(Code.Setl_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setle_reg8() {
			TestAssembler(c => c.setle(dl), Instruction.Create(Code.Setle_rm8, dl));
		}

		[Fact]
		public void setle_m() {
			TestAssembler(c => c.setle(__byte_ptr[rcx]), Instruction.Create(Code.Setle_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setne_reg8() {
			TestAssembler(c => c.setne(dl), Instruction.Create(Code.Setne_rm8, dl));
		}

		[Fact]
		public void setne_m() {
			TestAssembler(c => c.setne(__byte_ptr[rcx]), Instruction.Create(Code.Setne_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setno_reg8() {
			TestAssembler(c => c.setno(dl), Instruction.Create(Code.Setno_rm8, dl));
		}

		[Fact]
		public void setno_m() {
			TestAssembler(c => c.setno(__byte_ptr[rcx]), Instruction.Create(Code.Setno_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setnp_reg8() {
			TestAssembler(c => c.setnp(dl), Instruction.Create(Code.Setnp_rm8, dl));
		}

		[Fact]
		public void setnp_m() {
			TestAssembler(c => c.setnp(__byte_ptr[rcx]), Instruction.Create(Code.Setnp_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setns_reg8() {
			TestAssembler(c => c.setns(dl), Instruction.Create(Code.Setns_rm8, dl));
		}

		[Fact]
		public void setns_m() {
			TestAssembler(c => c.setns(__byte_ptr[rcx]), Instruction.Create(Code.Setns_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void seto_reg8() {
			TestAssembler(c => c.seto(dl), Instruction.Create(Code.Seto_rm8, dl));
		}

		[Fact]
		public void seto_m() {
			TestAssembler(c => c.seto(__byte_ptr[rcx]), Instruction.Create(Code.Seto_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setp_reg8() {
			TestAssembler(c => c.setp(dl), Instruction.Create(Code.Setp_rm8, dl));
		}

		[Fact]
		public void setp_m() {
			TestAssembler(c => c.setp(__byte_ptr[rcx]), Instruction.Create(Code.Setp_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sets_reg8() {
			TestAssembler(c => c.sets(dl), Instruction.Create(Code.Sets_rm8, dl));
		}

		[Fact]
		public void sets_m() {
			TestAssembler(c => c.sets(__byte_ptr[rcx]), Instruction.Create(Code.Sets_rm8, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void setssbsy() {
			TestAssembler(c => c.setssbsy(), Instruction.Create(Code.Setssbsy));
		}

		[Fact]
		public void sfence() {
			TestAssembler(c => c.sfence(), Instruction.Create(Code.Sfence));
		}

		[Fact]
		public void sgdt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.sgdt(__[rcx]), Instruction.Create(Code.Sgdt_m1664, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void sha1msg1_regXMM_regXMM() {
			TestAssembler(c => c.sha1msg1(xmm2, xmm3), Instruction.Create(Code.Sha1msg1_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sha1msg1_regXMM_m() {
			TestAssembler(c => c.sha1msg1(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha1msg1_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sha1msg2_regXMM_regXMM() {
			TestAssembler(c => c.sha1msg2(xmm2, xmm3), Instruction.Create(Code.Sha1msg2_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sha1msg2_regXMM_m() {
			TestAssembler(c => c.sha1msg2(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha1msg2_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sha1nexte_regXMM_regXMM() {
			TestAssembler(c => c.sha1nexte(xmm2, xmm3), Instruction.Create(Code.Sha1nexte_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sha1nexte_regXMM_m() {
			TestAssembler(c => c.sha1nexte(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha1nexte_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sha1rnds4_regXMM_regXMM_i() {
			TestAssembler(c => c.sha1rnds4(xmm2, xmm3, -5), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void sha1rnds4_regXMM_m_i() {
			TestAssembler(c => c.sha1rnds4(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void sha1rnds4_regXMM_regXMM_u() {
			TestAssembler(c => c.sha1rnds4(xmm2, xmm3, (byte)127), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void sha1rnds4_regXMM_m_u() {
			TestAssembler(c => c.sha1rnds4(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void sha256msg1_regXMM_regXMM() {
			TestAssembler(c => c.sha256msg1(xmm2, xmm3), Instruction.Create(Code.Sha256msg1_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sha256msg1_regXMM_m() {
			TestAssembler(c => c.sha256msg1(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha256msg1_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sha256msg2_regXMM_regXMM() {
			TestAssembler(c => c.sha256msg2(xmm2, xmm3), Instruction.Create(Code.Sha256msg2_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sha256msg2_regXMM_m() {
			TestAssembler(c => c.sha256msg2(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha256msg2_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sha256rnds2_regXMM_regXMM() {
			TestAssembler(c => c.sha256rnds2(xmm2, xmm3), Instruction.Create(Code.Sha256rnds2_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sha256rnds2_regXMM_m() {
			TestAssembler(c => c.sha256rnds2(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha256rnds2_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void shl_reg8_reg8() {
			TestAssembler(c => c.shl(dl, cl), Instruction.Create(Code.Shl_rm8_CL, dl, cl));
		}

		[Fact]
		public void shl_reg16_reg8() {
			TestAssembler(c => c.shl(dx, cl), Instruction.Create(Code.Shl_rm16_CL, dx, cl));
		}

		[Fact]
		public void shl_reg32_reg8() {
			TestAssembler(c => c.shl(edx, cl), Instruction.Create(Code.Shl_rm32_CL, edx, cl));
		}

		[Fact]
		public void shl_reg64_reg8() {
			TestAssembler(c => c.shl(rdx, cl), Instruction.Create(Code.Shl_rm64_CL, rdx, cl));
		}

		[Fact]
		public void shl_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.shl(__qword_ptr[rdx], cl), Instruction.Create(Code.Shl_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.shl(__dword_ptr[rdx], cl), Instruction.Create(Code.Shl_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.shl(__word_ptr[rdx], cl), Instruction.Create(Code.Shl_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.shl(__byte_ptr[rdx], cl), Instruction.Create(Code.Shl_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.shl(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Shl_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void shl_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dl, 1), Instruction.Create(Code.Shl_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.shl(dl, 2), Instruction.Create(Code.Shl_rm8_imm8, dl, 2));
		}

		[Fact]
		public void shl_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dx, 1), Instruction.Create(Code.Shl_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.shl(dx, 2), Instruction.Create(Code.Shl_rm16_imm8, dx, 2));
		}

		[Fact]
		public void shl_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(edx, 1), Instruction.Create(Code.Shl_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.shl(edx, 2), Instruction.Create(Code.Shl_rm32_imm8, edx, 2));
		}

		[Fact]
		public void shl_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(rdx, 1), Instruction.Create(Code.Shl_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.shl(rdx, 2), Instruction.Create(Code.Shl_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void shl_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.shl(__qword_ptr[rdx], 1), Instruction.Create(Code.Shl_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.shl(__dword_ptr[rdx], 1), Instruction.Create(Code.Shl_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.shl(__word_ptr[rdx], 1), Instruction.Create(Code.Shl_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.shl(__byte_ptr[rdx], 1), Instruction.Create(Code.Shl_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.shl(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Shl_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.shl(__qword_ptr[rdx], 2), Instruction.Create(Code.Shl_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.shl(__dword_ptr[rdx], 2), Instruction.Create(Code.Shl_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.shl(__word_ptr[rdx], 2), Instruction.Create(Code.Shl_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.shl(__byte_ptr[rdx], 2), Instruction.Create(Code.Shl_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.shl(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Shl_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void shl_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dl, (byte)1), Instruction.Create(Code.Shl_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shl(dl, (byte)2), Instruction.Create(Code.Shl_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void shl_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dx, (byte)1), Instruction.Create(Code.Shl_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shl(dx, (byte)2), Instruction.Create(Code.Shl_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void shl_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(edx, (byte)1), Instruction.Create(Code.Shl_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shl(edx, (byte)2), Instruction.Create(Code.Shl_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void shl_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(rdx, (byte)1), Instruction.Create(Code.Shl_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shl(rdx, (byte)2), Instruction.Create(Code.Shl_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void shl_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.shl(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.shl(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.shl(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.shl(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.shl(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.shl(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.shl(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.shl(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void shld_reg16_reg16_reg8() {
			TestAssembler(c => c.shld(dx, bx, cl), Instruction.Create(Code.Shld_rm16_r16_CL, dx, bx, cl));
		}

		[Fact]
		public void shld_m_reg16_reg8() {
			TestAssembler(c => c.shld(__word_ptr[rcx], bx, cl), Instruction.Create(Code.Shld_rm16_r16_CL, __word_ptr[rcx].ToMemoryOperand(Bitness), bx, cl));
		}

		[Fact]
		public void shld_reg32_reg32_reg8() {
			TestAssembler(c => c.shld(edx, ebx, cl), Instruction.Create(Code.Shld_rm32_r32_CL, edx, ebx, cl));
		}

		[Fact]
		public void shld_m_reg32_reg8() {
			TestAssembler(c => c.shld(__dword_ptr[rcx], ebx, cl), Instruction.Create(Code.Shld_rm32_r32_CL, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx, cl));
		}

		[Fact]
		public void shld_reg64_reg64_reg8() {
			TestAssembler(c => c.shld(rdx, rbx, cl), Instruction.Create(Code.Shld_rm64_r64_CL, rdx, rbx, cl));
		}

		[Fact]
		public void shld_m_reg64_reg8() {
			TestAssembler(c => c.shld(__qword_ptr[rcx], rbx, cl), Instruction.Create(Code.Shld_rm64_r64_CL, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx, cl));
		}

		[Fact]
		public void shld_reg16_reg16_i() {
			TestAssembler(c => c.shld(dx, bx, -5), Instruction.Create(Code.Shld_rm16_r16_imm8, dx, bx, -5));
		}

		[Fact]
		public void shld_m_reg16_i() {
			TestAssembler(c => c.shld(__word_ptr[rcx], bx, -5), Instruction.Create(Code.Shld_rm16_r16_imm8, __word_ptr[rcx].ToMemoryOperand(Bitness), bx, -5));
		}

		[Fact]
		public void shld_reg32_reg32_i() {
			TestAssembler(c => c.shld(edx, ebx, -5), Instruction.Create(Code.Shld_rm32_r32_imm8, edx, ebx, -5));
		}

		[Fact]
		public void shld_m_reg32_i() {
			TestAssembler(c => c.shld(__dword_ptr[rcx], ebx, -5), Instruction.Create(Code.Shld_rm32_r32_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx, -5));
		}

		[Fact]
		public void shld_reg64_reg64_i() {
			TestAssembler(c => c.shld(rdx, rbx, -5), Instruction.Create(Code.Shld_rm64_r64_imm8, rdx, rbx, -5));
		}

		[Fact]
		public void shld_m_reg64_i() {
			TestAssembler(c => c.shld(__qword_ptr[rcx], rbx, -5), Instruction.Create(Code.Shld_rm64_r64_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx, -5));
		}

		[Fact]
		public void shld_reg16_reg16_u() {
			TestAssembler(c => c.shld(dx, bx, (byte)127), Instruction.Create(Code.Shld_rm16_r16_imm8, dx, bx, (uint)(byte)127));
		}

		[Fact]
		public void shld_m_reg16_u() {
			TestAssembler(c => c.shld(__word_ptr[rcx], bx, (byte)127), Instruction.Create(Code.Shld_rm16_r16_imm8, __word_ptr[rcx].ToMemoryOperand(Bitness), bx, (uint)(byte)127));
		}

		[Fact]
		public void shld_reg32_reg32_u() {
			TestAssembler(c => c.shld(edx, ebx, (byte)127), Instruction.Create(Code.Shld_rm32_r32_imm8, edx, ebx, (uint)(byte)127));
		}

		[Fact]
		public void shld_m_reg32_u() {
			TestAssembler(c => c.shld(__dword_ptr[rcx], ebx, (byte)127), Instruction.Create(Code.Shld_rm32_r32_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx, (uint)(byte)127));
		}

		[Fact]
		public void shld_reg64_reg64_u() {
			TestAssembler(c => c.shld(rdx, rbx, (byte)127), Instruction.Create(Code.Shld_rm64_r64_imm8, rdx, rbx, (uint)(byte)127));
		}

		[Fact]
		public void shld_m_reg64_u() {
			TestAssembler(c => c.shld(__qword_ptr[rcx], rbx, (byte)127), Instruction.Create(Code.Shld_rm64_r64_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx, (uint)(byte)127));
		}

#if !NO_VEX
		[Fact]
		public void shlx_reg32_reg32_reg32() {
			TestAssembler(c => c.shlx(edx, ebx, esp), Instruction.Create(Code.VEX_Shlx_r32_rm32_r32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void shlx_reg32_m_reg32() {
			TestAssembler(c => c.shlx(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Shlx_r32_rm32_r32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void shlx_reg64_reg64_reg64() {
			TestAssembler(c => c.shlx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Shlx_r64_rm64_r64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void shlx_reg64_m_reg64() {
			TestAssembler(c => c.shlx(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Shlx_r64_rm64_r64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), rsp));
		}
#endif

		[Fact]
		public void shr_reg8_reg8() {
			TestAssembler(c => c.shr(dl, cl), Instruction.Create(Code.Shr_rm8_CL, dl, cl));
		}

		[Fact]
		public void shr_reg16_reg8() {
			TestAssembler(c => c.shr(dx, cl), Instruction.Create(Code.Shr_rm16_CL, dx, cl));
		}

		[Fact]
		public void shr_reg32_reg8() {
			TestAssembler(c => c.shr(edx, cl), Instruction.Create(Code.Shr_rm32_CL, edx, cl));
		}

		[Fact]
		public void shr_reg64_reg8() {
			TestAssembler(c => c.shr(rdx, cl), Instruction.Create(Code.Shr_rm64_CL, rdx, cl));
		}

		[Fact]
		public void shr_m_reg8() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.shr(__qword_ptr[rdx], cl), Instruction.Create(Code.Shr_rm64_CL, __qword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.shr(__dword_ptr[rdx], cl), Instruction.Create(Code.Shr_rm32_CL, __dword_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.shr(__word_ptr[rdx], cl), Instruction.Create(Code.Shr_rm16_CL, __word_ptr[rdx].ToMemoryOperand(Bitness), cl));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.shr(__byte_ptr[rdx], cl), Instruction.Create(Code.Shr_rm8_CL, __byte_ptr[rdx].ToMemoryOperand(Bitness), cl));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.shr(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Shr_rm8_CL, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), cl));
				});
			}
		}

		[Fact]
		public void shr_reg8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dl, 1), Instruction.Create(Code.Shr_rm8_1, dl, 1));
			} /* else */ TestAssembler(c => c.shr(dl, 2), Instruction.Create(Code.Shr_rm8_imm8, dl, 2));
		}

		[Fact]
		public void shr_reg16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dx, 1), Instruction.Create(Code.Shr_rm16_1, dx, 1));
			} /* else */ TestAssembler(c => c.shr(dx, 2), Instruction.Create(Code.Shr_rm16_imm8, dx, 2));
		}

		[Fact]
		public void shr_reg32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(edx, 1), Instruction.Create(Code.Shr_rm32_1, edx, 1));
			} /* else */ TestAssembler(c => c.shr(edx, 2), Instruction.Create(Code.Shr_rm32_imm8, edx, 2));
		}

		[Fact]
		public void shr_reg64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(rdx, 1), Instruction.Create(Code.Shr_rm64_1, rdx, 1));
			} /* else */ TestAssembler(c => c.shr(rdx, 2), Instruction.Create(Code.Shr_rm64_imm8, rdx, 2));
		}

		[Fact]
		public void shr_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.shr(__qword_ptr[rdx], 1), Instruction.Create(Code.Shr_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.shr(__dword_ptr[rdx], 1), Instruction.Create(Code.Shr_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.shr(__word_ptr[rdx], 1), Instruction.Create(Code.Shr_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.shr(__byte_ptr[rdx], 1), Instruction.Create(Code.Shr_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), 1));
				}
				{
					AssertInvalid( () => {
						TestAssembler(c => c.shr(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Shr_rm8_1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.shr(__qword_ptr[rdx], 2), Instruction.Create(Code.Shr_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.shr(__dword_ptr[rdx], 2), Instruction.Create(Code.Shr_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.shr(__word_ptr[rdx], 2), Instruction.Create(Code.Shr_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.shr(__byte_ptr[rdx], 2), Instruction.Create(Code.Shr_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), 2));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.shr(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Shr_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), 2));
				});
			}
		}

		[Fact]
		public void shr_reg8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dl, (byte)1), Instruction.Create(Code.Shr_rm8_1, dl, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shr(dl, (byte)2), Instruction.Create(Code.Shr_rm8_imm8, dl, (uint)(byte)2));
		}

		[Fact]
		public void shr_reg16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dx, (byte)1), Instruction.Create(Code.Shr_rm16_1, dx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shr(dx, (byte)2), Instruction.Create(Code.Shr_rm16_imm8, dx, (uint)(byte)2));
		}

		[Fact]
		public void shr_reg32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(edx, (byte)1), Instruction.Create(Code.Shr_rm32_1, edx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shr(edx, (byte)2), Instruction.Create(Code.Shr_rm32_imm8, edx, (uint)(byte)2));
		}

		[Fact]
		public void shr_reg64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(rdx, (byte)1), Instruction.Create(Code.Shr_rm64_1, rdx, (uint)(byte)1));
			} /* else */ TestAssembler(c => c.shr(rdx, (byte)2), Instruction.Create(Code.Shr_rm64_imm8, rdx, (uint)(byte)2));
		}

		[Fact]
		public void shr_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
					TestAssembler(c => c.shr(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm64_1, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
					TestAssembler(c => c.shr(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm32_1, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
					TestAssembler(c => c.shr(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm16_1, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
					TestAssembler(c => c.shr(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm8_1, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)1));
				}
				{
					// Already tested by signed version
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.shr(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.shr(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.shr(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.shr(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)2));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void shrd_reg16_reg16_reg8() {
			TestAssembler(c => c.shrd(dx, bx, cl), Instruction.Create(Code.Shrd_rm16_r16_CL, dx, bx, cl));
		}

		[Fact]
		public void shrd_m_reg16_reg8() {
			TestAssembler(c => c.shrd(__word_ptr[rcx], bx, cl), Instruction.Create(Code.Shrd_rm16_r16_CL, __word_ptr[rcx].ToMemoryOperand(Bitness), bx, cl));
		}

		[Fact]
		public void shrd_reg32_reg32_reg8() {
			TestAssembler(c => c.shrd(edx, ebx, cl), Instruction.Create(Code.Shrd_rm32_r32_CL, edx, ebx, cl));
		}

		[Fact]
		public void shrd_m_reg32_reg8() {
			TestAssembler(c => c.shrd(__dword_ptr[rcx], ebx, cl), Instruction.Create(Code.Shrd_rm32_r32_CL, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx, cl));
		}

		[Fact]
		public void shrd_reg64_reg64_reg8() {
			TestAssembler(c => c.shrd(rdx, rbx, cl), Instruction.Create(Code.Shrd_rm64_r64_CL, rdx, rbx, cl));
		}

		[Fact]
		public void shrd_m_reg64_reg8() {
			TestAssembler(c => c.shrd(__qword_ptr[rcx], rbx, cl), Instruction.Create(Code.Shrd_rm64_r64_CL, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx, cl));
		}

		[Fact]
		public void shrd_reg16_reg16_i() {
			TestAssembler(c => c.shrd(dx, bx, -5), Instruction.Create(Code.Shrd_rm16_r16_imm8, dx, bx, -5));
		}

		[Fact]
		public void shrd_m_reg16_i() {
			TestAssembler(c => c.shrd(__word_ptr[rcx], bx, -5), Instruction.Create(Code.Shrd_rm16_r16_imm8, __word_ptr[rcx].ToMemoryOperand(Bitness), bx, -5));
		}

		[Fact]
		public void shrd_reg32_reg32_i() {
			TestAssembler(c => c.shrd(edx, ebx, -5), Instruction.Create(Code.Shrd_rm32_r32_imm8, edx, ebx, -5));
		}

		[Fact]
		public void shrd_m_reg32_i() {
			TestAssembler(c => c.shrd(__dword_ptr[rcx], ebx, -5), Instruction.Create(Code.Shrd_rm32_r32_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx, -5));
		}

		[Fact]
		public void shrd_reg64_reg64_i() {
			TestAssembler(c => c.shrd(rdx, rbx, -5), Instruction.Create(Code.Shrd_rm64_r64_imm8, rdx, rbx, -5));
		}

		[Fact]
		public void shrd_m_reg64_i() {
			TestAssembler(c => c.shrd(__qword_ptr[rcx], rbx, -5), Instruction.Create(Code.Shrd_rm64_r64_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx, -5));
		}

		[Fact]
		public void shrd_reg16_reg16_u() {
			TestAssembler(c => c.shrd(dx, bx, (byte)127), Instruction.Create(Code.Shrd_rm16_r16_imm8, dx, bx, (uint)(byte)127));
		}

		[Fact]
		public void shrd_m_reg16_u() {
			TestAssembler(c => c.shrd(__word_ptr[rcx], bx, (byte)127), Instruction.Create(Code.Shrd_rm16_r16_imm8, __word_ptr[rcx].ToMemoryOperand(Bitness), bx, (uint)(byte)127));
		}

		[Fact]
		public void shrd_reg32_reg32_u() {
			TestAssembler(c => c.shrd(edx, ebx, (byte)127), Instruction.Create(Code.Shrd_rm32_r32_imm8, edx, ebx, (uint)(byte)127));
		}

		[Fact]
		public void shrd_m_reg32_u() {
			TestAssembler(c => c.shrd(__dword_ptr[rcx], ebx, (byte)127), Instruction.Create(Code.Shrd_rm32_r32_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx, (uint)(byte)127));
		}

		[Fact]
		public void shrd_reg64_reg64_u() {
			TestAssembler(c => c.shrd(rdx, rbx, (byte)127), Instruction.Create(Code.Shrd_rm64_r64_imm8, rdx, rbx, (uint)(byte)127));
		}

		[Fact]
		public void shrd_m_reg64_u() {
			TestAssembler(c => c.shrd(__qword_ptr[rcx], rbx, (byte)127), Instruction.Create(Code.Shrd_rm64_r64_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx, (uint)(byte)127));
		}

#if !NO_VEX
		[Fact]
		public void shrx_reg32_reg32_reg32() {
			TestAssembler(c => c.shrx(edx, ebx, esp), Instruction.Create(Code.VEX_Shrx_r32_rm32_r32, edx, ebx, esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void shrx_reg32_m_reg32() {
			TestAssembler(c => c.shrx(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Shrx_r32_rm32_r32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness), esp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void shrx_reg64_reg64_reg64() {
			TestAssembler(c => c.shrx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Shrx_r64_rm64_r64, rdx, rbx, rsp));
		}
#endif

#if !NO_VEX
		[Fact]
		public void shrx_reg64_m_reg64() {
			TestAssembler(c => c.shrx(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Shrx_r64_rm64_r64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness), rsp));
		}
#endif

		[Fact]
		public void shufpd_regXMM_regXMM_i() {
			TestAssembler(c => c.shufpd(xmm2, xmm3, -5), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void shufpd_regXMM_m_i() {
			TestAssembler(c => c.shufpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void shufpd_regXMM_regXMM_u() {
			TestAssembler(c => c.shufpd(xmm2, xmm3, (byte)127), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void shufpd_regXMM_m_u() {
			TestAssembler(c => c.shufpd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void shufps_regXMM_regXMM_i() {
			TestAssembler(c => c.shufps(xmm2, xmm3, -5), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}

		[Fact]
		public void shufps_regXMM_m_i() {
			TestAssembler(c => c.shufps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}

		[Fact]
		public void shufps_regXMM_regXMM_u() {
			TestAssembler(c => c.shufps(xmm2, xmm3, (byte)127), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}

		[Fact]
		public void shufps_regXMM_m_u() {
			TestAssembler(c => c.shufps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}

		[Fact]
		public void sidt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.sidt(__[rcx]), Instruction.Create(Code.Sidt_m1664, __[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void skinit() {
			TestAssembler(c => c.skinit(), Instruction.Create(Code.Skinit));
		}

		[Fact]
		public void sldt_reg16() {
			TestAssembler(c => c.sldt(dx), Instruction.Create(Code.Sldt_rm16, dx));
		}

		[Fact]
		public void sldt_reg32() {
			TestAssembler(c => c.sldt(edx), Instruction.Create(Code.Sldt_r32m16, edx));
		}

		[Fact]
		public void sldt_reg64() {
			TestAssembler(c => c.sldt(rdx), Instruction.Create(Code.Sldt_r64m16, rdx));
		}

		[Fact]
		public void sldt_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.sldt(__dword_ptr[rcx]), Instruction.Create(Code.Sldt_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

#if !NO_XOP
		[Fact]
		public void slwpcb_reg32() {
			TestAssembler(c => c.slwpcb(edx), Instruction.Create(Code.XOP_Slwpcb_r32, edx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void slwpcb_reg64() {
			TestAssembler(c => c.slwpcb(rdx), Instruction.Create(Code.XOP_Slwpcb_r64, rdx));
		}
#endif

		[Fact]
		public void smsw_reg16() {
			TestAssembler(c => c.smsw(dx), Instruction.Create(Code.Smsw_rm16, dx));
		}

		[Fact]
		public void smsw_reg32() {
			TestAssembler(c => c.smsw(edx), Instruction.Create(Code.Smsw_r32m16, edx));
		}

		[Fact]
		public void smsw_reg64() {
			TestAssembler(c => c.smsw(rdx), Instruction.Create(Code.Smsw_r64m16, rdx));
		}

		[Fact]
		public void smsw_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.smsw(__dword_ptr[rcx]), Instruction.Create(Code.Smsw_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void sqrtpd_regXMM_regXMM() {
			TestAssembler(c => c.sqrtpd(xmm2, xmm3), Instruction.Create(Code.Sqrtpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sqrtpd_regXMM_m() {
			TestAssembler(c => c.sqrtpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sqrtps_regXMM_regXMM() {
			TestAssembler(c => c.sqrtps(xmm2, xmm3), Instruction.Create(Code.Sqrtps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void sqrtps_regXMM_m() {
			TestAssembler(c => c.sqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sqrtsd_regXMM_regXMM() {
			TestAssembler(c => c.sqrtsd(xmm2, xmm3), Instruction.Create(Code.Sqrtsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void sqrtsd_regXMM_m() {
			TestAssembler(c => c.sqrtsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sqrtss_regXMM_regXMM() {
			TestAssembler(c => c.sqrtss(xmm2, xmm3), Instruction.Create(Code.Sqrtss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void sqrtss_regXMM_m() {
			TestAssembler(c => c.sqrtss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void stac() {
			TestAssembler(c => c.stac(), Instruction.Create(Code.Stac));
		}

		[Fact]
		public void stc() {
			TestAssembler(c => c.stc(), Instruction.Create(Code.Stc));
		}

		[Fact]
		public void std() {
			TestAssembler(c => c.std(), Instruction.Create(Code.Std));
		}

		[Fact]
		public void stgi() {
			TestAssembler(c => c.stgi(), Instruction.Create(Code.Stgi));
		}

		[Fact]
		public void sti() {
			TestAssembler(c => c.sti(), Instruction.Create(Code.Sti));
		}

		[Fact]
		public void stmxcsr_m() {
			TestAssembler(c => c.stmxcsr(__[rcx]), Instruction.Create(Code.Stmxcsr_m32, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void stosb() {
			TestAssembler(c => c.stosb(), Instruction.CreateStosb(Bitness));
		}

		[Fact]
		public void stosd() {
			TestAssembler(c => c.stosd(), Instruction.CreateStosd(Bitness));
		}

		[Fact]
		public void stosq() {
			TestAssembler(c => c.stosq(), Instruction.CreateStosq(Bitness));
		}

		[Fact]
		public void stosw() {
			TestAssembler(c => c.stosw(), Instruction.CreateStosw(Bitness));
		}

		[Fact]
		public void str_reg16() {
			TestAssembler(c => c.str(dx), Instruction.Create(Code.Str_rm16, dx));
		}

		[Fact]
		public void str_reg32() {
			TestAssembler(c => c.str(edx), Instruction.Create(Code.Str_r32m16, edx));
		}

		[Fact]
		public void str_reg64() {
			TestAssembler(c => c.str(rdx), Instruction.Create(Code.Str_r64m16, rdx));
		}

		[Fact]
		public void str_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.str(__dword_ptr[rcx]), Instruction.Create(Code.Str_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

#if !NO_VEX
		[Fact]
		public void sttilecfg_m() {
			TestAssembler(c => c.sttilecfg(__[rcx]), Instruction.Create(Code.VEX_Sttilecfg_m512, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void stui() {
			TestAssembler(c => c.stui(), Instruction.Create(Code.Stui));
		}

		[Fact]
		public void sub_reg8_reg8() {
			TestAssembler(c => c.sub(dl, bl), Instruction.Create(Code.Sub_rm8_r8, dl, bl));
		}

		[Fact]
		public void sub_m_reg8() {
			TestAssembler(c => c.sub(__byte_ptr[rcx], bl), Instruction.Create(Code.Sub_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void sub_reg16_reg16() {
			TestAssembler(c => c.sub(dx, bx), Instruction.Create(Code.Sub_rm16_r16, dx, bx));
		}

		[Fact]
		public void sub_m_reg16() {
			TestAssembler(c => c.sub(__word_ptr[rcx], bx), Instruction.Create(Code.Sub_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void sub_reg32_reg32() {
			TestAssembler(c => c.sub(edx, ebx), Instruction.Create(Code.Sub_rm32_r32, edx, ebx));
		}

		[Fact]
		public void sub_m_reg32() {
			TestAssembler(c => c.sub(__dword_ptr[rcx], ebx), Instruction.Create(Code.Sub_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void sub_reg64_reg64() {
			TestAssembler(c => c.sub(rdx, rbx), Instruction.Create(Code.Sub_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void sub_m_reg64() {
			TestAssembler(c => c.sub(__qword_ptr[rcx], rbx), Instruction.Create(Code.Sub_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void sub_reg8_m() {
			TestAssembler(c => c.sub(dl, __byte_ptr[rcx]), Instruction.Create(Code.Sub_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sub_reg16_m() {
			TestAssembler(c => c.sub(dx, __word_ptr[rcx]), Instruction.Create(Code.Sub_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sub_reg32_m() {
			TestAssembler(c => c.sub(edx, __dword_ptr[rcx]), Instruction.Create(Code.Sub_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sub_reg64_m() {
			TestAssembler(c => c.sub(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Sub_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void sub_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sub(al, -5), Instruction.Create(Code.Sub_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.sub(dl, -5), Instruction.Create(Code.Sub_rm8_imm8, dl, -5));
		}

		[Fact]
		public void sub_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sub(ax, 16567), Instruction.Create(Code.Sub_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sub(dx, sbyte.MinValue), Instruction.Create(Code.Sub_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.sub(dx, sbyte.MaxValue), Instruction.Create(Code.Sub_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.sub(dx, 16567), Instruction.Create(Code.Sub_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void sub_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sub(eax, int.MaxValue), Instruction.Create(Code.Sub_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sub(edx, sbyte.MinValue), Instruction.Create(Code.Sub_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.sub(edx, sbyte.MaxValue), Instruction.Create(Code.Sub_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.sub(edx, int.MaxValue), Instruction.Create(Code.Sub_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void sub_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.sub(rax, int.MinValue), Instruction.Create(Code.Sub_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sub(rdx, sbyte.MinValue), Instruction.Create(Code.Sub_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.sub(rdx, sbyte.MaxValue), Instruction.Create(Code.Sub_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.sub(rdx, int.MinValue), Instruction.Create(Code.Sub_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void sub_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sub(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Sub_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.sub(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Sub_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.sub(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Sub_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sub(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Sub_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.sub(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Sub_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.sub(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Sub_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sub(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Sub_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.sub(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Sub_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.sub(__word_ptr[rdx], 16567), Instruction.Create(Code.Sub_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sub(__byte_ptr[rdx], -5), Instruction.Create(Code.Sub_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.sub(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Sub_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void sub_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sub(al, (byte)127), Instruction.Create(Code.Sub_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.sub(dl, (byte)127), Instruction.Create(Code.Sub_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void sub_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sub(ax, (ushort)16567), Instruction.Create(Code.Sub_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.sub(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Sub_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.sub(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Sub_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.sub(dx, (ushort)16567), Instruction.Create(Code.Sub_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void sub_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sub(eax, (uint)int.MaxValue), Instruction.Create(Code.Sub_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.sub(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Sub_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.sub(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Sub_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.sub(edx, (uint)int.MaxValue), Instruction.Create(Code.Sub_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void sub_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.sub(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Sub_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.sub(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Sub_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.sub(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Sub_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.sub(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Sub_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.sub(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Sub_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.sub(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Sub_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.sub(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Sub_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void subpd_regXMM_regXMM() {
			TestAssembler(c => c.subpd(xmm2, xmm3), Instruction.Create(Code.Subpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void subpd_regXMM_m() {
			TestAssembler(c => c.subpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void subps_regXMM_regXMM() {
			TestAssembler(c => c.subps(xmm2, xmm3), Instruction.Create(Code.Subps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void subps_regXMM_m() {
			TestAssembler(c => c.subps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void subsd_regXMM_regXMM() {
			TestAssembler(c => c.subsd(xmm2, xmm3), Instruction.Create(Code.Subsd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void subsd_regXMM_m() {
			TestAssembler(c => c.subsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void subss_regXMM_regXMM() {
			TestAssembler(c => c.subss(xmm2, xmm3), Instruction.Create(Code.Subss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void subss_regXMM_m() {
			TestAssembler(c => c.subss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void swapgs() {
			TestAssembler(c => c.swapgs(), Instruction.Create(Code.Swapgs));
		}

		[Fact]
		public void syscall() {
			TestAssembler(c => c.syscall(), Instruction.Create(Code.Syscall));
		}

		[Fact]
		public void sysenter() {
			TestAssembler(c => c.sysenter(), Instruction.Create(Code.Sysenter));
		}

		[Fact]
		public void sysexit() {
			TestAssembler(c => c.sysexit(), Instruction.Create(Code.Sysexitd));
		}

		[Fact]
		public void sysexitq() {
			TestAssembler(c => c.sysexitq(), Instruction.Create(Code.Sysexitq));
		}

		[Fact]
		public void sysret() {
			TestAssembler(c => c.sysret(), Instruction.Create(Code.Sysretd));
		}

		[Fact]
		public void sysretq() {
			TestAssembler(c => c.sysretq(), Instruction.Create(Code.Sysretq));
		}

#if !NO_XOP
		[Fact]
		public void t1mskc_reg32_reg32() {
			TestAssembler(c => c.t1mskc(edx, ebx), Instruction.Create(Code.XOP_T1mskc_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void t1mskc_reg64_reg64() {
			TestAssembler(c => c.t1mskc(rdx, rbx), Instruction.Create(Code.XOP_T1mskc_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void t1mskc_reg32_m() {
			TestAssembler(c => c.t1mskc(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_T1mskc_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void t1mskc_reg64_m() {
			TestAssembler(c => c.t1mskc(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_T1mskc_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void tdcall() {
			TestAssembler(c => c.tdcall(), Instruction.Create(Code.Tdcall));
		}

#if !NO_VEX
		[Fact]
		public void tdpbf16ps_regTMM_regTMM_regTMM() {
			TestAssembler(c => c.tdpbf16ps(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbf16ps_tmm_tmm_tmm, tmm2, tmm3, tmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tdpbssd_regTMM_regTMM_regTMM() {
			TestAssembler(c => c.tdpbssd(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbssd_tmm_tmm_tmm, tmm2, tmm3, tmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tdpbsud_regTMM_regTMM_regTMM() {
			TestAssembler(c => c.tdpbsud(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbsud_tmm_tmm_tmm, tmm2, tmm3, tmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tdpbusd_regTMM_regTMM_regTMM() {
			TestAssembler(c => c.tdpbusd(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbusd_tmm_tmm_tmm, tmm2, tmm3, tmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tdpbuud_regTMM_regTMM_regTMM() {
			TestAssembler(c => c.tdpbuud(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbuud_tmm_tmm_tmm, tmm2, tmm3, tmm4));
		}
#endif

		[Fact]
		public void test_reg8_reg8() {
			TestAssembler(c => c.test(dl, bl), Instruction.Create(Code.Test_rm8_r8, dl, bl));
		}

		[Fact]
		public void test_m_reg8() {
			TestAssembler(c => c.test(__byte_ptr[rcx], bl), Instruction.Create(Code.Test_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void test_reg16_reg16() {
			TestAssembler(c => c.test(dx, bx), Instruction.Create(Code.Test_rm16_r16, dx, bx));
		}

		[Fact]
		public void test_m_reg16() {
			TestAssembler(c => c.test(__word_ptr[rcx], bx), Instruction.Create(Code.Test_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void test_reg32_reg32() {
			TestAssembler(c => c.test(edx, ebx), Instruction.Create(Code.Test_rm32_r32, edx, ebx));
		}

		[Fact]
		public void test_m_reg32() {
			TestAssembler(c => c.test(__dword_ptr[rcx], ebx), Instruction.Create(Code.Test_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void test_reg64_reg64() {
			TestAssembler(c => c.test(rdx, rbx), Instruction.Create(Code.Test_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void test_m_reg64() {
			TestAssembler(c => c.test(__qword_ptr[rcx], rbx), Instruction.Create(Code.Test_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void test_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.test(al, -5), Instruction.Create(Code.Test_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.test(dl, -5), Instruction.Create(Code.Test_rm8_imm8, dl, -5));
		}

		[Fact]
		public void test_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.test(ax, 16567), Instruction.Create(Code.Test_AX_imm16, ax, 16567));
			} /* else */ TestAssembler(c => c.test(dx, 16567), Instruction.Create(Code.Test_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void test_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.test(eax, int.MaxValue), Instruction.Create(Code.Test_EAX_imm32, eax, int.MaxValue));
			} /* else */ TestAssembler(c => c.test(edx, int.MaxValue), Instruction.Create(Code.Test_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void test_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.test(rax, int.MinValue), Instruction.Create(Code.Test_RAX_imm32, rax, int.MinValue));
			} /* else */ TestAssembler(c => c.test(rdx, int.MinValue), Instruction.Create(Code.Test_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void test_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.test(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Test_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.test(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Test_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.test(__word_ptr[rdx], 16567), Instruction.Create(Code.Test_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.test(__byte_ptr[rdx], -5), Instruction.Create(Code.Test_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.test(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Test_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void test_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.test(al, (byte)127), Instruction.Create(Code.Test_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.test(dl, (byte)127), Instruction.Create(Code.Test_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void test_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.test(ax, (ushort)16567), Instruction.Create(Code.Test_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ TestAssembler(c => c.test(dx, (ushort)16567), Instruction.Create(Code.Test_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void test_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.test(eax, (uint)int.MaxValue), Instruction.Create(Code.Test_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ TestAssembler(c => c.test(edx, (uint)int.MaxValue), Instruction.Create(Code.Test_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void test_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.test(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Test_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				TestAssembler(c => c.test(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Test_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.test(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Test_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void testui() {
			TestAssembler(c => c.testui(), Instruction.Create(Code.Testui));
		}

#if !NO_VEX
		[Fact]
		public void tileloadd_regTMM_m() {
			TestAssembler(c => c.tileloadd(tmm2, __[rcx+rdx*4]), Instruction.Create(Code.VEX_Tileloadd_tmm_sibmem, tmm2, __[rcx+rdx*4].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tileloaddt1_regTMM_m() {
			TestAssembler(c => c.tileloaddt1(tmm2, __[rcx+rdx*4]), Instruction.Create(Code.VEX_Tileloaddt1_tmm_sibmem, tmm2, __[rcx+rdx*4].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tilerelease() {
			TestAssembler(c => c.tilerelease(), Instruction.Create(Code.VEX_Tilerelease));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tilestored_m_regTMM() {
			TestAssembler(c => c.tilestored(__[rcx+rdx*4], tmm3), Instruction.Create(Code.VEX_Tilestored_sibmem_tmm, __[rcx+rdx*4].ToMemoryOperand(Bitness), tmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void tilezero_regTMM() {
			TestAssembler(c => c.tilezero(tmm2), Instruction.Create(Code.VEX_Tilezero_tmm, tmm2));
		}
#endif

		[Fact]
		public void tlbsync() {
			TestAssembler(c => c.tlbsync(), Instruction.Create(Code.Tlbsync));
		}

		[Fact]
		public void tpause_reg32() {
			TestAssembler(c => c.tpause(edx), Instruction.Create(Code.Tpause_r32, edx));
		}

		[Fact]
		public void tpause_reg64() {
			TestAssembler(c => c.tpause(rdx), Instruction.Create(Code.Tpause_r64, rdx));
		}

		[Fact]
		public void tzcnt_reg16_reg16() {
			TestAssembler(c => c.tzcnt(dx, bx), Instruction.Create(Code.Tzcnt_r16_rm16, dx, bx));
		}

		[Fact]
		public void tzcnt_reg32_reg32() {
			TestAssembler(c => c.tzcnt(edx, ebx), Instruction.Create(Code.Tzcnt_r32_rm32, edx, ebx));
		}

		[Fact]
		public void tzcnt_reg64_reg64() {
			TestAssembler(c => c.tzcnt(rdx, rbx), Instruction.Create(Code.Tzcnt_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void tzcnt_reg16_m() {
			TestAssembler(c => c.tzcnt(dx, __word_ptr[rcx]), Instruction.Create(Code.Tzcnt_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void tzcnt_reg32_m() {
			TestAssembler(c => c.tzcnt(edx, __dword_ptr[rcx]), Instruction.Create(Code.Tzcnt_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void tzcnt_reg64_m() {
			TestAssembler(c => c.tzcnt(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Tzcnt_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_XOP
		[Fact]
		public void tzmsk_reg32_reg32() {
			TestAssembler(c => c.tzmsk(edx, ebx), Instruction.Create(Code.XOP_Tzmsk_r32_rm32, edx, ebx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void tzmsk_reg64_reg64() {
			TestAssembler(c => c.tzmsk(rdx, rbx), Instruction.Create(Code.XOP_Tzmsk_r64_rm64, rdx, rbx));
		}
#endif

#if !NO_XOP
		[Fact]
		public void tzmsk_reg32_m() {
			TestAssembler(c => c.tzmsk(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Tzmsk_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void tzmsk_reg64_m() {
			TestAssembler(c => c.tzmsk(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Tzmsk_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

		[Fact]
		public void ucomisd_regXMM_regXMM() {
			TestAssembler(c => c.ucomisd(xmm2, xmm3), Instruction.Create(Code.Ucomisd_xmm_xmmm64, xmm2, xmm3));
		}

		[Fact]
		public void ucomisd_regXMM_m() {
			TestAssembler(c => c.ucomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Ucomisd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ucomiss_regXMM_regXMM() {
			TestAssembler(c => c.ucomiss(xmm2, xmm3), Instruction.Create(Code.Ucomiss_xmm_xmmm32, xmm2, xmm3));
		}

		[Fact]
		public void ucomiss_regXMM_m() {
			TestAssembler(c => c.ucomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Ucomiss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud0() {
			TestAssembler(c => c.ud0(), Instruction.Create(Code.Ud0));
		}

		[Fact]
		public void ud0_reg16_reg16() {
			TestAssembler(c => c.ud0(dx, bx), Instruction.Create(Code.Ud0_r16_rm16, dx, bx));
		}

		[Fact]
		public void ud0_reg32_reg32() {
			TestAssembler(c => c.ud0(edx, ebx), Instruction.Create(Code.Ud0_r32_rm32, edx, ebx));
		}

		[Fact]
		public void ud0_reg64_reg64() {
			TestAssembler(c => c.ud0(rdx, rbx), Instruction.Create(Code.Ud0_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void ud0_reg16_m() {
			TestAssembler(c => c.ud0(dx, __word_ptr[rcx]), Instruction.Create(Code.Ud0_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud0_reg32_m() {
			TestAssembler(c => c.ud0(edx, __dword_ptr[rcx]), Instruction.Create(Code.Ud0_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud0_reg64_m() {
			TestAssembler(c => c.ud0(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Ud0_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud1_reg16_reg16() {
			TestAssembler(c => c.ud1(dx, bx), Instruction.Create(Code.Ud1_r16_rm16, dx, bx));
		}

		[Fact]
		public void ud1_reg32_reg32() {
			TestAssembler(c => c.ud1(edx, ebx), Instruction.Create(Code.Ud1_r32_rm32, edx, ebx));
		}

		[Fact]
		public void ud1_reg64_reg64() {
			TestAssembler(c => c.ud1(rdx, rbx), Instruction.Create(Code.Ud1_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void ud1_reg16_m() {
			TestAssembler(c => c.ud1(dx, __word_ptr[rcx]), Instruction.Create(Code.Ud1_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud1_reg32_m() {
			TestAssembler(c => c.ud1(edx, __dword_ptr[rcx]), Instruction.Create(Code.Ud1_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud1_reg64_m() {
			TestAssembler(c => c.ud1(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Ud1_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void ud2() {
			TestAssembler(c => c.ud2(), Instruction.Create(Code.Ud2));
		}

		[Fact]
		public void uiret() {
			TestAssembler(c => c.uiret(), Instruction.Create(Code.Uiret));
		}

		[Fact]
		public void umonitor_reg32() {
			TestAssembler(c => c.umonitor(edx), Instruction.Create(Code.Umonitor_r32, edx));
		}

		[Fact]
		public void umonitor_reg64() {
			TestAssembler(c => c.umonitor(rdx), Instruction.Create(Code.Umonitor_r64, rdx));
		}

		[Fact]
		public void umwait_reg32() {
			TestAssembler(c => c.umwait(edx), Instruction.Create(Code.Umwait_r32, edx));
		}

		[Fact]
		public void umwait_reg64() {
			TestAssembler(c => c.umwait(rdx), Instruction.Create(Code.Umwait_r64, rdx));
		}

		[Fact]
		public void unpckhpd_regXMM_regXMM() {
			TestAssembler(c => c.unpckhpd(xmm2, xmm3), Instruction.Create(Code.Unpckhpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void unpckhpd_regXMM_m() {
			TestAssembler(c => c.unpckhpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpckhpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void unpckhps_regXMM_regXMM() {
			TestAssembler(c => c.unpckhps(xmm2, xmm3), Instruction.Create(Code.Unpckhps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void unpckhps_regXMM_m() {
			TestAssembler(c => c.unpckhps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpckhps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void unpcklpd_regXMM_regXMM() {
			TestAssembler(c => c.unpcklpd(xmm2, xmm3), Instruction.Create(Code.Unpcklpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void unpcklpd_regXMM_m() {
			TestAssembler(c => c.unpcklpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpcklpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void unpcklps_regXMM_regXMM() {
			TestAssembler(c => c.unpcklps(xmm2, xmm3), Instruction.Create(Code.Unpcklps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void unpcklps_regXMM_m() {
			TestAssembler(c => c.unpcklps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpcklps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_EVEX
		[Fact]
		public void v4fmaddps_regZMM_regZMM_m() {
			TestAssembler(c => c.v4fmaddps(zmm2.k1, zmm3, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_V4fmaddps_zmm_k1z_zmmp3_m128, zmm2.k1, zmm3, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void v4fmaddss_regXMM_regXMM_m() {
			TestAssembler(c => c.v4fmaddss(xmm2.k1, xmm3, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_V4fmaddss_xmm_k1z_xmmp3_m128, xmm2.k1, xmm3, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void v4fnmaddps_regZMM_regZMM_m() {
			TestAssembler(c => c.v4fnmaddps(zmm2.k1, zmm3, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128, zmm2.k1, zmm3, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void v4fnmaddss_regXMM_regXMM_m() {
			TestAssembler(c => c.v4fnmaddss(xmm2.k1, xmm3, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128, xmm2.k1, xmm3, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaddpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vaddpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vaddpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vaddpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaddpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vaddpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaddps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vaddps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vaddps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vaddps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaddps_regZMM_regZMM_m() {
			TestAssembler(c => c.vaddps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaddss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaddss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vaddsubpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddsubpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vaddsubpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddsubpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vaddsubpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vaddsubpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vaddsubps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddsubps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vaddsubps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddsubps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubps_regXMM_regXMM_m() {
			TestAssembler(c => c.vaddsubps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaddsubps_regYMM_regYMM_m() {
			TestAssembler(c => c.vaddsubps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdec_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdec(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesdec_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesdec_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdec_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdec(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesdec_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesdec_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesdec_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vaesdec(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesdec_zmm_zmm_zmmm512, zmm2, zmm3, zmm4));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdec_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdec(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdec_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdec_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdec_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdec(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdec_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdec_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesdec_regZMM_regZMM_m() {
			TestAssembler(c => c.vaesdec(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdec_zmm_zmm_zmmm512, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdeclast_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdeclast(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesdeclast_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesdeclast_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdeclast_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdeclast(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesdeclast_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesdeclast_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesdeclast_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vaesdeclast(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesdeclast_zmm_zmm_zmmm512, zmm2, zmm3, zmm4));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdeclast_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdeclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdeclast_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdeclast_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesdeclast_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesdeclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdeclast_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdeclast_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesdeclast_regZMM_regZMM_m() {
			TestAssembler(c => c.vaesdeclast(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdeclast_zmm_zmm_zmmm512, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenc_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenc(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesenc_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesenc_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenc_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenc(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesenc_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesenc_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesenc_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vaesenc(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesenc_zmm_zmm_zmmm512, zmm2, zmm3, zmm4));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenc_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenc(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenc_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenc_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenc_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenc(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenc_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenc_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesenc_regZMM_regZMM_m() {
			TestAssembler(c => c.vaesenc(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenc_zmm_zmm_zmmm512, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenclast_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenclast(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesenclast_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesenclast_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenclast_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenclast(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesenclast_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesenclast_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesenclast_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vaesenclast(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesenclast_zmm_zmm_zmmm512, zmm2, zmm3, zmm4));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenclast_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenclast_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenclast_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vaesenclast_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vaesenclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenclast_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenclast_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vaesenclast_regZMM_regZMM_m() {
			TestAssembler(c => c.vaesenclast(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenclast_zmm_zmm_zmmm512, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaesimc_regXMM_regXMM() {
			TestAssembler(c => c.vaesimc(xmm2, xmm3), Instruction.Create(Code.VEX_Vaesimc_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaesimc_regXMM_m() {
			TestAssembler(c => c.vaesimc(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesimc_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaeskeygenassist_regXMM_regXMM_i() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaeskeygenassist_regXMM_m_i() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaeskeygenassist_regXMM_regXMM_u() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vaeskeygenassist_regXMM_m_u() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regXMM_regXMM_m_i() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regYMM_regYMM_m_i() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regZMM_regZMM_m_i() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regXMM_regXMM_m_u() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regYMM_regYMM_m_u() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void valignq_regZMM_regZMM_m_u() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandnpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandnpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandnpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandnpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandnpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vandnpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandnpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandnpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandnpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vandnpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandnps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandnps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandnps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandnps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandnps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vandnps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandnps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandnps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandnps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandnps_regZMM_regZMM_m() {
			TestAssembler(c => c.vandnps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vandpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vandpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vandps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vandps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vandps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vandps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vandps_regZMM_regZMM_m() {
			TestAssembler(c => c.vandps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vblendmpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vblendmpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vblendmpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vblendmpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vblendmpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vblendmpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vblendmps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vblendmps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vblendmps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmps_regXMM_regXMM_m() {
			TestAssembler(c => c.vblendmps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmps_regYMM_regYMM_m() {
			TestAssembler(c => c.vblendmps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vblendmps_regZMM_regZMM_m() {
			TestAssembler(c => c.vblendmps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendpd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendps_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vblendvpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vblendvpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vblendvpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vblendvpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vblendvps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vblendvps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vblendvps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vblendvps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vblendvps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vblendvps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vblendvps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vblendvps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vblendvps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vbroadcastf128_regYMM_m() {
			TestAssembler(c => c.vbroadcastf128(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastf128_ymm_m128, ymm2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x2_regYMM_regXMM() {
			TestAssembler(c => c.vbroadcastf32x2(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x2_regZMM_regXMM() {
			TestAssembler(c => c.vbroadcastf32x2(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, zmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x2_regYMM_m() {
			TestAssembler(c => c.vbroadcastf32x2(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x2_regZMM_m() {
			TestAssembler(c => c.vbroadcastf32x2(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x4_regYMM_m() {
			TestAssembler(c => c.vbroadcastf32x4(ymm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x4_ymm_k1z_m128, ymm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x4_regZMM_m() {
			TestAssembler(c => c.vbroadcastf32x4(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x4_zmm_k1z_m128, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf32x8_regZMM_m() {
			TestAssembler(c => c.vbroadcastf32x8(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf32x8_zmm_k1z_m256, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf64x2_regYMM_m() {
			TestAssembler(c => c.vbroadcastf64x2(ymm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf64x2_ymm_k1z_m128, ymm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf64x2_regZMM_m() {
			TestAssembler(c => c.vbroadcastf64x2(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf64x2_zmm_k1z_m128, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastf64x4_regZMM_m() {
			TestAssembler(c => c.vbroadcastf64x4(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastf64x4_zmm_k1z_m256, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vbroadcasti128_regYMM_m() {
			TestAssembler(c => c.vbroadcasti128(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcasti128_ymm_m128, ymm2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x2_regXMM_regXMM() {
			TestAssembler(c => c.vbroadcasti32x2(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x2_regYMM_regXMM() {
			TestAssembler(c => c.vbroadcasti32x2(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x2_regZMM_regXMM() {
			TestAssembler(c => c.vbroadcasti32x2(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, zmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x2_regXMM_m() {
			TestAssembler(c => c.vbroadcasti32x2(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x2_regYMM_m() {
			TestAssembler(c => c.vbroadcasti32x2(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x2_regZMM_m() {
			TestAssembler(c => c.vbroadcasti32x2(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x4_regYMM_m() {
			TestAssembler(c => c.vbroadcasti32x4(ymm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x4_ymm_k1z_m128, ymm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x4_regZMM_m() {
			TestAssembler(c => c.vbroadcasti32x4(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x4_zmm_k1z_m128, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti32x8_regZMM_m() {
			TestAssembler(c => c.vbroadcasti32x8(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti32x8_zmm_k1z_m256, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti64x2_regYMM_m() {
			TestAssembler(c => c.vbroadcasti64x2(ymm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti64x2_ymm_k1z_m128, ymm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti64x2_regZMM_m() {
			TestAssembler(c => c.vbroadcasti64x2(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti64x2_zmm_k1z_m128, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcasti64x4_regZMM_m() {
			TestAssembler(c => c.vbroadcasti64x4(zmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcasti64x4_zmm_k1z_m256, zmm2.k1, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vbroadcastsd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vbroadcastsd(ymm2, xmm3), Instruction.Create(Code.VEX_Vbroadcastsd_ymm_xmm, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastsd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastsd_ymm_k1z_xmmm64, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastsd_regZMM_regXMM() {
			TestAssembler(c => c.vbroadcastsd(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastsd_zmm_k1z_xmmm64, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vbroadcastsd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vbroadcastsd(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastsd_ymm_m64, ymm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastsd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastsd_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastsd_regZMM_m() {
			TestAssembler(c => c.vbroadcastsd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastsd_zmm_k1z_xmmm64, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vbroadcastss_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vbroadcastss(xmm2, xmm3), Instruction.Create(Code.VEX_Vbroadcastss_xmm_xmm, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastss_xmm_k1z_xmmm32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vbroadcastss_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vbroadcastss(ymm2, xmm3), Instruction.Create(Code.VEX_Vbroadcastss_ymm_xmm, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastss_ymm_k1z_xmmm32, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastss_regZMM_regXMM() {
			TestAssembler(c => c.vbroadcastss(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastss_zmm_k1z_xmmm32, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vbroadcastss_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vbroadcastss(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastss_xmm_m32, xmm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastss_xmm_k1z_xmmm32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vbroadcastss_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vbroadcastss(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastss_ymm_m32, ymm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastss_ymm_k1z_xmmm32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vbroadcastss_regZMM_m() {
			TestAssembler(c => c.vbroadcastss(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vbroadcastss_zmm_k1z_xmmm32, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ospd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ospd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_ospd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ospd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ospd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_ospd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ospd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 16)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ospd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ospd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_ospd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ospd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ospd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeq_ospd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ospd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_osps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_osps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_osps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_osps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 16)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_osps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_osps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_osps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeq_osps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ossd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_ossd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ossd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_ossd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ossd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_ossd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ossd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_ossd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_osss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_osss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_osss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_osss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_osss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_osss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_osss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 8)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeq_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 8)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeq_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 8));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uspd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uspd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_uspd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uspd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uspd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_uspd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uspd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 24)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uspd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uspd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_uspd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uspd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_uspd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeq_uspd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_uspd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_usps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_usps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_usps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeq_usps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 24)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_usps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_usps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_usps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeq_usps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ussd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_ussd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ussd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_ussd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_ussd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_ussd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_ussd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_ussd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_usss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_usss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeq_usss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeq_usss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeq_usss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeq_usss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeq_usss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 24));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 0)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpeqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpeqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 0)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpeqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpeqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpeqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpeqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpeqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpeqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpeqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpeqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ospd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_ospd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_ospd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ospd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_ospd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalse_ospd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ospd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 27)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ospd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_ospd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_ospd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ospd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_ospd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpfalse_ospd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ospd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_osps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_osps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_osps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalse_osps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 27)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_osps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_osps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_osps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpfalse_osps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ossd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_ossd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_ossd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_ossd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_ossd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_ossd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_ossd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_ossd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_osss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_osss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalse_osss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalse_osss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_osss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalse_osss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalse_osss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 27));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsepd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsepd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalsepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsepd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsepd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalsepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsepd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 11)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsepd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsepd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalsepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsepd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsepd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpfalsepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsepd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalseps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalseps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalseps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalseps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalseps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpfalseps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalseps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 11)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalseps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalseps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalseps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalseps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalseps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpfalseps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalseps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsesd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalsesd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsesd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalsesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsesd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalsesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsesd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalsesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsess_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalsess(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsess_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpfalsess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpfalsess_regK_regXMM_m() {
			TestAssembler(c => c.vcmpfalsess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpfalsess_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpfalsess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 11));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpge_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 29)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpge_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpge_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 29)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpge_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpge_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpge_oqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpge_oqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpge_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 29));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgepd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgepd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgepd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgepd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgepd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgepd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgepd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpgepd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 13)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgepd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgepd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgepd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpgepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgepd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpgepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgepd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpgepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgeps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgeps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgeps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgeps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgeps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgeps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgeps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgeps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgeps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpgeps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 13)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgeps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgeps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgeps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgeps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgeps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpgeps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgeps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpgeps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgeps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpgeps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgesd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgesd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgesd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgesd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgesd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgess_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgess(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgess_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgess_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgess_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 13));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgt_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 30)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpgt_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgt_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 30)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpgt_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgt_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgt_oqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgt_oqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgt_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 30));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgtpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 14)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgtpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpgtpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgtps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpgtps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpgtps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 14)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgtps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgtps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpgtps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpgtps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpgtps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgtsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgtsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpgtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpgtss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpgtss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpgtss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpgtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 14));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmple_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 18)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmple_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmple_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmple_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 18)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmple_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmple_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmple_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmple_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmple_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmple_oqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmple_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmple_oqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmple_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 18));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplepd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmplepd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplepd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmplepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplepd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmplepd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplepd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmplepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplepd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmplepd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 2)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplepd_regK_regXMM_m() {
			TestAssembler(c => c.vcmplepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplepd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmplepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplepd_regK_regYMM_m() {
			TestAssembler(c => c.vcmplepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplepd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmplepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplepd_regK_regZMM_m() {
			TestAssembler(c => c.vcmplepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpleps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpleps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpleps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpleps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpleps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpleps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpleps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpleps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpleps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpleps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 2)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpleps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpleps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpleps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpleps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpleps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpleps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpleps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpleps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpleps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpleps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplesd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmplesd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplesd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmplesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplesd_regK_regXMM_m() {
			TestAssembler(c => c.vcmplesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplesd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmplesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpless_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpless(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpless_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpless(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpless_regK_regXMM_m() {
			TestAssembler(c => c.vcmpless(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpless_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpless(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmplt_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 17)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmplt_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmplt_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 17)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmplt_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmplt_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmplt_oqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmplt_oqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmplt_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpltpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpltpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpltpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 1)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpltpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpltpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpltpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpltpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpltpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpltps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpltps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpltps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 1)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpltps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpltps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpltps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpltps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpltps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpltsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpltsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpltss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpltss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpltss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpltss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpltss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 12)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneq_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 12)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneq_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_oqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_oqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 12));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ospd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ospd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_ospd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ospd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ospd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_ospd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ospd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 28)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ospd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ospd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_ospd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ospd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ospd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneq_ospd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ospd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_osps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_osps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_osps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_osps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 28)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_osps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_osps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_osps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneq_osps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ossd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_ossd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ossd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_ossd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ossd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_ossd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ossd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_ossd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_osss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_osss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_osss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_osss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_osss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_osss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_osss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 28));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_uspd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_uspd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_uspd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_uspd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_uspd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_uspd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_uspd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 20)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_uspd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_uspd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_uspd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_uspd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_uspd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneq_uspd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_uspd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_usps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_usps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_usps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneq_usps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 20)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_usps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_usps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_usps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneq_usps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ussd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_ussd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ussd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_ussd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_ussd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_ussd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_ussd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_ussd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_usss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_usss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneq_usss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneq_usss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneq_usss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneq_usss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneq_usss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 20));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpneqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpneqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpneqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpneqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpneqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpneqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpneqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpneqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpneqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpneqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnge_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 25)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnge_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnge_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 25)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnge_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnge_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnge_uqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnge_uqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnge_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 25));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngepd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngepd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngepd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngepd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngepd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngepd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngepd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpngepd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 9)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngepd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngepd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngepd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpngepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngepd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpngepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngepd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpngepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngeps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngeps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngeps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngeps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngeps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngeps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngeps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngeps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngeps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpngeps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 9)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngeps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngeps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngeps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngeps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngeps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpngeps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngeps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpngeps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngeps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpngeps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngesd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngesd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngesd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngesd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngesd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngess_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngess(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngess_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngess_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngess_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 9));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngt_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 26)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpngt_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngt_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 26)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpngt_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngt_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngt_uqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngt_uqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngt_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 26));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngtpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 10)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngtpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpngtpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngtps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpngtps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpngtps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 10)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngtps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngtps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpngtps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpngtps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpngtps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngtsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngtsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpngtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpngtss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpngtss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpngtss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpngtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 10));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnle_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 22)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnle_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnle_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 22)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnle_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnle_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnle_uqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnle_uqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnle_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 22));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlepd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlepd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlepd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlepd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnlepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlepd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 6)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlepd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlepd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnlepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlepd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlepd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnlepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlepd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnleps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnleps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnleps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnleps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnleps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnleps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnleps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnleps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnleps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnleps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 6)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnleps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnleps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnleps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnleps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnleps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnleps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnleps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnleps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnleps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnleps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlesd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlesd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlesd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlesd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnlesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlesd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnlesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnless_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnless(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnless_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnless(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnless_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnless(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnless_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnless(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnlt_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 21)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnlt_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 21)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnlt_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnlt_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnlt_uqss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnlt_uqss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnlt_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 21));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnltpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnltpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnltpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnltps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpnltps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpnltps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnltps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnltps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpnltps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpnltps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpnltps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnltsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnltsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpnltss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpnltss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpnltss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpnltss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpnltss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_spd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_spd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_spd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_spd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_spd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpord_spd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_spd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 23)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_spd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_spd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpord_spd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_spd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_spd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpord_spd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_spd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_sps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_sps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_sps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpord_sps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 23)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_sps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpord_sps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_sps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpord_sps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_ssd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_ssd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_ssd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_ssd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_ssd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpord_ssd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_ssd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpord_ssd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_sss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_sss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpord_sss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpord_sss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpord_sss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpord_sss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpord_sss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 23));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpordpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpordpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpordpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 7)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpordpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpordpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpordpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpordpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpordpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpordps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpordps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpordps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 7)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpordps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpordps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpordps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpordps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpordps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpordsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpordsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpordss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpordss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpordss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpordss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpordss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regXMM_m_i() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regYMM_m_i() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regZMM_m_i() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regXMM_m_u() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regYMM_m_u() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmppd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmppd_regK_regZMM_m_u() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regXMM_m_i() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regYMM_m_i() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regZMM_m_i() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regXMM_m_u() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regYMM_m_u() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpps_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpps_regK_regZMM_m_u() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpsd_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpsd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpsd_regK_regXMM_m_i() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpsd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpsd_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpsd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpsd_regK_regXMM_m_u() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpsd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpss_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpss_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpss_regK_regXMM_m_i() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpss_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpss_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpss_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpss_regK_regXMM_m_u() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpss_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_uspd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_uspd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_uspd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_uspd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_uspd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmptrue_uspd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_uspd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 31)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_uspd_regK_regXMM_m() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_uspd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptrue_uspd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_uspd_regK_regYMM_m() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_uspd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmptrue_uspd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_uspd_regK_regZMM_m() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_usps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_usps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_usps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmptrue_usps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 31)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usps_regK_regXMM_m() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_usps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptrue_usps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usps_regK_regYMM_m() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_usps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmptrue_usps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usps_regK_regZMM_m() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_ussd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_ussd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_ussd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_ussd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_ussd_regK_regXMM_m() {
			TestAssembler(c => c.vcmptrue_ussd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_ussd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptrue_ussd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_usss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_usss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrue_usss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrue_usss_regK_regXMM_m() {
			TestAssembler(c => c.vcmptrue_usss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrue_usss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptrue_usss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 31));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruepd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptruepd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruepd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptruepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruepd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmptruepd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruepd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmptruepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruepd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmptruepd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 15)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruepd_regK_regXMM_m() {
			TestAssembler(c => c.vcmptruepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruepd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptruepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruepd_regK_regYMM_m() {
			TestAssembler(c => c.vcmptruepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruepd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmptruepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruepd_regK_regZMM_m() {
			TestAssembler(c => c.vcmptruepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrueps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrueps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrueps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptrueps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrueps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmptrueps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrueps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmptrueps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrueps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmptrueps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 15)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrueps_regK_regXMM_m() {
			TestAssembler(c => c.vcmptrueps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrueps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptrueps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrueps_regK_regYMM_m() {
			TestAssembler(c => c.vcmptrueps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptrueps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmptrueps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptrueps_regK_regZMM_m() {
			TestAssembler(c => c.vcmptrueps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruesd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptruesd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruesd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptruesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruesd_regK_regXMM_m() {
			TestAssembler(c => c.vcmptruesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruesd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptruesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruess_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmptruess(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruess_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmptruess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmptruess_regK_regXMM_m() {
			TestAssembler(c => c.vcmptruess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmptruess_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmptruess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 15));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_spd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_spd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_spd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_spd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_spd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunord_spd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_spd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 19)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_spd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_spd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunord_spd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_spd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_spd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpunord_spd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_spd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_sps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_sps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_sps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunord_sps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 19)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_sps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunord_sps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_sps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpunord_sps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_ssd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_ssd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_ssd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_ssd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_ssd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunord_ssd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_ssd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunord_ssd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_sss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_sss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunord_sss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunord_sss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunord_sss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunord_sss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunord_sss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 19));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordpd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordpd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunordpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordpd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, zmm4, 3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordpd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunordpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordpd_regK_regYMM_m() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpunordpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordpd_regK_regZMM_m() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordps_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordps(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordps_regK_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunordps(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcmpunordps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordps_regK_regZMM_regZMM() {
			TestAssembler(c => c.vcmpunordps(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, zmm4, 3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordps_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunordps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordps_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunordps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordps_regK_regYMM_m() {
			TestAssembler(c => c.vcmpunordps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordps_regYMM_regYMM_m() {
			TestAssembler(c => c.vcmpunordps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordps_regK_regZMM_m() {
			TestAssembler(c => c.vcmpunordps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordsd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordsd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, xmm4, 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordsd_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunordsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunordsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordss_regK_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordss(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, xmm4, 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcmpunordss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcmpunordss_regK_regXMM_m() {
			TestAssembler(c => c.vcmpunordss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vcmpunordss_regXMM_regXMM_m() {
			TestAssembler(c => c.vcmpunordss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcomisd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcomisd(xmm2, xmm3), Instruction.Create(Code.VEX_Vcomisd_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomisd(xmm2, xmm3), Instruction.Create(Code.EVEX_Vcomisd_xmm_xmmm64_sae, xmm2, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcomisd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcomisd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcomisd_xmm_xmmm64_sae, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcomiss_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcomiss(xmm2, xmm3), Instruction.Create(Code.VEX_Vcomiss_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomiss(xmm2, xmm3), Instruction.Create(Code.EVEX_Vcomiss_xmm_xmmm32_sae, xmm2, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcomiss_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcomiss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcomiss_xmm_xmmm32_sae, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompresspd_regXMM_regXMM() {
			TestAssembler(c => c.vcompresspd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompresspd_xmmm128_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompresspd_m_regXMM() {
			TestAssembler(c => c.vcompresspd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompresspd_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompresspd_regYMM_regYMM() {
			TestAssembler(c => c.vcompresspd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompresspd_ymmm256_k1z_ymm, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompresspd_m_regYMM() {
			TestAssembler(c => c.vcompresspd(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompresspd_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompresspd_regZMM_regZMM() {
			TestAssembler(c => c.vcompresspd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompresspd_zmmm512_k1z_zmm, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompresspd_m_regZMM() {
			TestAssembler(c => c.vcompresspd(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompresspd_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompressps_regXMM_regXMM() {
			TestAssembler(c => c.vcompressps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompressps_xmmm128_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompressps_m_regXMM() {
			TestAssembler(c => c.vcompressps(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompressps_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompressps_regYMM_regYMM() {
			TestAssembler(c => c.vcompressps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompressps_ymmm256_k1z_ymm, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompressps_m_regYMM() {
			TestAssembler(c => c.vcompressps(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompressps_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompressps_regZMM_regZMM() {
			TestAssembler(c => c.vcompressps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompressps_zmmm512_k1z_zmm, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcompressps_m_regZMM() {
			TestAssembler(c => c.vcompressps(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcompressps_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2pd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2pd(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtdq2pd_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2pd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2pd(ymm2, xmm3), Instruction.Create(Code.VEX_Vcvtdq2pd_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtdq2pd_regZMM_regYMM() {
			TestAssembler(c => c.vcvtdq2pd(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2pd_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2pd(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2pd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2pd_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2pd(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2pd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2pd_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtdq2pd_regZMM_m() {
			TestAssembler(c => c.vcvtdq2pd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2ps_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2ps(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtdq2ps_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2ps_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2ps(ymm2, ymm3), Instruction.Create(Code.VEX_Vcvtdq2ps_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtdq2ps_regZMM_regZMM() {
			TestAssembler(c => c.vcvtdq2ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2ps_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2ps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtdq2ps_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2ps(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtdq2ps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2ps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtdq2ps_regZMM_m() {
			TestAssembler(c => c.vcvtdq2ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtne2ps2bf16_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vcvtne2ps2bf16(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtne2ps2bf16_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vcvtne2ps2bf16(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtne2ps2bf16_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vcvtne2ps2bf16(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtne2ps2bf16_regXMM_regXMM_m() {
			TestAssembler(c => c.vcvtne2ps2bf16(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtne2ps2bf16_regYMM_regYMM_m() {
			TestAssembler(c => c.vcvtne2ps2bf16(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtne2ps2bf16_regZMM_regZMM_m() {
			TestAssembler(c => c.vcvtne2ps2bf16(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16_regXMM_regXMM() {
			TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16_regXMM_regYMM() {
			TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16_regYMM_regZMM() {
			TestAssembler(c => c.vcvtneps2bf16(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16_regYMM_m() {
			TestAssembler(c => c.vcvtneps2bf16(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16x_regXMM_m() {
			TestAssembler(c => c.vcvtneps2bf16x(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtneps2bf16y_regXMM_m() {
			TestAssembler(c => c.vcvtneps2bf16y(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtpd2dq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtpd2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtpd2dq_regXMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtpd2dq(xmm2, ymm3), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_ymmm256, xmm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2dq_regYMM_regZMM() {
			TestAssembler(c => c.vcvtpd2dq(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, ymm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtpd2dq_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtpd2dq(xmm2, __ymmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_ymmm256, xmm2, __ymmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtpd2dq(xmm2, __xmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
			}
			{
				AssertInvalid( () => {
					{ /* if (PreferVex) */
						TestAssembler(c => c.vcvtpd2dq(xmm2, __byte_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_xmmm128, xmm2, __byte_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2dq_regYMM_m() {
			TestAssembler(c => c.vcvtpd2dq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2dqx_regXMM_m() {
			TestAssembler(c => c.vcvtpd2dqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2dqy_regXMM_m() {
			TestAssembler(c => c.vcvtpd2dqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtpd2ps_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtpd2ps(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtpd2ps_regXMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtpd2ps(xmm2, ymm3), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_ymmm256, xmm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2ps_regYMM_regZMM() {
			TestAssembler(c => c.vcvtpd2ps(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, ymm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtpd2ps_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtpd2ps(xmm2, __ymmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_ymmm256, xmm2, __ymmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtpd2ps(xmm2, __xmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_xmmm128, xmm2, __xmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
			}
			{
				AssertInvalid( () => {
					{ /* if (PreferVex) */
						TestAssembler(c => c.vcvtpd2ps(xmm2, __byte_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_xmmm128, xmm2, __byte_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2ps_regYMM_m() {
			TestAssembler(c => c.vcvtpd2ps(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2psx_regXMM_m() {
			TestAssembler(c => c.vcvtpd2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2psy_regXMM_m() {
			TestAssembler(c => c.vcvtpd2psy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2qq_regXMM_regXMM() {
			TestAssembler(c => c.vcvtpd2qq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2qq_regYMM_regYMM() {
			TestAssembler(c => c.vcvtpd2qq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2qq_regZMM_regZMM() {
			TestAssembler(c => c.vcvtpd2qq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2qq_regXMM_m() {
			TestAssembler(c => c.vcvtpd2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2qq_regYMM_m() {
			TestAssembler(c => c.vcvtpd2qq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2qq_regZMM_m() {
			TestAssembler(c => c.vcvtpd2qq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udq_regXMM_regXMM() {
			TestAssembler(c => c.vcvtpd2udq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udq_regXMM_regYMM() {
			TestAssembler(c => c.vcvtpd2udq(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udq_regYMM_regZMM() {
			TestAssembler(c => c.vcvtpd2udq(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udq_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udq_regYMM_m() {
			TestAssembler(c => c.vcvtpd2udq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udqx_regXMM_m() {
			TestAssembler(c => c.vcvtpd2udqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2udqy_regXMM_m() {
			TestAssembler(c => c.vcvtpd2udqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2uqq_regXMM_regXMM() {
			TestAssembler(c => c.vcvtpd2uqq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2uqq_regYMM_regYMM() {
			TestAssembler(c => c.vcvtpd2uqq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2uqq_regZMM_regZMM() {
			TestAssembler(c => c.vcvtpd2uqq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2uqq_regXMM_m() {
			TestAssembler(c => c.vcvtpd2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2uqq_regYMM_m() {
			TestAssembler(c => c.vcvtpd2uqq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtpd2uqq_regZMM_m() {
			TestAssembler(c => c.vcvtpd2uqq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtph2ps_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtph2ps(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtph2ps_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtph2ps_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtph2ps_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtph2ps(ymm2, xmm3), Instruction.Create(Code.VEX_Vcvtph2ps_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtph2ps_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtph2ps_regZMM_regYMM() {
			TestAssembler(c => c.vcvtph2ps(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtph2ps_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtph2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtph2ps_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtph2ps_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtph2ps_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtph2ps(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtph2ps_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtph2ps_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtph2ps_regZMM_m() {
			TestAssembler(c => c.vcvtph2ps(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2dq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtps2dq_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2dq_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2dq(ymm2, ymm3), Instruction.Create(Code.VEX_Vcvtps2dq_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2dq_regZMM_regZMM() {
			TestAssembler(c => c.vcvtps2dq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2dq_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2dq_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2dq(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2dq(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2dq_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2dq_regZMM_m() {
			TestAssembler(c => c.vcvtps2dq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2pd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2pd(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtps2pd_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2pd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2pd(ymm2, xmm3), Instruction.Create(Code.VEX_Vcvtps2pd_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2pd_regZMM_regYMM() {
			TestAssembler(c => c.vcvtps2pd(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2pd_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2pd(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2pd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2pd_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2pd(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2pd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2pd_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2pd_regZMM_m() {
			TestAssembler(c => c.vcvtps2pd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_m_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_regXMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, ymm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, xmm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_m_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], ymm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2ph_regYMM_regZMM_i() {
			TestAssembler(c => c.vcvtps2ph(ymm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, ymm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2ph_m_regZMM_i() {
			TestAssembler(c => c.vcvtps2ph(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_m_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_regXMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, xmm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtps2ph_m_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], ymm3, (byte)127), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2ph_regYMM_regZMM_u() {
			TestAssembler(c => c.vcvtps2ph(ymm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, ymm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2ph_m_regZMM_u() {
			TestAssembler(c => c.vcvtps2ph(__ymmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2qq_regXMM_regXMM() {
			TestAssembler(c => c.vcvtps2qq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2qq_regYMM_regXMM() {
			TestAssembler(c => c.vcvtps2qq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2qq_regZMM_regYMM() {
			TestAssembler(c => c.vcvtps2qq(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, zmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2qq_regXMM_m() {
			TestAssembler(c => c.vcvtps2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2qq_regYMM_m() {
			TestAssembler(c => c.vcvtps2qq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2qq_regZMM_m() {
			TestAssembler(c => c.vcvtps2qq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2udq_regXMM_regXMM() {
			TestAssembler(c => c.vcvtps2udq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2udq_regYMM_regYMM() {
			TestAssembler(c => c.vcvtps2udq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2udq_regZMM_regZMM() {
			TestAssembler(c => c.vcvtps2udq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2udq_regXMM_m() {
			TestAssembler(c => c.vcvtps2udq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2udq_regYMM_m() {
			TestAssembler(c => c.vcvtps2udq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2udq_regZMM_m() {
			TestAssembler(c => c.vcvtps2udq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2uqq_regXMM_regXMM() {
			TestAssembler(c => c.vcvtps2uqq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2uqq_regYMM_regXMM() {
			TestAssembler(c => c.vcvtps2uqq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2uqq_regZMM_regYMM() {
			TestAssembler(c => c.vcvtps2uqq(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, zmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2uqq_regXMM_m() {
			TestAssembler(c => c.vcvtps2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2uqq_regYMM_m() {
			TestAssembler(c => c.vcvtps2uqq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtps2uqq_regZMM_m() {
			TestAssembler(c => c.vcvtps2uqq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2pd_regXMM_regXMM() {
			TestAssembler(c => c.vcvtqq2pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2pd_regYMM_regYMM() {
			TestAssembler(c => c.vcvtqq2pd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2pd_regZMM_regZMM() {
			TestAssembler(c => c.vcvtqq2pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2pd_regXMM_m() {
			TestAssembler(c => c.vcvtqq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2pd_regYMM_m() {
			TestAssembler(c => c.vcvtqq2pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2pd_regZMM_m() {
			TestAssembler(c => c.vcvtqq2pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2ps_regXMM_regXMM() {
			TestAssembler(c => c.vcvtqq2ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2ps_regXMM_regYMM() {
			TestAssembler(c => c.vcvtqq2ps(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2ps_regYMM_regZMM() {
			TestAssembler(c => c.vcvtqq2ps(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2ps_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2ps_regYMM_m() {
			TestAssembler(c => c.vcvtqq2ps(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2psx_regXMM_m() {
			TestAssembler(c => c.vcvtqq2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtqq2psy_regXMM_m() {
			TestAssembler(c => c.vcvtqq2psy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsd2si_reg32_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsd2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvtsd2si_r32_xmmm64, edx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2si_r32_xmmm64_er, edx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsd2si_reg64_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsd2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvtsd2si_r64_xmmm64, rdx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2si_r64_xmmm64_er, rdx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsd2si_reg32_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtsd2si_r32_xmmm64, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2si_r32_xmmm64_er, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsd2si_reg64_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtsd2si_r64_xmmm64, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2si_r64_xmmm64_er, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsd2ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsd2ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcvtsd2ss_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsd2ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsd2ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtsd2ss_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtsd2usi_reg32_regXMM() {
			TestAssembler(c => c.vcvtsd2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2usi_r32_xmmm64_er, edx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtsd2usi_reg64_regXMM() {
			TestAssembler(c => c.vcvtsd2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2usi_r64_xmmm64_er, rdx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtsd2usi_reg32_m() {
			TestAssembler(c => c.vcvtsd2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2usi_r32_xmmm64_er, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtsd2usi_reg64_m() {
			TestAssembler(c => c.vcvtsd2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2usi_r64_xmmm64_er, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsi2sd_regXMM_regXMM_reg32() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, esp), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm32, xmm2, xmm3, esp), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, xmm2, xmm3, esp), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsi2sd_regXMM_regXMM_reg64() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, rsp), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm64, xmm2, xmm3, rsp), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm64_er, xmm2, xmm3, rsp), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsi2sd_regXMM_regXMM_m() {
			{ /* if (src2.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm64, xmm2, xmm3, __qword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm64_er, xmm2, xmm3, __qword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
			} /* else */ { /* if (src2.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm32, xmm2, xmm3, __dword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, xmm2, xmm3, __dword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
			}
			{
				AssertInvalid( () => {
					{ /* if (PreferVex) */
						TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm32, xmm2, xmm3, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, xmm2, xmm3, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
				});
			}
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsi2ss_regXMM_regXMM_reg32() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, esp), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm32, xmm2, xmm3, esp), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, xmm2, xmm3, esp), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsi2ss_regXMM_regXMM_reg64() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, rsp), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm64, xmm2, xmm3, rsp), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm64_er, xmm2, xmm3, rsp), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtsi2ss_regXMM_regXMM_m() {
			{ /* if (src2.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm64, xmm2, xmm3, __qword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm64_er, xmm2, xmm3, __qword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
			} /* else */ { /* if (src2.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm32, xmm2, xmm3, __dword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, xmm2, xmm3, __dword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
			}
			{
				AssertInvalid( () => {
					{ /* if (PreferVex) */
						TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm32, xmm2, xmm3, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, xmm2, xmm3, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
				});
			}
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtss2sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtss2sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcvtss2sd_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtss2sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtss2sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtss2sd_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtss2si_reg32_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtss2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvtss2si_r32_xmmm32, edx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2si_r32_xmmm32_er, edx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtss2si_reg64_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtss2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvtss2si_r64_xmmm32, rdx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2si_r64_xmmm32_er, rdx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtss2si_reg32_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtss2si_r32_xmmm32, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2si_r32_xmmm32_er, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvtss2si_reg64_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvtss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtss2si_r64_xmmm32, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2si_r64_xmmm32_er, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtss2usi_reg32_regXMM() {
			TestAssembler(c => c.vcvtss2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2usi_r32_xmmm32_er, edx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtss2usi_reg64_regXMM() {
			TestAssembler(c => c.vcvtss2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2usi_r64_xmmm32_er, rdx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtss2usi_reg32_m() {
			TestAssembler(c => c.vcvtss2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2usi_r32_xmmm32_er, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtss2usi_reg64_m() {
			TestAssembler(c => c.vcvtss2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2usi_r64_xmmm32_er, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttpd2dq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttpd2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttpd2dq_regXMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttpd2dq(xmm2, ymm3), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_ymmm256, xmm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2dq_regYMM_regZMM() {
			TestAssembler(c => c.vcvttpd2dq(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, ymm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttpd2dq_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvttpd2dq(xmm2, __ymmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_ymmm256, xmm2, __ymmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				{ /* if (PreferVex) */
					TestAssembler(c => c.vcvttpd2dq(xmm2, __xmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
			}
			{
				AssertInvalid( () => {
					{ /* if (PreferVex) */
						TestAssembler(c => c.vcvttpd2dq(xmm2, __byte_ptr[rdx]), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_xmmm128, xmm2, __byte_ptr[rdx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2dq_regYMM_m() {
			TestAssembler(c => c.vcvttpd2dq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2dqx_regXMM_m() {
			TestAssembler(c => c.vcvttpd2dqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2dqy_regXMM_m() {
			TestAssembler(c => c.vcvttpd2dqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2qq_regXMM_regXMM() {
			TestAssembler(c => c.vcvttpd2qq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2qq_regYMM_regYMM() {
			TestAssembler(c => c.vcvttpd2qq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2qq_regZMM_regZMM() {
			TestAssembler(c => c.vcvttpd2qq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2qq_regXMM_m() {
			TestAssembler(c => c.vcvttpd2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2qq_regYMM_m() {
			TestAssembler(c => c.vcvttpd2qq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2qq_regZMM_m() {
			TestAssembler(c => c.vcvttpd2qq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udq_regXMM_regXMM() {
			TestAssembler(c => c.vcvttpd2udq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udq_regXMM_regYMM() {
			TestAssembler(c => c.vcvttpd2udq(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udq_regYMM_regZMM() {
			TestAssembler(c => c.vcvttpd2udq(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udq_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udq_regYMM_m() {
			TestAssembler(c => c.vcvttpd2udq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udqx_regXMM_m() {
			TestAssembler(c => c.vcvttpd2udqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2udqy_regXMM_m() {
			TestAssembler(c => c.vcvttpd2udqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2uqq_regXMM_regXMM() {
			TestAssembler(c => c.vcvttpd2uqq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2uqq_regYMM_regYMM() {
			TestAssembler(c => c.vcvttpd2uqq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2uqq_regZMM_regZMM() {
			TestAssembler(c => c.vcvttpd2uqq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2uqq_regXMM_m() {
			TestAssembler(c => c.vcvttpd2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2uqq_regYMM_m() {
			TestAssembler(c => c.vcvttpd2uqq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttpd2uqq_regZMM_m() {
			TestAssembler(c => c.vcvttpd2uqq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttps2dq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttps2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvttps2dq_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttps2dq_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttps2dq(ymm2, ymm3), Instruction.Create(Code.VEX_Vcvttps2dq_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2dq_regZMM_regZMM() {
			TestAssembler(c => c.vcvttps2dq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttps2dq_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttps2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvttps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttps2dq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttps2dq_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttps2dq(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vcvttps2dq(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttps2dq_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2dq_regZMM_m() {
			TestAssembler(c => c.vcvttps2dq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2qq_regXMM_regXMM() {
			TestAssembler(c => c.vcvttps2qq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2qq_regYMM_regXMM() {
			TestAssembler(c => c.vcvttps2qq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2qq_regZMM_regYMM() {
			TestAssembler(c => c.vcvttps2qq(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, zmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2qq_regXMM_m() {
			TestAssembler(c => c.vcvttps2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2qq_regYMM_m() {
			TestAssembler(c => c.vcvttps2qq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2qq_regZMM_m() {
			TestAssembler(c => c.vcvttps2qq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2udq_regXMM_regXMM() {
			TestAssembler(c => c.vcvttps2udq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2udq_regYMM_regYMM() {
			TestAssembler(c => c.vcvttps2udq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2udq_regZMM_regZMM() {
			TestAssembler(c => c.vcvttps2udq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2udq_regXMM_m() {
			TestAssembler(c => c.vcvttps2udq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2udq_regYMM_m() {
			TestAssembler(c => c.vcvttps2udq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2udq_regZMM_m() {
			TestAssembler(c => c.vcvttps2udq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2uqq_regXMM_regXMM() {
			TestAssembler(c => c.vcvttps2uqq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2uqq_regYMM_regXMM() {
			TestAssembler(c => c.vcvttps2uqq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2uqq_regZMM_regYMM() {
			TestAssembler(c => c.vcvttps2uqq(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, zmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2uqq_regXMM_m() {
			TestAssembler(c => c.vcvttps2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2uqq_regYMM_m() {
			TestAssembler(c => c.vcvttps2uqq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttps2uqq_regZMM_m() {
			TestAssembler(c => c.vcvttps2uqq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttsd2si_reg32_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttsd2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvttsd2si_r32_xmmm64, edx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2si_r32_xmmm64_sae, edx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttsd2si_reg64_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttsd2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvttsd2si_r64_xmmm64, rdx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2si_r64_xmmm64_sae, rdx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttsd2si_reg32_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttsd2si_r32_xmmm64, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2si_r32_xmmm64_sae, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttsd2si_reg64_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttsd2si_r64_xmmm64, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2si_r64_xmmm64_sae, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttsd2usi_reg32_regXMM() {
			TestAssembler(c => c.vcvttsd2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2usi_r32_xmmm64_sae, edx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttsd2usi_reg64_regXMM() {
			TestAssembler(c => c.vcvttsd2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2usi_r64_xmmm64_sae, rdx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttsd2usi_reg32_m() {
			TestAssembler(c => c.vcvttsd2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2usi_r32_xmmm64_sae, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttsd2usi_reg64_m() {
			TestAssembler(c => c.vcvttsd2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2usi_r64_xmmm64_sae, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttss2si_reg32_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttss2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvttss2si_r32_xmmm32, edx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2si_r32_xmmm32_sae, edx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttss2si_reg64_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttss2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvttss2si_r64_xmmm32, rdx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2si_r64_xmmm32_sae, rdx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttss2si_reg32_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttss2si_r32_xmmm32, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2si_r32_xmmm32_sae, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vcvttss2si_reg64_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vcvttss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttss2si_r64_xmmm32, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2si_r64_xmmm32_sae, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttss2usi_reg32_regXMM() {
			TestAssembler(c => c.vcvttss2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2usi_r32_xmmm32_sae, edx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttss2usi_reg64_regXMM() {
			TestAssembler(c => c.vcvttss2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2usi_r64_xmmm32_sae, rdx, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttss2usi_reg32_m() {
			TestAssembler(c => c.vcvttss2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2usi_r32_xmmm32_sae, edx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvttss2usi_reg64_m() {
			TestAssembler(c => c.vcvttss2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2usi_r64_xmmm32_sae, rdx, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2pd_regXMM_regXMM() {
			TestAssembler(c => c.vcvtudq2pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2pd_regYMM_regXMM() {
			TestAssembler(c => c.vcvtudq2pd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, ymm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2pd_regZMM_regYMM() {
			TestAssembler(c => c.vcvtudq2pd(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, zmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2pd_regXMM_m() {
			TestAssembler(c => c.vcvtudq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2pd_regYMM_m() {
			TestAssembler(c => c.vcvtudq2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2pd_regZMM_m() {
			TestAssembler(c => c.vcvtudq2pd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2ps_regXMM_regXMM() {
			TestAssembler(c => c.vcvtudq2ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2ps_regYMM_regYMM() {
			TestAssembler(c => c.vcvtudq2ps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2ps_regZMM_regZMM() {
			TestAssembler(c => c.vcvtudq2ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2ps_regXMM_m() {
			TestAssembler(c => c.vcvtudq2ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2ps_regYMM_m() {
			TestAssembler(c => c.vcvtudq2ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtudq2ps_regZMM_m() {
			TestAssembler(c => c.vcvtudq2ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2pd_regXMM_regXMM() {
			TestAssembler(c => c.vcvtuqq2pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2pd_regYMM_regYMM() {
			TestAssembler(c => c.vcvtuqq2pd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2pd_regZMM_regZMM() {
			TestAssembler(c => c.vcvtuqq2pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2pd_regXMM_m() {
			TestAssembler(c => c.vcvtuqq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2pd_regYMM_m() {
			TestAssembler(c => c.vcvtuqq2pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2pd_regZMM_m() {
			TestAssembler(c => c.vcvtuqq2pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2ps_regXMM_regXMM() {
			TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2ps_regXMM_regYMM() {
			TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2ps_regYMM_regZMM() {
			TestAssembler(c => c.vcvtuqq2ps(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2ps_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __ymmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __xmmword_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __byte_ptr[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2ps_regYMM_m() {
			TestAssembler(c => c.vcvtuqq2ps(ymm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, ymm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2psx_regXMM_m() {
			TestAssembler(c => c.vcvtuqq2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtuqq2psy_regXMM_m() {
			TestAssembler(c => c.vcvtuqq2psy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, xmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtusi2sd_regXMM_regXMM_reg32() {
			TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, xmm2, xmm3, esp));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtusi2sd_regXMM_regXMM_reg64() {
			TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm64_er, xmm2, xmm3, rsp));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtusi2sd_regXMM_regXMM_m() {
			{ /* if (src2.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm64_er, xmm2, xmm3, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src2.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, xmm2, xmm3, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, xmm2, xmm3, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtusi2ss_regXMM_regXMM_reg32() {
			TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, xmm2, xmm3, esp));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtusi2ss_regXMM_regXMM_reg64() {
			TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm64_er, xmm2, xmm3, rsp));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vcvtusi2ss_regXMM_regXMM_m() {
			{ /* if (src2.Size == MemoryOperandSize.QwordPtr) */
				TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm64_er, xmm2, xmm3, __qword_ptr[rdx].ToMemoryOperand(Bitness)));
			} /* else */ { /* if (src2.Size == MemoryOperandSize.DwordPtr) */
				TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, xmm2, xmm3, __dword_ptr[rdx].ToMemoryOperand(Bitness)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, xmm2, xmm3, __zmmword_ptr[rdx].ToMemoryOperand(Bitness)));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdbpsadbw_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vdivpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdivpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vdivpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vdivpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vdivpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdivpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vdivpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vdivps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdivps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vdivps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vdivps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vdivps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdivps_regZMM_regZMM_m() {
			TestAssembler(c => c.vdivps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vdivss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vdivss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdpbf16ps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vdpbf16ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdpbf16ps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vdpbf16ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdpbf16ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vdpbf16ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdpbf16ps_regXMM_regXMM_m() {
			TestAssembler(c => c.vdpbf16ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdpbf16ps_regYMM_regYMM_m() {
			TestAssembler(c => c.vdpbf16ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vdpbf16ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vdpbf16ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdppd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdppd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdppd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdppd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vdpps_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

		[Fact]
		public void verr_reg16() {
			TestAssembler(c => c.verr(dx), Instruction.Create(Code.Verr_rm16, dx));
		}

		[Fact]
		public void verr_reg32() {
			TestAssembler(c => c.verr(edx), Instruction.Create(Code.Verr_r32m16, edx));
		}

		[Fact]
		public void verr_reg64() {
			TestAssembler(c => c.verr(rdx), Instruction.Create(Code.Verr_r64m16, rdx));
		}

		[Fact]
		public void verr_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.verr(__dword_ptr[rcx]), Instruction.Create(Code.Verr_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void verw_reg16() {
			TestAssembler(c => c.verw(dx), Instruction.Create(Code.Verw_rm16, dx));
		}

		[Fact]
		public void verw_reg32() {
			TestAssembler(c => c.verw(edx), Instruction.Create(Code.Verw_r32m16, edx));
		}

		[Fact]
		public void verw_reg64() {
			TestAssembler(c => c.verw(rdx), Instruction.Create(Code.Verw_r64m16, rdx));
		}

		[Fact]
		public void verw_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.verw(__dword_ptr[rcx]), Instruction.Create(Code.Verw_r32m16, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
			} /* else skip (Bitness >= 32) not supported by this Assembler bitness */
		}

#if !NO_EVEX
		[Fact]
		public void vexp2pd_regZMM_regZMM() {
			TestAssembler(c => c.vexp2pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexp2pd_regZMM_m() {
			TestAssembler(c => c.vexp2pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexp2ps_regZMM_regZMM() {
			TestAssembler(c => c.vexp2ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexp2ps_regZMM_m() {
			TestAssembler(c => c.vexp2ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandpd_regXMM_regXMM() {
			TestAssembler(c => c.vexpandpd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vexpandpd_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandpd_regYMM_regYMM() {
			TestAssembler(c => c.vexpandpd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vexpandpd_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandpd_regZMM_regZMM() {
			TestAssembler(c => c.vexpandpd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vexpandpd_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandpd_regXMM_m() {
			TestAssembler(c => c.vexpandpd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexpandpd_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandpd_regYMM_m() {
			TestAssembler(c => c.vexpandpd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexpandpd_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandpd_regZMM_m() {
			TestAssembler(c => c.vexpandpd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexpandpd_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandps_regXMM_regXMM() {
			TestAssembler(c => c.vexpandps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vexpandps_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandps_regYMM_regYMM() {
			TestAssembler(c => c.vexpandps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vexpandps_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandps_regZMM_regZMM() {
			TestAssembler(c => c.vexpandps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vexpandps_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandps_regXMM_m() {
			TestAssembler(c => c.vexpandps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexpandps_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandps_regYMM_m() {
			TestAssembler(c => c.vexpandps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexpandps_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vexpandps_regZMM_m() {
			TestAssembler(c => c.vexpandps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vexpandps_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextractf128_regXMM_regYMM_i() {
			TestAssembler(c => c.vextractf128(xmm2, ymm3, -5), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, xmm2, ymm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextractf128_m_regYMM_i() {
			TestAssembler(c => c.vextractf128(__xmmword_ptr[rcx], ymm3, -5), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextractf128_regXMM_regYMM_u() {
			TestAssembler(c => c.vextractf128(xmm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, xmm2, ymm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextractf128_m_regYMM_u() {
			TestAssembler(c => c.vextractf128(__xmmword_ptr[rcx], ymm3, (byte)127), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_regXMM_regYMM_i() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_m_regYMM_i() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_regXMM_regZMM_i() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_m_regZMM_i() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_regXMM_regYMM_u() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_m_regYMM_u() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_regXMM_regZMM_u() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x4_m_regZMM_u() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x8_regYMM_regZMM_i() {
			TestAssembler(c => c.vextractf32x8(ymm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x8_m_regZMM_i() {
			TestAssembler(c => c.vextractf32x8(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x8_regYMM_regZMM_u() {
			TestAssembler(c => c.vextractf32x8(ymm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf32x8_m_regZMM_u() {
			TestAssembler(c => c.vextractf32x8(__ymmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_regXMM_regYMM_i() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_m_regYMM_i() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_regXMM_regZMM_i() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_m_regZMM_i() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_regXMM_regYMM_u() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_m_regYMM_u() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_regXMM_regZMM_u() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x2_m_regZMM_u() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x4_regYMM_regZMM_i() {
			TestAssembler(c => c.vextractf64x4(ymm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x4_m_regZMM_i() {
			TestAssembler(c => c.vextractf64x4(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x4_regYMM_regZMM_u() {
			TestAssembler(c => c.vextractf64x4(ymm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextractf64x4_m_regZMM_u() {
			TestAssembler(c => c.vextractf64x4(__ymmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextracti128_regXMM_regYMM_i() {
			TestAssembler(c => c.vextracti128(xmm2, ymm3, -5), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, xmm2, ymm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextracti128_m_regYMM_i() {
			TestAssembler(c => c.vextracti128(__xmmword_ptr[rcx], ymm3, -5), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextracti128_regXMM_regYMM_u() {
			TestAssembler(c => c.vextracti128(xmm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, xmm2, ymm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vextracti128_m_regYMM_u() {
			TestAssembler(c => c.vextracti128(__xmmword_ptr[rcx], ymm3, (byte)127), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_regXMM_regYMM_i() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_m_regYMM_i() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_regXMM_regZMM_i() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_m_regZMM_i() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_regXMM_regYMM_u() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_m_regYMM_u() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_regXMM_regZMM_u() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x4_m_regZMM_u() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x8_regYMM_regZMM_i() {
			TestAssembler(c => c.vextracti32x8(ymm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x8_m_regZMM_i() {
			TestAssembler(c => c.vextracti32x8(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x8_regYMM_regZMM_u() {
			TestAssembler(c => c.vextracti32x8(ymm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti32x8_m_regZMM_u() {
			TestAssembler(c => c.vextracti32x8(__ymmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_regXMM_regYMM_i() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_m_regYMM_i() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_regXMM_regZMM_i() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_m_regZMM_i() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_regXMM_regYMM_u() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, xmm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_m_regYMM_u() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_regXMM_regZMM_u() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, xmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x2_m_regZMM_u() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x4_regYMM_regZMM_i() {
			TestAssembler(c => c.vextracti64x4(ymm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x4_m_regZMM_i() {
			TestAssembler(c => c.vextracti64x4(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x4_regYMM_regZMM_u() {
			TestAssembler(c => c.vextracti64x4(ymm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, ymm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vextracti64x4_m_regZMM_u() {
			TestAssembler(c => c.vextracti64x4(__ymmword_ptr[rcx].k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vextractps_reg32_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vextractps(edx, xmm3, -5), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vextractps_reg64_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vextractps(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vextractps_r64m32_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vextractps_r64m32_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vextractps_m_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vextractps_reg32_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vextractps(edx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(edx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vextractps_reg64_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vextractps(rdx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vextractps_r64m32_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(rdx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vextractps_r64m32_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vextractps_m_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmpd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmps_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmsd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmsd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmsd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmsd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmss_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmss_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmss_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfixupimmss_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd132pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd132pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmadd132pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd132pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmadd132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd132ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd132ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmadd132ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd132ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmadd132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd132ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd213pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd213pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmadd213pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd213pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmadd213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd213ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd213ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmadd213ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd213ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmadd213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd213ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd231pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd231pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmadd231pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd231pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmadd231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd231ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd231ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmadd231ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmadd231ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmadd231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmadd231ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmadd231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmaddpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmaddpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddpd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmaddpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddpd_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmaddpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmaddps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmaddps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmaddps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmaddps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddps_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmaddps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddps_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddps_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmaddps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddps_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmaddsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmaddsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmaddsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddss_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmaddss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddss_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmaddss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddss_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmaddss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddss_xmm_xmm_xmm_xmmm32, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub132pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub132pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub132pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmaddsub132pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub132pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmaddsub132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub132ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub132ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub132ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmaddsub132ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub132ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub132ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmaddsub132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub213pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub213pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub213pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmaddsub213pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub213pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmaddsub213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub213ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub213ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub213ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmaddsub213ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub213ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub213ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmaddsub213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub231pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub231pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub231pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmaddsub231pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub231pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmaddsub231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub231ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub231ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub231ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmaddsub231ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmaddsub231ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmaddsub231ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmaddsub231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmaddsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmaddsubpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmaddsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmaddsubpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubpd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmaddsubpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubpd_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmaddsubpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmaddsubps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmaddsubps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmaddsubps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmaddsubps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubps_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmaddsubps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmaddsubps_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmaddsubps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub132pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub132pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsub132pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub132pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsub132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub132ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub132ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsub132ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub132ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsub132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub132ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub213pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub213pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsub213pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub213pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsub213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub213ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub213ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsub213ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub213ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsub213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub213ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub231pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub231pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsub231pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub231pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsub231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub231ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub231ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsub231ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsub231ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsub231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsub231ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsub231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd132pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd132pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd132pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsubadd132pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd132pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsubadd132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd132ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd132ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd132ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsubadd132ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd132ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd132ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsubadd132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd213pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd213pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd213pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsubadd213pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd213pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsubadd213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd213ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd213ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd213ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsubadd213ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd213ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd213ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsubadd213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd231pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd231pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd231pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsubadd231pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd231pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsubadd231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd231ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd231ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd231ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfmsubadd231ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfmsubadd231ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfmsubadd231ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfmsubadd231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmsubaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmsubaddpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmsubaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmsubaddpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddpd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmsubaddpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddpd_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmsubaddpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmsubaddps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmsubaddps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmsubaddps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmsubaddps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddps_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmsubaddps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubaddps_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmsubaddps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmsubpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmsubpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubpd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmsubpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubpd_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmsubpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmsubps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmsubps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfmsubps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfmsubps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubps_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmsubps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubps_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubps_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfmsubps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubps_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubsd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmsubsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubsd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmsubsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubsd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmsubsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubss_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfmsubss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubss_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfmsubss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfmsubss_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfmsubss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubss_xmm_xmm_xmm_xmmm32, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd132pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd132pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmadd132pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd132pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmadd132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd132ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd132ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmadd132ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd132ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmadd132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd132ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd213pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd213pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmadd213pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd213pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmadd213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd213ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd213ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmadd213ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd213ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmadd213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd213ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd231pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd231pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmadd231pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd231pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmadd231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd231ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd231ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmadd231ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmadd231ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmadd231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmadd231ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmadd231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmaddpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfnmaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfnmaddpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddpd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmaddpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddpd_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfnmaddpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmaddps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmaddps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfnmaddps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfnmaddps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddps_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmaddps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddps_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfnmaddps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddsd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmaddsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddsd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmaddsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddsd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmaddsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddss_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmaddss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddss_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmaddss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmaddss_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmaddss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub132pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub132pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmsub132pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub132pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmsub132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub132ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub132ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmsub132ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub132ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmsub132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub132ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub213pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub213pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmsub213pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub213pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmsub213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub213ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub213ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmsub213ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub213ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmsub213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub213ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231pd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231pd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231pd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub231pd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub231pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmsub231pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231pd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231pd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231pd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231pd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub231pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmsub231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231ps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231ps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231ps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub231ps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub231ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vfnmsub231ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231ps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231ps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231ps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231ps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfnmsub231ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vfnmsub231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231sd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231sd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231sd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231sd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231ss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231ss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vfnmsub231ss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vfnmsub231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231ss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubpd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubpd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmsubpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubpd_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfnmsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubpd_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfnmsubpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubpd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmsubpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubpd_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfnmsubpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubps_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmsubps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubps_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmsubps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubps_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vfnmsubps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubps_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vfnmsubps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubps_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmsubps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubps_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vfnmsubps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubsd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmsubsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubsd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmsubsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubsd_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmsubsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubss_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vfnmsubss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubss_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vfnmsubss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vfnmsubss_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vfnmsubss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_regXMM_i() {
			TestAssembler(c => c.vfpclasspd(k2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_regYMM_i() {
			TestAssembler(c => c.vfpclasspd(k2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, k2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_regZMM_i() {
			TestAssembler(c => c.vfpclasspd(k2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.ZwordPtr) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __zmmword_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __ymmword_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, k2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness), -5)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __xmmword_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness), -5)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vfpclasspd(k2.k1, __byte_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5)));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_regXMM_u() {
			TestAssembler(c => c.vfpclasspd(k2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_regYMM_u() {
			TestAssembler(c => c.vfpclasspd(k2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, k2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_regZMM_u() {
			TestAssembler(c => c.vfpclasspd(k2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspd_regK_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.ZwordPtr) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __zmmword_ptr[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __ymmword_ptr[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, k2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __xmmword_ptr[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)));
			}
			{
				// Already tested by signed version
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspdx_regK_m_i() {
			TestAssembler(c => c.vfpclasspdx(k2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspdx_regK_m_u() {
			TestAssembler(c => c.vfpclasspdx(k2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspdy_regK_m_i() {
			TestAssembler(c => c.vfpclasspdy(k2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, k2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspdy_regK_m_u() {
			TestAssembler(c => c.vfpclasspdy(k2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, k2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspdz_regK_m_i() {
			TestAssembler(c => c.vfpclasspdz(k2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspdz_regK_m_u() {
			TestAssembler(c => c.vfpclasspdz(k2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, k2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_regXMM_i() {
			TestAssembler(c => c.vfpclassps(k2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_regYMM_i() {
			TestAssembler(c => c.vfpclassps(k2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, k2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_regZMM_i() {
			TestAssembler(c => c.vfpclassps(k2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclassps(k2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.ZwordPtr) */
				TestAssembler(c => c.vfpclassps(k2.k1, __zmmword_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vfpclassps(k2.k1, __ymmword_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, k2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness), -5)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vfpclassps(k2.k1, __xmmword_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness), -5)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vfpclassps(k2.k1, __byte_ptr[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5)));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_regXMM_u() {
			TestAssembler(c => c.vfpclassps(k2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_regYMM_u() {
			TestAssembler(c => c.vfpclassps(k2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, k2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_regZMM_u() {
			TestAssembler(c => c.vfpclassps(k2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassps_regK_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclassps(k2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.ZwordPtr) */
				TestAssembler(c => c.vfpclassps(k2.k1, __zmmword_ptr[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.YwordPtr) */
				TestAssembler(c => c.vfpclassps(k2.k1, __ymmword_ptr[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, k2.k1, __ymmword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.OwordPtr) */
				TestAssembler(c => c.vfpclassps(k2.k1, __xmmword_ptr[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, __xmmword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)));
			}
			{
				// Already tested by signed version
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspsx_regK_m_i() {
			TestAssembler(c => c.vfpclasspsx(k2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspsx_regK_m_u() {
			TestAssembler(c => c.vfpclasspsx(k2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspsy_regK_m_i() {
			TestAssembler(c => c.vfpclasspsy(k2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, k2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspsy_regK_m_u() {
			TestAssembler(c => c.vfpclasspsy(k2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, k2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspsz_regK_m_i() {
			TestAssembler(c => c.vfpclasspsz(k2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasspsz_regK_m_u() {
			TestAssembler(c => c.vfpclasspsz(k2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, k2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasssd_regK_regXMM_i() {
			TestAssembler(c => c.vfpclasssd(k2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, k2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasssd_regK_m_i() {
			TestAssembler(c => c.vfpclasssd(k2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasssd_regK_regXMM_u() {
			TestAssembler(c => c.vfpclasssd(k2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, k2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclasssd_regK_m_u() {
			TestAssembler(c => c.vfpclasssd(k2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassss_regK_regXMM_i() {
			TestAssembler(c => c.vfpclassss(k2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, k2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassss_regK_m_i() {
			TestAssembler(c => c.vfpclassss(k2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassss_regK_regXMM_u() {
			TestAssembler(c => c.vfpclassss(k2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, k2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vfpclassss_regK_m_u() {
			TestAssembler(c => c.vfpclassss(k2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, k2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczpd_regXMM_regXMM() {
			TestAssembler(c => c.vfrczpd(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczpd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczpd_regYMM_regYMM() {
			TestAssembler(c => c.vfrczpd(ymm2, ymm3), Instruction.Create(Code.XOP_Vfrczpd_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczpd_regXMM_m() {
			TestAssembler(c => c.vfrczpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczpd_regYMM_m() {
			TestAssembler(c => c.vfrczpd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczpd_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczps_regXMM_regXMM() {
			TestAssembler(c => c.vfrczps(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczps_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczps_regYMM_regYMM() {
			TestAssembler(c => c.vfrczps(ymm2, ymm3), Instruction.Create(Code.XOP_Vfrczps_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczps_regXMM_m() {
			TestAssembler(c => c.vfrczps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczps_regYMM_m() {
			TestAssembler(c => c.vfrczps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczsd_regXMM_regXMM() {
			TestAssembler(c => c.vfrczsd(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczsd_xmm_xmmm64, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczsd_regXMM_m() {
			TestAssembler(c => c.vfrczsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczsd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczss_regXMM_regXMM() {
			TestAssembler(c => c.vfrczss(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczss_xmm_xmmm32, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vfrczss_regXMM_m() {
			TestAssembler(c => c.vfrczss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherdpd_regXMM_m() {
			TestAssembler(c => c.vgatherdpd(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherdpd_xmm_k1_vm32x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherdpd_regYMM_m() {
			TestAssembler(c => c.vgatherdpd(ymm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherdpd_ymm_k1_vm32x, ymm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherdpd_regZMM_m() {
			TestAssembler(c => c.vgatherdpd(zmm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherdpd_zmm_k1_vm32y, zmm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherdpd_regXMM_m_regXMM() {
			TestAssembler(c => c.vgatherdpd(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherdpd_xmm_vm32x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherdpd_regYMM_m_regYMM() {
			TestAssembler(c => c.vgatherdpd(ymm2, __[rdx + xmm3], ymm4), Instruction.Create(Code.VEX_Vgatherdpd_ymm_vm32x_ymm, ymm2, __[rdx + xmm3].ToMemoryOperand(Bitness), ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherdps_regXMM_m() {
			TestAssembler(c => c.vgatherdps(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherdps_xmm_k1_vm32x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherdps_regYMM_m() {
			TestAssembler(c => c.vgatherdps(ymm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherdps_ymm_k1_vm32y, ymm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherdps_regZMM_m() {
			TestAssembler(c => c.vgatherdps(zmm2.k1, __[rdx + zmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherdps_zmm_k1_vm32z, zmm2.k1, __[rdx + zmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherdps_regXMM_m_regXMM() {
			TestAssembler(c => c.vgatherdps(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherdps_xmm_vm32x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherdps_regYMM_m_regYMM() {
			TestAssembler(c => c.vgatherdps(ymm2, __[rdx + ymm3], ymm4), Instruction.Create(Code.VEX_Vgatherdps_ymm_vm32y_ymm, ymm2, __[rdx + ymm3].ToMemoryOperand(Bitness), ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf0dpd_m() {
			TestAssembler(c => c.vgatherpf0dpd(__[rdx + ymm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf0dpd_vm32y_k1, __[rdx + ymm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf0dps_m() {
			TestAssembler(c => c.vgatherpf0dps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf0dps_vm32z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf0qpd_m() {
			TestAssembler(c => c.vgatherpf0qpd(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf0qpd_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf0qps_m() {
			TestAssembler(c => c.vgatherpf0qps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf0qps_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf1dpd_m() {
			TestAssembler(c => c.vgatherpf1dpd(__[rdx + ymm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf1dpd_vm32y_k1, __[rdx + ymm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf1dps_m() {
			TestAssembler(c => c.vgatherpf1dps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf1dps_vm32z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf1qpd_m() {
			TestAssembler(c => c.vgatherpf1qpd(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf1qpd_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherpf1qps_m() {
			TestAssembler(c => c.vgatherpf1qps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vgatherpf1qps_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherqpd_regXMM_m() {
			TestAssembler(c => c.vgatherqpd(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqpd_xmm_k1_vm64x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherqpd_regYMM_m() {
			TestAssembler(c => c.vgatherqpd(ymm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqpd_ymm_k1_vm64y, ymm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherqpd_regZMM_m() {
			TestAssembler(c => c.vgatherqpd(zmm2.k1, __[rdx + zmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqpd_zmm_k1_vm64z, zmm2.k1, __[rdx + zmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherqpd_regXMM_m_regXMM() {
			TestAssembler(c => c.vgatherqpd(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherqpd_xmm_vm64x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherqpd_regYMM_m_regYMM() {
			TestAssembler(c => c.vgatherqpd(ymm2, __[rdx + ymm3], ymm4), Instruction.Create(Code.VEX_Vgatherqpd_ymm_vm64y_ymm, ymm2, __[rdx + ymm3].ToMemoryOperand(Bitness), ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherqps_regXMM_m() {
			{ /* if (src.Index.IsXMM()) */
				TestAssembler(c => c.vgatherqps(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqps_xmm_k1_vm64x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Index.IsYMM()) */
				TestAssembler(c => c.vgatherqps(xmm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqps_xmm_k1_vm64y, xmm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vgatherqps(xmm2.k1, __[rdx + zmm1]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqps_xmm_k1_vm64y, xmm2.k1, __[rdx + zmm1].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgatherqps_regYMM_m() {
			TestAssembler(c => c.vgatherqps(ymm2.k1, __[rdx + zmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vgatherqps_ymm_k1_vm64z, ymm2.k1, __[rdx + zmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vgatherqps_regXMM_m_regXMM() {
			{ /* if (src1.Index.IsXMM()) */
				TestAssembler(c => c.vgatherqps(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherqps_xmm_vm64x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
			} /* else */ { /* if (src1.Index.IsYMM()) */
				TestAssembler(c => c.vgatherqps(xmm2, __[rdx + ymm3], xmm4), Instruction.Create(Code.VEX_Vgatherqps_xmm_vm64y_xmm, xmm2, __[rdx + ymm3].ToMemoryOperand(Bitness), xmm4));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vgatherqps(xmm2, __[rdx + zmm1], xmm4), Instruction.Create(Code.VEX_Vgatherqps_xmm_vm64y_xmm, xmm2, __[rdx + zmm1].ToMemoryOperand(Bitness), xmm4));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexppd_regXMM_regXMM() {
			TestAssembler(c => c.vgetexppd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vgetexppd_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexppd_regYMM_regYMM() {
			TestAssembler(c => c.vgetexppd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vgetexppd_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexppd_regZMM_regZMM() {
			TestAssembler(c => c.vgetexppd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexppd_regXMM_m() {
			TestAssembler(c => c.vgetexppd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexppd_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexppd_regYMM_m() {
			TestAssembler(c => c.vgetexppd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexppd_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexppd_regZMM_m() {
			TestAssembler(c => c.vgetexppd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpps_regXMM_regXMM() {
			TestAssembler(c => c.vgetexpps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpps_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpps_regYMM_regYMM() {
			TestAssembler(c => c.vgetexpps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpps_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpps_regZMM_regZMM() {
			TestAssembler(c => c.vgetexpps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpps_regXMM_m() {
			TestAssembler(c => c.vgetexpps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpps_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpps_regYMM_m() {
			TestAssembler(c => c.vgetexpps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpps_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpps_regZMM_m() {
			TestAssembler(c => c.vgetexpps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vgetexpsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vgetexpsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vgetexpss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetexpss_regXMM_regXMM_m() {
			TestAssembler(c => c.vgetexpss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regXMM_regXMM_i() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regYMM_regYMM_i() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regZMM_regZMM_i() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regXMM_m_i() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regYMM_m_i() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regZMM_m_i() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regXMM_regXMM_u() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regYMM_regYMM_u() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regZMM_regZMM_u() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regXMM_m_u() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regYMM_m_u() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantpd_regZMM_m_u() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regXMM_regXMM_i() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regYMM_regYMM_i() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regZMM_regZMM_i() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regXMM_m_i() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regYMM_m_i() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regZMM_m_i() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regXMM_regXMM_u() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regYMM_regYMM_u() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regZMM_regZMM_u() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regXMM_m_u() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regYMM_m_u() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantps_regZMM_m_u() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantsd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantsd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantsd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantsd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantss_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantss_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantss_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgetmantss_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regYMM_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regXMM_regXMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regYMM_regYMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regYMM_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regXMM_regXMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regYMM_regYMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineinvqb_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regYMM_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regXMM_regXMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regYMM_regYMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regYMM_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regXMM_regXMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regYMM_regYMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8affineqb_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8mulb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8mulb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vgf2p8mulb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8mulb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8mulb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vgf2p8mulb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8mulb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vgf2p8mulb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8mulb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8mulb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vgf2p8mulb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vgf2p8mulb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vgf2p8mulb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vgf2p8mulb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vgf2p8mulb_regZMM_regZMM_m() {
			TestAssembler(c => c.vgf2p8mulb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vhaddpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhaddpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vhaddpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhaddpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vhaddpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vhaddpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vhaddps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhaddps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vhaddps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhaddps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddps_regXMM_regXMM_m() {
			TestAssembler(c => c.vhaddps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhaddps_regYMM_regYMM_m() {
			TestAssembler(c => c.vhaddps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vhsubpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhsubpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vhsubpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhsubpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vhsubpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vhsubpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vhsubps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhsubps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vhsubps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhsubps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubps_regXMM_regXMM_m() {
			TestAssembler(c => c.vhsubps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vhsubps_regYMM_regYMM_m() {
			TestAssembler(c => c.vhsubps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinsertf128_regYMM_regYMM_regXMM_i() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, xmm4, -5), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinsertf128_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinsertf128_regYMM_regYMM_regXMM_u() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinsertf128_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regYMM_regYMM_regXMM_i() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regZMM_regZMM_regXMM_i() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regYMM_regYMM_regXMM_u() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regZMM_regZMM_regXMM_u() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x4_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x8_regZMM_regZMM_regYMM_i() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x8_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x8_regZMM_regZMM_regYMM_u() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf32x8_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regYMM_regYMM_regXMM_i() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regZMM_regZMM_regXMM_i() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regYMM_regYMM_regXMM_u() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regZMM_regZMM_regXMM_u() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x2_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x4_regZMM_regZMM_regYMM_i() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x4_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x4_regZMM_regZMM_regYMM_u() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinsertf64x4_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinserti128_regYMM_regYMM_regXMM_i() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, xmm4, -5), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinserti128_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinserti128_regYMM_regYMM_regXMM_u() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vinserti128_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regYMM_regYMM_regXMM_i() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regZMM_regZMM_regXMM_i() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regYMM_regYMM_regXMM_u() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regZMM_regZMM_regXMM_u() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x4_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x8_regZMM_regZMM_regYMM_i() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x8_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x8_regZMM_regZMM_regYMM_u() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti32x8_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regYMM_regYMM_regXMM_i() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regZMM_regZMM_regXMM_i() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regYMM_regYMM_regXMM_u() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regZMM_regZMM_regXMM_u() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x2_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x4_regZMM_regZMM_regYMM_i() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x4_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x4_regZMM_regZMM_regYMM_u() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vinserti64x4_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, zmm2.k1, zmm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vinsertps_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vinsertps_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vinsertps_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vinsertps_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vlddqu_regXMM_m() {
			TestAssembler(c => c.vlddqu(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vlddqu_xmm_m128, xmm2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vlddqu_regYMM_m() {
			TestAssembler(c => c.vlddqu(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vlddqu_ymm_m256, ymm2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vldmxcsr_m() {
			TestAssembler(c => c.vldmxcsr(__[rcx]), Instruction.Create(Code.VEX_Vldmxcsr_m32, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovdqu_regXMM_regXMM() {
			TestAssembler(c => c.vmaskmovdqu(xmm2, xmm3), Instruction.CreateVmaskmovdqu(Bitness, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovpd_m_regXMM_regXMM() {
			TestAssembler(c => c.vmaskmovpd(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vmaskmovpd_m128_xmm_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovpd_m_regYMM_regYMM() {
			TestAssembler(c => c.vmaskmovpd(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vmaskmovpd_m256_ymm_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vmaskmovpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovpd_xmm_xmm_m128, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vmaskmovpd(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovpd_ymm_ymm_m256, ymm2, ymm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovps_m_regXMM_regXMM() {
			TestAssembler(c => c.vmaskmovps(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vmaskmovps_m128_xmm_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovps_m_regYMM_regYMM() {
			TestAssembler(c => c.vmaskmovps(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vmaskmovps_m256_ymm_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovps_regXMM_regXMM_m() {
			TestAssembler(c => c.vmaskmovps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovps_xmm_xmm_m128, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmaskmovps_regYMM_regYMM_m() {
			TestAssembler(c => c.vmaskmovps(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovps_ymm_ymm_m256, ymm2, ymm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmaxpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmaxpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vmaxpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmaxpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmaxpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmaxpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vmaxpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmaxps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmaxps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vmaxps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmaxps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmaxps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmaxps_regZMM_regZMM_m() {
			TestAssembler(c => c.vmaxps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmaxss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmaxss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

		[Fact]
		public void vmcall() {
			TestAssembler(c => c.vmcall(), Instruction.Create(Code.Vmcall));
		}

		[Fact]
		public void vmclear_m() {
			TestAssembler(c => c.vmclear(__[rcx]), Instruction.Create(Code.Vmclear_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void vmfunc() {
			TestAssembler(c => c.vmfunc(), Instruction.Create(Code.Vmfunc));
		}

		[Fact]
		public void vmgexit() {
			TestAssembler(c => c.vmgexit(), Instruction.Create(Code.Vmgexit));
		}

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vminpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vminpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vminpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vminpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vminpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vminpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vminpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vminps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vminps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vminps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vminps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vminps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vminps_regZMM_regZMM_m() {
			TestAssembler(c => c.vminps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vminss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vminss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

		[Fact]
		public void vmlaunch() {
			TestAssembler(c => c.vmlaunch(), Instruction.Create(Code.Vmlaunch));
		}

		[Fact]
		public void vmload() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.vmload(), Instruction.Create(Code.Vmloadq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void vmmcall() {
			TestAssembler(c => c.vmmcall(), Instruction.Create(Code.Vmmcall));
		}

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovapd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovapd(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovapd_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovapd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovapd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovapd_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovapd_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovapd(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovapd_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovapd_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovapd(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovapd_ymmm256_ymm, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovapd_regZMM_regZMM() {
			TestAssembler(c => c.vmovapd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovapd_m_regZMM() {
			TestAssembler(c => c.vmovapd(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovapd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovapd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovapd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovapd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovapd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovapd_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovapd_regZMM_m() {
			TestAssembler(c => c.vmovapd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovapd_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovaps_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovaps(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovaps_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovaps_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovaps(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovaps_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovaps_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovaps(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovaps_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovaps_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovaps(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovaps_ymmm256_ymm, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovaps_regZMM_regZMM() {
			TestAssembler(c => c.vmovaps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovaps_m_regZMM() {
			TestAssembler(c => c.vmovaps(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovaps_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovaps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovaps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovaps_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovaps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovaps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovaps_regZMM_m() {
			TestAssembler(c => c.vmovaps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovaps_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovd_regXMM_reg32() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovd(xmm2, ebx), Instruction.Create(Code.VEX_Vmovd_xmm_rm32, xmm2, ebx), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(xmm2, ebx), Instruction.Create(Code.EVEX_Vmovd_xmm_rm32, xmm2, ebx), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovd_reg32_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovd(edx, xmm3), Instruction.Create(Code.VEX_Vmovd_rm32_xmm, edx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(edx, xmm3), Instruction.Create(Code.EVEX_Vmovd_rm32_xmm, edx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovd(__dword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovd_rm32_xmm, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(__dword_ptr[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovd_rm32_xmm, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovd(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovd_xmm_rm32, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.EVEX_Vmovd_xmm_rm32, xmm2, __dword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovddup_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovddup(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovddup_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovddup_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovddup_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovddup(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovddup_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovddup_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovddup_regZMM_regZMM() {
			TestAssembler(c => c.vmovddup(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovddup_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovddup_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovddup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovddup_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovddup_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovddup_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovddup(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovddup_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovddup_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovddup_regZMM_m() {
			TestAssembler(c => c.vmovddup(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovddup_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqa_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqa(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovdqa_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqa_m_regXMM() {
			TestAssembler(c => c.vmovdqa(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovdqa_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqa_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqa(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovdqa_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqa_m_regYMM() {
			TestAssembler(c => c.vmovdqa(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovdqa_ymmm256_ymm, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqa_regXMM_m() {
			TestAssembler(c => c.vmovdqa(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqa_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqa_regYMM_m() {
			TestAssembler(c => c.vmovdqa(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqa_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqa32(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_m_regXMM() {
			TestAssembler(c => c.vmovdqa32(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqa32(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_m_regYMM() {
			TestAssembler(c => c.vmovdqa32(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_regZMM_regZMM() {
			TestAssembler(c => c.vmovdqa32(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_m_regZMM() {
			TestAssembler(c => c.vmovdqa32(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_regXMM_m() {
			TestAssembler(c => c.vmovdqa32(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_regYMM_m() {
			TestAssembler(c => c.vmovdqa32(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa32_regZMM_m() {
			TestAssembler(c => c.vmovdqa32(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa32_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqa64(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_m_regXMM() {
			TestAssembler(c => c.vmovdqa64(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqa64(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_m_regYMM() {
			TestAssembler(c => c.vmovdqa64(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_regZMM_regZMM() {
			TestAssembler(c => c.vmovdqa64(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_m_regZMM() {
			TestAssembler(c => c.vmovdqa64(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_regXMM_m() {
			TestAssembler(c => c.vmovdqa64(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_regYMM_m() {
			TestAssembler(c => c.vmovdqa64(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqa64_regZMM_m() {
			TestAssembler(c => c.vmovdqa64(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqa64_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqu_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqu(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovdqu_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqu_m_regXMM() {
			TestAssembler(c => c.vmovdqu(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovdqu_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqu_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqu(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovdqu_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqu_m_regYMM() {
			TestAssembler(c => c.vmovdqu(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovdqu_ymmm256_ymm, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqu_regXMM_m() {
			TestAssembler(c => c.vmovdqu(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqu_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovdqu_regYMM_m() {
			TestAssembler(c => c.vmovdqu(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqu_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqu16(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_m_regXMM() {
			TestAssembler(c => c.vmovdqu16(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqu16(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_m_regYMM() {
			TestAssembler(c => c.vmovdqu16(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_regZMM_regZMM() {
			TestAssembler(c => c.vmovdqu16(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_m_regZMM() {
			TestAssembler(c => c.vmovdqu16(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_regXMM_m() {
			TestAssembler(c => c.vmovdqu16(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_regYMM_m() {
			TestAssembler(c => c.vmovdqu16(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu16_regZMM_m() {
			TestAssembler(c => c.vmovdqu16(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu16_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqu32(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_m_regXMM() {
			TestAssembler(c => c.vmovdqu32(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqu32(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_m_regYMM() {
			TestAssembler(c => c.vmovdqu32(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_regZMM_regZMM() {
			TestAssembler(c => c.vmovdqu32(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_m_regZMM() {
			TestAssembler(c => c.vmovdqu32(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_regXMM_m() {
			TestAssembler(c => c.vmovdqu32(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_regYMM_m() {
			TestAssembler(c => c.vmovdqu32(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu32_regZMM_m() {
			TestAssembler(c => c.vmovdqu32(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu32_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqu64(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_m_regXMM() {
			TestAssembler(c => c.vmovdqu64(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqu64(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_m_regYMM() {
			TestAssembler(c => c.vmovdqu64(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_regZMM_regZMM() {
			TestAssembler(c => c.vmovdqu64(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_m_regZMM() {
			TestAssembler(c => c.vmovdqu64(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_regXMM_m() {
			TestAssembler(c => c.vmovdqu64(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_regYMM_m() {
			TestAssembler(c => c.vmovdqu64(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu64_regZMM_m() {
			TestAssembler(c => c.vmovdqu64(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu64_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_regXMM_regXMM() {
			TestAssembler(c => c.vmovdqu8(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_m_regXMM() {
			TestAssembler(c => c.vmovdqu8(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_regYMM_regYMM() {
			TestAssembler(c => c.vmovdqu8(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_m_regYMM() {
			TestAssembler(c => c.vmovdqu8(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_regZMM_regZMM() {
			TestAssembler(c => c.vmovdqu8(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_m_regZMM() {
			TestAssembler(c => c.vmovdqu8(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_regXMM_m() {
			TestAssembler(c => c.vmovdqu8(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_regYMM_m() {
			TestAssembler(c => c.vmovdqu8(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovdqu8_regZMM_m() {
			TestAssembler(c => c.vmovdqu8(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovdqu8_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovhlps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovhlps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovhlps_xmm_xmm_xmm, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhlps(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vmovhlps_xmm_xmm_xmm, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovhpd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovhpd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovhpd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhpd(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovhpd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovhpd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovhpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovhpd_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovhpd_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovhps_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovhps(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovhps_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhps(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovhps_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovhps_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovhps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovhps_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovhps_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovlhps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovlhps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovlhps_xmm_xmm_xmm, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlhps(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vmovlhps_xmm_xmm_xmm, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovlpd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovlpd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovlpd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlpd(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovlpd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovlpd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovlpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovlpd_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovlpd_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovlps_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovlps(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovlps_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlps(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovlps_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovlps_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovlps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovlps_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovlps_xmm_xmm_m64, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskpd_reg32_regXMM() {
			TestAssembler(c => c.vmovmskpd(edx, xmm3), Instruction.Create(Code.VEX_Vmovmskpd_r32_xmm, edx, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskpd_reg64_regXMM() {
			TestAssembler(c => c.vmovmskpd(rdx, xmm3), Instruction.Create(Code.VEX_Vmovmskpd_r64_xmm, rdx, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskpd_reg32_regYMM() {
			TestAssembler(c => c.vmovmskpd(edx, ymm3), Instruction.Create(Code.VEX_Vmovmskpd_r32_ymm, edx, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskpd_reg64_regYMM() {
			TestAssembler(c => c.vmovmskpd(rdx, ymm3), Instruction.Create(Code.VEX_Vmovmskpd_r64_ymm, rdx, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskps_reg32_regXMM() {
			TestAssembler(c => c.vmovmskps(edx, xmm3), Instruction.Create(Code.VEX_Vmovmskps_r32_xmm, edx, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskps_reg64_regXMM() {
			TestAssembler(c => c.vmovmskps(rdx, xmm3), Instruction.Create(Code.VEX_Vmovmskps_r64_xmm, rdx, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskps_reg32_regYMM() {
			TestAssembler(c => c.vmovmskps(edx, ymm3), Instruction.Create(Code.VEX_Vmovmskps_r32_ymm, edx, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmovmskps_reg64_regYMM() {
			TestAssembler(c => c.vmovmskps(rdx, ymm3), Instruction.Create(Code.VEX_Vmovmskps_r64_ymm, rdx, ymm3));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntdq_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntdq(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovntdq_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdq(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovntdq_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntdq_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntdq(__[rcx], ymm3), Instruction.Create(Code.VEX_Vmovntdq_m256_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdq(__[rcx], ymm3), Instruction.Create(Code.EVEX_Vmovntdq_m256_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovntdq_m_regZMM() {
			TestAssembler(c => c.vmovntdq(__[rcx], zmm3), Instruction.Create(Code.EVEX_Vmovntdq_m512_zmm, __[rcx].ToMemoryOperand(Bitness), zmm3));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntdqa_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntdqa(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vmovntdqa_xmm_m128, xmm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdqa(xmm2, __[rcx]), Instruction.Create(Code.EVEX_Vmovntdqa_xmm_m128, xmm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntdqa_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntdqa(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vmovntdqa_ymm_m256, ymm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdqa(ymm2, __[rcx]), Instruction.Create(Code.EVEX_Vmovntdqa_ymm_m256, ymm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovntdqa_regZMM_m() {
			TestAssembler(c => c.vmovntdqa(zmm2, __[rcx]), Instruction.Create(Code.EVEX_Vmovntdqa_zmm_m512, zmm2, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntpd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntpd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovntpd_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntpd(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovntpd_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntpd_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntpd(__[rcx], ymm3), Instruction.Create(Code.VEX_Vmovntpd_m256_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntpd(__[rcx], ymm3), Instruction.Create(Code.EVEX_Vmovntpd_m256_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovntpd_m_regZMM() {
			TestAssembler(c => c.vmovntpd(__[rcx], zmm3), Instruction.Create(Code.EVEX_Vmovntpd_m512_zmm, __[rcx].ToMemoryOperand(Bitness), zmm3));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntps_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntps(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovntps_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntps(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovntps_m128_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovntps_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovntps(__[rcx], ymm3), Instruction.Create(Code.VEX_Vmovntps_m256_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntps(__[rcx], ymm3), Instruction.Create(Code.EVEX_Vmovntps_m256_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovntps_m_regZMM() {
			TestAssembler(c => c.vmovntps(__[rcx], zmm3), Instruction.Create(Code.EVEX_Vmovntps_m512_zmm, __[rcx].ToMemoryOperand(Bitness), zmm3));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovq_regXMM_reg64() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovq(xmm2, rbx), Instruction.Create(Code.VEX_Vmovq_xmm_rm64, xmm2, rbx), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(xmm2, rbx), Instruction.Create(Code.EVEX_Vmovq_xmm_rm64, xmm2, rbx), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovq_reg64_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovq(rdx, xmm3), Instruction.Create(Code.VEX_Vmovq_rm64_xmm, rdx, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(rdx, xmm3), Instruction.Create(Code.EVEX_Vmovq_rm64_xmm, rdx, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovq(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovq_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(xmm2, xmm3), Instruction.Create(Code.EVEX_Vmovq_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovq_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovq(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovq_xmmm64_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovq_xmmm64_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vmovq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovsd_m64_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsd(__[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovsd_m64_k1_xmm, __[rcx].k1.ToMemoryOperand(Bitness), xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsd(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vmovsd_xmm_m64, xmm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsd(xmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovsd_xmm_k1z_m64, xmm2.k1, __[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovsd_xmm_xmm_xmm, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmovsd_xmm_k1z_xmm_xmm, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovshdup_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovshdup(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovshdup_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovshdup_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovshdup_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovshdup(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovshdup_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovshdup_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovshdup_regZMM_regZMM() {
			TestAssembler(c => c.vmovshdup(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovshdup_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovshdup_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovshdup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovshdup_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovshdup_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovshdup_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovshdup(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovshdup_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovshdup_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovshdup_regZMM_m() {
			TestAssembler(c => c.vmovshdup(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovshdup_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsldup_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsldup(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovsldup_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovsldup_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsldup_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsldup(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovsldup_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovsldup_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovsldup_regZMM_regZMM() {
			TestAssembler(c => c.vmovsldup(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovsldup_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsldup_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsldup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovsldup_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovsldup_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovsldup_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovsldup(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovsldup_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovsldup_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovsldup_regZMM_m() {
			TestAssembler(c => c.vmovsldup(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovsldup_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovss_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovss(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovss_m32_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovss(__[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovss_m32_k1_xmm, __[rcx].k1.ToMemoryOperand(Bitness), xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovss_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovss(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vmovss_xmm_m32, xmm2, __[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovss(xmm2.k1, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovss_xmm_k1z_m32, xmm2.k1, __[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovss_xmm_xmm_xmm, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmovss_xmm_k1z_xmm_xmm, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovupd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovupd(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovupd_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovupd_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovupd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovupd_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovupd_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovupd(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovupd_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovupd_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovupd(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovupd_ymmm256_ymm, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovupd_regZMM_regZMM() {
			TestAssembler(c => c.vmovupd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovupd_m_regZMM() {
			TestAssembler(c => c.vmovupd(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovupd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovupd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovupd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovupd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovupd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovupd_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovupd_regZMM_m() {
			TestAssembler(c => c.vmovupd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovupd_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovups_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovups(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovups_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovups_m_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovups(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovups_xmmm128_xmm, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovups_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovups(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovups_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovups_m_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovups(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovups_ymmm256_ymm, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovups_regZMM_regZMM() {
			TestAssembler(c => c.vmovups(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovups_m_regZMM() {
			TestAssembler(c => c.vmovups(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovups_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovups(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovups_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmovups_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmovups(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovups_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmovups_regZMM_m() {
			TestAssembler(c => c.vmovups(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmovups_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vmpsadbw_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

		[Fact]
		public void vmptrld_m() {
			TestAssembler(c => c.vmptrld(__[rcx]), Instruction.Create(Code.Vmptrld_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void vmptrst_m() {
			TestAssembler(c => c.vmptrst(__[rcx]), Instruction.Create(Code.Vmptrst_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void vmread_reg64_reg64() {
			TestAssembler(c => c.vmread(rdx, rbx), Instruction.Create(Code.Vmread_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void vmread_m_reg64() {
			TestAssembler(c => c.vmread(__qword_ptr[rcx], rbx), Instruction.Create(Code.Vmread_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void vmresume() {
			TestAssembler(c => c.vmresume(), Instruction.Create(Code.Vmresume));
		}

		[Fact]
		public void vmrun() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.vmrun(), Instruction.Create(Code.Vmrunq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void vmsave() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.vmsave(), Instruction.Create(Code.Vmsaveq));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmulpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmulpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vmulpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmulpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmulpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmulpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vmulpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmulps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmulps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vmulps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmulps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vmulps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vmulps_regZMM_regZMM_m() {
			TestAssembler(c => c.vmulps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vmulss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vmulss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

		[Fact]
		public void vmwrite_reg64_reg64() {
			TestAssembler(c => c.vmwrite(rdx, rbx), Instruction.Create(Code.Vmwrite_r64_rm64, rdx, rbx));
		}

		[Fact]
		public void vmwrite_reg64_m() {
			TestAssembler(c => c.vmwrite(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Vmwrite_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void vmxoff() {
			TestAssembler(c => c.vmxoff(), Instruction.Create(Code.Vmxoff));
		}

		[Fact]
		public void vmxon_m() {
			TestAssembler(c => c.vmxon(__[rcx]), Instruction.Create(Code.Vmxon_m64, __[rcx].ToMemoryOperand(Bitness)));
		}

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vorpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vorpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vorpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vorpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vorpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vorpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vorpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vorpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vorpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vorpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vorps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vorps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vorps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vorps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vorps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vorps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vorps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vorps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vorps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vorps_regZMM_regZMM_m() {
			TestAssembler(c => c.vorps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vp2intersectd(k2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, k2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vp2intersectd(k2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, k2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vp2intersectd(k2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, k2, zmm3, zmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectd_regK_regXMM_m() {
			TestAssembler(c => c.vp2intersectd(k2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, k2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectd_regK_regYMM_m() {
			TestAssembler(c => c.vp2intersectd(k2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, k2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectd_regK_regZMM_m() {
			TestAssembler(c => c.vp2intersectd(k2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, k2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectq_regK_regXMM_regXMM() {
			TestAssembler(c => c.vp2intersectq(k2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, k2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectq_regK_regYMM_regYMM() {
			TestAssembler(c => c.vp2intersectq(k2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, k2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectq_regK_regZMM_regZMM() {
			TestAssembler(c => c.vp2intersectq(k2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, k2, zmm3, zmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectq_regK_regXMM_m() {
			TestAssembler(c => c.vp2intersectq(k2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, k2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectq_regK_regYMM_m() {
			TestAssembler(c => c.vp2intersectq(k2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, k2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp2intersectq_regK_regZMM_m() {
			TestAssembler(c => c.vp2intersectq(k2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, k2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp4dpwssd_regZMM_regZMM_m() {
			TestAssembler(c => c.vp4dpwssd(zmm2.k1, zmm3, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128, zmm2.k1, zmm3, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vp4dpwssds_regZMM_regZMM_m() {
			TestAssembler(c => c.vp4dpwssds(zmm2.k1, zmm3, __[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128, zmm2.k1, zmm3, __[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsb_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsb(xmm2, xmm3), Instruction.Create(Code.VEX_Vpabsb_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsb_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsb_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsb(ymm2, ymm3), Instruction.Create(Code.VEX_Vpabsb_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsb_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsb_regZMM_regZMM() {
			TestAssembler(c => c.vpabsb(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsb_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsb_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsb_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsb_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsb_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsb(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsb_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsb_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsb_regZMM_m() {
			TestAssembler(c => c.vpabsb(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsb_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpabsd_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsd_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsd(ymm2, ymm3), Instruction.Create(Code.VEX_Vpabsd_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsd_regZMM_regZMM() {
			TestAssembler(c => c.vpabsd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_zmm_k1z_zmmm512b32, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsd_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vpabsd(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpabsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsd_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vpabsd(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpabsd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsd_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsd_regZMM_m() {
			TestAssembler(c => c.vpabsd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsd_zmm_k1z_zmmm512b32, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsq_regXMM_regXMM() {
			TestAssembler(c => c.vpabsq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsq_regYMM_regYMM() {
			TestAssembler(c => c.vpabsq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsq_regZMM_regZMM() {
			TestAssembler(c => c.vpabsq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsq_zmm_k1z_zmmm512b64, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsq_regXMM_m() {
			TestAssembler(c => c.vpabsq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsq_regYMM_m() {
			TestAssembler(c => c.vpabsq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsq_regZMM_m() {
			TestAssembler(c => c.vpabsq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsq_zmm_k1z_zmmm512b64, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsw_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpabsw_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsw_xmm_k1z_xmmm128, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsw_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsw(ymm2, ymm3), Instruction.Create(Code.VEX_Vpabsw_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsw_ymm_k1z_ymmm256, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsw_regZMM_regZMM() {
			TestAssembler(c => c.vpabsw(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpabsw_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsw_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsw_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpabsw_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpabsw(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsw_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsw_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpabsw_regZMM_m() {
			TestAssembler(c => c.vpabsw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpabsw_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackssdw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackssdw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpackssdw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackssdw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackssdw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpackssdw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpackssdw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpackssdw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackssdw_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackssdw(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpackssdw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackssdw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackssdw_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackssdw(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpackssdw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackssdw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpackssdw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpackssdw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpacksswb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpacksswb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpacksswb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpacksswb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpacksswb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpacksswb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpacksswb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpacksswb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpacksswb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpacksswb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpacksswb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpacksswb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpacksswb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpacksswb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpacksswb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpacksswb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackusdw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackusdw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpackusdw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackusdw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackusdw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpackusdw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpackusdw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpackusdw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackusdw_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackusdw(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpackusdw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackusdw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackusdw_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackusdw(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpackusdw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackusdw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpackusdw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpackusdw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackuswb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackuswb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpackuswb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackuswb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackuswb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpackuswb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpackuswb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpackuswb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackuswb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackuswb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackuswb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpackuswb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpackuswb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackuswb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpackuswb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpackuswb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpaddd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpaddd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpaddq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpaddq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddsb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddsb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddsb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddsb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddsb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddsw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddsw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddsw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddsw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddusb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddusb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddusb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddusb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddusb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddusb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddusw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddusw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddusw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddusw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddusw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddusw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddusw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddusw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpaddw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpaddw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpaddw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpaddw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpaddw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regYMM_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpalignr_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regYMM_regYMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpalignr_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regYMM_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpalignr_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpalignr_regYMM_regYMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpalignr_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpand_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpand(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpand_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpand_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpand(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpand_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpand_regXMM_regXMM_m() {
			TestAssembler(c => c.vpand(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpand_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpand_regYMM_regYMM_m() {
			TestAssembler(c => c.vpand(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpand_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpandd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpandd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpandd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpandd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpandd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpandd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpandn_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpandn(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpandn_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpandn_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpandn(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpandn_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpandn_regXMM_regXMM_m() {
			TestAssembler(c => c.vpandn(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpandn_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpandn_regYMM_regYMM_m() {
			TestAssembler(c => c.vpandn(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpandn_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpandnd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpandnd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpandnd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpandnd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpandnd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpandnd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpandnq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpandnq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpandnq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpandnq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpandnq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandnq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpandnq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpandq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpandq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpandq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpandq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpandq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpandq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpandq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpavgb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpavgb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpavgb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpavgb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpavgb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpavgb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpavgb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpavgb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpavgb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpavgb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpavgw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpavgw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpavgw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpavgw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpavgw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpavgw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpavgw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpavgw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpavgw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpavgw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpavgw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpavgw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpblendmb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmb_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpblendmb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpblendmb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpblendmb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmb_regYMM_regYMM_m() {
			TestAssembler(c => c.vpblendmb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpblendmb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpblendmd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpblendmd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpblendmd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpblendmd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpblendmd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpblendmd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpblendmq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpblendmq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpblendmq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpblendmq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpblendmq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpblendmq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpblendmw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpblendmw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpblendmw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpblendmw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpblendmw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpblendmw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpblendmw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendvb_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpblendvb(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendvb_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpblendvb(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendvb_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpblendvb(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendvb_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vpblendvb(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpblendw_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastb_regXMM_reg32() {
			TestAssembler(c => c.vpbroadcastb(xmm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_xmm_k1z_r32, xmm2.k1, ebx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastb_regYMM_reg32() {
			TestAssembler(c => c.vpbroadcastb(ymm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_ymm_k1z_r32, ymm2.k1, ebx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastb_regZMM_reg32() {
			TestAssembler(c => c.vpbroadcastb(zmm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_zmm_k1z_r32, zmm2.k1, ebx)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastb_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastb(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastb_xmm_xmmm8, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_xmm_k1z_xmmm8, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastb_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastb(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastb_ymm_xmmm8, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_ymm_k1z_xmmm8, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastb_regZMM_regXMM() {
			TestAssembler(c => c.vpbroadcastb(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_zmm_k1z_xmmm8, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastb_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastb_xmm_xmmm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_xmm_k1z_xmmm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastb_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastb(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastb_ymm_xmmm8, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_ymm_k1z_xmmm8, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastb_regZMM_m() {
			TestAssembler(c => c.vpbroadcastb(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastb_zmm_k1z_xmmm8, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastd_regXMM_reg32() {
			TestAssembler(c => c.vpbroadcastd(xmm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_xmm_k1z_r32, xmm2.k1, ebx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastd_regYMM_reg32() {
			TestAssembler(c => c.vpbroadcastd(ymm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_ymm_k1z_r32, ymm2.k1, ebx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastd_regZMM_reg32() {
			TestAssembler(c => c.vpbroadcastd(zmm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_zmm_k1z_r32, zmm2.k1, ebx)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastd_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_xmm_k1z_xmmm32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastd_ymm_xmmm32, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_ymm_k1z_xmmm32, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastd_regZMM_regXMM() {
			TestAssembler(c => c.vpbroadcastd(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_zmm_k1z_xmmm32, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastd_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_xmm_k1z_xmmm32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastd_ymm_xmmm32, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_ymm_k1z_xmmm32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastd_regZMM_m() {
			TestAssembler(c => c.vpbroadcastd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastd_zmm_k1z_xmmm32, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastmb2q_regXMM_regK() {
			TestAssembler(c => c.vpbroadcastmb2q(xmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmb2q_xmm_kr, xmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastmb2q_regYMM_regK() {
			TestAssembler(c => c.vpbroadcastmb2q(ymm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmb2q_ymm_kr, ymm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastmb2q_regZMM_regK() {
			TestAssembler(c => c.vpbroadcastmb2q(zmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmb2q_zmm_kr, zmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastmw2d_regXMM_regK() {
			TestAssembler(c => c.vpbroadcastmw2d(xmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmw2d_xmm_kr, xmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastmw2d_regYMM_regK() {
			TestAssembler(c => c.vpbroadcastmw2d(ymm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmw2d_ymm_kr, ymm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastmw2d_regZMM_regK() {
			TestAssembler(c => c.vpbroadcastmw2d(zmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmw2d_zmm_kr, zmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastq_regXMM_reg64() {
			TestAssembler(c => c.vpbroadcastq(xmm2.k1, rbx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_xmm_k1z_r64, xmm2.k1, rbx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastq_regYMM_reg64() {
			TestAssembler(c => c.vpbroadcastq(ymm2.k1, rbx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_ymm_k1z_r64, ymm2.k1, rbx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastq_regZMM_reg64() {
			TestAssembler(c => c.vpbroadcastq(zmm2.k1, rbx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_zmm_k1z_r64, zmm2.k1, rbx)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastq_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastq_ymm_xmmm64, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_ymm_k1z_xmmm64, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastq_regZMM_regXMM() {
			TestAssembler(c => c.vpbroadcastq(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_zmm_k1z_xmmm64, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastq_ymm_xmmm64, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastq_regZMM_m() {
			TestAssembler(c => c.vpbroadcastq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastq_zmm_k1z_xmmm64, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastw_regXMM_reg32() {
			TestAssembler(c => c.vpbroadcastw(xmm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_xmm_k1z_r32, xmm2.k1, ebx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastw_regYMM_reg32() {
			TestAssembler(c => c.vpbroadcastw(ymm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_ymm_k1z_r32, ymm2.k1, ebx)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastw_regZMM_reg32() {
			TestAssembler(c => c.vpbroadcastw(zmm2.k1, ebx), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_zmm_k1z_r32, zmm2.k1, ebx)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastw_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastw_xmm_xmmm16, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_xmm_k1z_xmmm16, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastw_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastw(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastw_ymm_xmmm16, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_ymm_k1z_xmmm16, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastw_regZMM_regXMM() {
			TestAssembler(c => c.vpbroadcastw(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_zmm_k1z_xmmm16, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastw_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastw_xmm_xmmm16, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_xmm_k1z_xmmm16, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpbroadcastw_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpbroadcastw(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastw_ymm_xmmm16, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_ymm_k1z_xmmm16, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpbroadcastw_regZMM_m() {
			TestAssembler(c => c.vpbroadcastw(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpbroadcastw_zmm_k1z_xmmm16, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqhqdq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpclmulhqhqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 17));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqhqdq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpclmulhqhqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulhqhqdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpclmulhqhqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, zmm4, 17));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqhqdq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpclmulhqhqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqhqdq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpclmulhqhqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulhqhqdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpclmulhqhqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 17));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqlqdq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpclmulhqlqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqlqdq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpclmulhqlqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulhqlqdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpclmulhqlqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, zmm4, 1));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqlqdq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpclmulhqlqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulhqlqdq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpclmulhqlqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulhqlqdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpclmulhqlqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqhqdq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpclmullqhqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 16));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqhqdq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpclmullqhqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmullqhqdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpclmullqhqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, zmm4, 16));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqhqdq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpclmullqhqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqhqdq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpclmullqhqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmullqhqdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpclmullqhqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 16));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqlqdq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpclmullqlqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqlqdq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpclmullqlqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmullqlqdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpclmullqlqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, zmm4, 0));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqlqdq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpclmullqlqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmullqlqdq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpclmullqlqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmullqlqdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpclmullqlqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regYMM_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulqdq_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, zmm4, -5), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, zmm4, -5));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regYMM_regYMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulqdq_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, __zmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regYMM_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulqdq_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, zmm4, (byte)127), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, zmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpclmulqdq_regYMM_regYMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpclmulqdq_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, __zmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcmov_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmov(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpcmov_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcmov_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpcmov(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpcmov_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcmov_regYMM_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmov(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.XOP_Vpcmov_ymm_ymm_ymmm256_ymm, ymm2, ymm3, ymm4, ymm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcmov_regYMM_regYMM_m_regYMM() {
			TestAssembler(c => c.vpcmov(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.XOP_Vpcmov_ymm_ymm_ymmm256_ymm, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcmov_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmov(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcmov_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcmov_regYMM_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmov(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcmov_ymm_ymm_ymm_ymmm256, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpb_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpd_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqb_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqb_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqb_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqb_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqb_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpeqb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqb_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqb_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpeqb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqb_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqd_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpeqd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqd_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpeqd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqd_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqq_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqq_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqq_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqq_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpeqq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqq_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpeqq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqq_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqw_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpeqw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqw_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpeqw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqw_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqw_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpeqw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqw_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpeqw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpeqw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpeqw_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpestri(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri_regXMM_m_i() {
			TestAssembler(c => c.vpcmpestri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpestri(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri_regXMM_m_u() {
			TestAssembler(c => c.vpcmpestri(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri64_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpestri64(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri64_regXMM_m_i() {
			TestAssembler(c => c.vpcmpestri64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri64_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpestri64(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestri64_regXMM_m_u() {
			TestAssembler(c => c.vpcmpestri64(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpestrm(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm_regXMM_m_i() {
			TestAssembler(c => c.vpcmpestrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpestrm(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm_regXMM_m_u() {
			TestAssembler(c => c.vpcmpestrm(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm64_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm64_regXMM_m_i() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm64_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpestrm64_regXMM_m_u() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtb_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtb_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtb_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtb_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtb_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpgtb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtb_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtb_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpgtb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtb_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtd_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpgtd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtd_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpgtd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtd_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtq_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtq_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtq_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtq_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpgtq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtq_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpgtq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtq_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtw_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcmpgtw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtw_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpcmpgtw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtw_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtw_regK_regXMM_m() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcmpgtw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtw_regK_regYMM_m() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpgtw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpcmpgtw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpgtw_regK_regZMM_m() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistri_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpistri(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistri_regXMM_m_i() {
			TestAssembler(c => c.vpcmpistri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistri_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpistri(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistri_regXMM_m_u() {
			TestAssembler(c => c.vpcmpistri(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistrm_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpistrm(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistrm_regXMM_m_i() {
			TestAssembler(c => c.vpcmpistrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistrm_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpistrm(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpcmpistrm_regXMM_m_u() {
			TestAssembler(c => c.vpcmpistrm(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpq_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpub_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpud_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuq_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpuw_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regYMM_regYMM_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regZMM_regZMM_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regXMM_m_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regYMM_m_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regZMM_m_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regYMM_regYMM_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regZMM_regZMM_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regXMM_m_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regYMM_m_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcmpw_regK_regZMM_m_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomb_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomb_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomb_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomb_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomeqb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomeqb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomeqd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomeqd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomeqq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomeqq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomequb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomequb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomequd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomequd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomequq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomequq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomequw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomequw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomequw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomeqw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomeqw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomeqw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalseb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalseb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalsed_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalsed(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalsed_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalsed(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalseq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalseq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseub_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalseub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseub_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalseub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseud_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalseud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseud_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalseud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalseuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalseuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseuw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalseuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalseuw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalseuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalsew_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomfalsew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomfalsew_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomfalsew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 6));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgeb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgeb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomged_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomged(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomged_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomged(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgeq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgeq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeub_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgeub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeub_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgeub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeud_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgeud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeud_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgeud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgeuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgeuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeuw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgeuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgeuw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgeuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgew_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgew_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtub_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtub_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtud_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtud_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtuw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtuw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomgtw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomgtw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomgtw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 2));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomleb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomleb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomled_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomled(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomled_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomled(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomleq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomleq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleub_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomleub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleub_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomleub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleud_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomleud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleud_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomleud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomleuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomleuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleuw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomleuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomleuw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomleuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomlew_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomlew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomlew_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomlew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 1));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltub_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltub_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltud_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltud_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltuw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltuw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomltw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomltw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomltw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 0));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomneqb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomneqb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomneqd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomneqd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomneqq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomneqq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomnequb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomnequb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomnequd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomnequd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomnequq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomnequq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomnequw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomnequw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomnequw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomneqw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomneqw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomneqw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressb_regXMM_regXMM() {
			TestAssembler(c => c.vpcompressb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressb_xmmm128_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressb_m_regXMM() {
			TestAssembler(c => c.vpcompressb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressb_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressb_regYMM_regYMM() {
			TestAssembler(c => c.vpcompressb(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressb_ymmm256_k1z_ymm, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressb_m_regYMM() {
			TestAssembler(c => c.vpcompressb(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressb_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressb_regZMM_regZMM() {
			TestAssembler(c => c.vpcompressb(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressb_zmmm512_k1z_zmm, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressb_m_regZMM() {
			TestAssembler(c => c.vpcompressb(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressb_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressd_regXMM_regXMM() {
			TestAssembler(c => c.vpcompressd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressd_xmmm128_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressd_m_regXMM() {
			TestAssembler(c => c.vpcompressd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressd_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressd_regYMM_regYMM() {
			TestAssembler(c => c.vpcompressd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressd_ymmm256_k1z_ymm, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressd_m_regYMM() {
			TestAssembler(c => c.vpcompressd(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressd_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressd_regZMM_regZMM() {
			TestAssembler(c => c.vpcompressd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressd_zmmm512_k1z_zmm, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressd_m_regZMM() {
			TestAssembler(c => c.vpcompressd(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressd_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressq_regXMM_regXMM() {
			TestAssembler(c => c.vpcompressq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressq_xmmm128_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressq_m_regXMM() {
			TestAssembler(c => c.vpcompressq(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressq_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressq_regYMM_regYMM() {
			TestAssembler(c => c.vpcompressq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressq_ymmm256_k1z_ymm, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressq_m_regYMM() {
			TestAssembler(c => c.vpcompressq(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressq_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressq_regZMM_regZMM() {
			TestAssembler(c => c.vpcompressq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressq_zmmm512_k1z_zmm, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressq_m_regZMM() {
			TestAssembler(c => c.vpcompressq(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressq_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressw_regXMM_regXMM() {
			TestAssembler(c => c.vpcompressw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressw_xmmm128_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressw_m_regXMM() {
			TestAssembler(c => c.vpcompressw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressw_xmmm128_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressw_regYMM_regYMM() {
			TestAssembler(c => c.vpcompressw(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressw_ymmm256_k1z_ymm, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressw_m_regYMM() {
			TestAssembler(c => c.vpcompressw(__ymmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressw_ymmm256_k1z_ymm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressw_regZMM_regZMM() {
			TestAssembler(c => c.vpcompressw(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressw_zmmm512_k1z_zmm, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpcompressw_m_regZMM() {
			TestAssembler(c => c.vpcompressw(__zmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpcompressw_zmmm512_k1z_zmm, __zmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomq_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomq_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomq_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomq_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrueb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrueb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrued_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrued(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrued_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrued(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrueq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrueq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueub_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrueub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueub_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrueub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueud_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrueud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueud_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrueud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrueuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrueuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueuw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtrueuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtrueuw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtrueuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtruew_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpcomtruew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomtruew_regXMM_regXMM_m() {
			TestAssembler(c => c.vpcomtruew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 7));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomub_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomub_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomub_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomub_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomud_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomud_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomud_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomud_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuq_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuq_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuq_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuq_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomuw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpcomw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictd_regXMM_regXMM() {
			TestAssembler(c => c.vpconflictd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictd_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictd_regYMM_regYMM() {
			TestAssembler(c => c.vpconflictd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictd_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictd_regZMM_regZMM() {
			TestAssembler(c => c.vpconflictd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictd_zmm_k1z_zmmm512b32, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictd_regXMM_m() {
			TestAssembler(c => c.vpconflictd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictd_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictd_regYMM_m() {
			TestAssembler(c => c.vpconflictd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictd_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictd_regZMM_m() {
			TestAssembler(c => c.vpconflictd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictd_zmm_k1z_zmmm512b32, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictq_regXMM_regXMM() {
			TestAssembler(c => c.vpconflictq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictq_regYMM_regYMM() {
			TestAssembler(c => c.vpconflictq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictq_regZMM_regZMM() {
			TestAssembler(c => c.vpconflictq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictq_zmm_k1z_zmmm512b64, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictq_regXMM_m() {
			TestAssembler(c => c.vpconflictq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictq_regYMM_m() {
			TestAssembler(c => c.vpconflictq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpconflictq_regZMM_m() {
			TestAssembler(c => c.vpconflictq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpconflictq_zmm_k1z_zmmm512b64, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpbusd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpbusd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpbusd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpdpbusd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpbusd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpdpbusd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusds_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusds(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpbusds_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusds_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusds(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpbusds_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpbusds_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpdpbusds(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusds_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusds(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusds(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusds_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpbusds_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusds(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpbusds(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusds_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpbusds_regZMM_regZMM_m() {
			TestAssembler(c => c.vpdpbusds(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpwssd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpwssd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpwssd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpdpwssd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpwssd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpdpwssd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssds_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssds(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpwssds_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssds_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssds(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpwssds_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpwssds_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpdpwssds(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssds_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssds(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssds(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssds_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpdpwssds_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssds(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpdpwssds(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssds_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpdpwssds_regZMM_regZMM_m() {
			TestAssembler(c => c.vpdpwssds(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2f128_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2f128_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2f128_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2f128_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2i128_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2i128_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2i128_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vperm2i128_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermb_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermb_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2b_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermi2b(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2b_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermi2b(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2b_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermi2b(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2b_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermi2b(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2b_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermi2b(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2b_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermi2b(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2d_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermi2d(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2d_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermi2d(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2d_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermi2d(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2d_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermi2d(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2d_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermi2d(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2d_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermi2d(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2pd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermi2pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2pd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermi2pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermi2pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2pd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermi2pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2pd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermi2pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermi2pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2ps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermi2ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2ps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermi2ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermi2ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2ps_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermi2ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2ps_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermi2ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermi2ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2q_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermi2q(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2q_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermi2q(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2q_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermi2q(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2q_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermi2q(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2q_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermi2q(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2q_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermi2q(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2w_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermi2w(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2w_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermi2w(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2w_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermi2w(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2w_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermi2w(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2w_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermi2w(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermi2w_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermi2w(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regXMM_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, xmm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, xmm4, xmm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regXMM_regXMM_m_regXMM_i() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regYMM_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, ymm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, ymm4, ymm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regYMM_regYMM_m_regYMM_i() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regXMM_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regYMM_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regXMM_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, xmm4, xmm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regXMM_regXMM_m_regXMM_u() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regYMM_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, ymm4, ymm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regYMM_regYMM_m_regYMM_u() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regXMM_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2pd_regYMM_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regXMM_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, xmm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, xmm4, xmm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regXMM_regXMM_m_regXMM_i() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regYMM_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, ymm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, ymm4, ymm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regYMM_regYMM_m_regYMM_i() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5, 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regXMM_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regYMM_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), 3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regXMM_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, xmm4, xmm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regXMM_regXMM_m_regXMM_u() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regYMM_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, ymm4, ymm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regYMM_regYMM_m_regYMM_u() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), ymm5, (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regXMM_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpermil2ps_regYMM_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, ymm2, ymm3, ymm4, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)3));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilpd_regZMM_regZMM_i() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regXMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(xmm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regYMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(ymm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilpd_regZMM_m_i() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilpd_regZMM_regZMM_u() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regXMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(xmm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilpd_regYMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(ymm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilpd_regZMM_m_u() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpermilps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermilps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilps_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilps_regZMM_regZMM_i() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regXMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(xmm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regYMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(ymm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilps_regZMM_m_i() {
			TestAssembler(c => c.vpermilps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilps_regZMM_regZMM_u() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regXMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(xmm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermilps_regYMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(ymm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermilps_regZMM_m_u() {
			TestAssembler(c => c.vpermilps(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermpd_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regZMM_regZMM_i() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermpd_regYMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermpd(ymm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regZMM_m_i() {
			TestAssembler(c => c.vpermpd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermpd_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regZMM_regZMM_u() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermpd_regYMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermpd(ymm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermpd_regZMM_m_u() {
			TestAssembler(c => c.vpermpd(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermps_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermq_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regZMM_regZMM_i() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermq_regYMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermq(ymm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermq(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regZMM_m_i() {
			TestAssembler(c => c.vpermq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermq_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpermq(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regZMM_regZMM_u() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpermq_regYMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermq(ymm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpermq(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermq_regZMM_m_u() {
			TestAssembler(c => c.vpermq(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2b_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermt2b(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2b_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermt2b(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2b_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermt2b(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2b_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermt2b(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2b_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermt2b(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2b_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermt2b(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2d_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermt2d(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2d_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermt2d(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2d_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermt2d(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2d_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermt2d(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2d_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermt2d(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2d_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermt2d(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2pd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermt2pd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2pd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermt2pd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2pd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermt2pd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2pd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermt2pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2pd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermt2pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2pd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermt2pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2ps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermt2ps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2ps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermt2ps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2ps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermt2ps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2ps_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermt2ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2ps_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermt2ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2ps_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermt2ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2q_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermt2q(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2q_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermt2q(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2q_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermt2q(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2q_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermt2q(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2q_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermt2q(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2q_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermt2q(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2w_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermt2w(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2w_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermt2w(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2w_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermt2w(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2w_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermt2w(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2w_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermt2w(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermt2w_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermt2w(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpermw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpermw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpermw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpermw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpermw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpermw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpermw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpermw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpermw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandb_regXMM_regXMM() {
			TestAssembler(c => c.vpexpandb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandb_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandb_regYMM_regYMM() {
			TestAssembler(c => c.vpexpandb(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandb_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandb_regZMM_regZMM() {
			TestAssembler(c => c.vpexpandb(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandb_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandb_regXMM_m() {
			TestAssembler(c => c.vpexpandb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandb_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandb_regYMM_m() {
			TestAssembler(c => c.vpexpandb(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandb_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandb_regZMM_m() {
			TestAssembler(c => c.vpexpandb(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandb_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandd_regXMM_regXMM() {
			TestAssembler(c => c.vpexpandd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandd_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandd_regYMM_regYMM() {
			TestAssembler(c => c.vpexpandd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandd_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandd_regZMM_regZMM() {
			TestAssembler(c => c.vpexpandd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandd_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandd_regXMM_m() {
			TestAssembler(c => c.vpexpandd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandd_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandd_regYMM_m() {
			TestAssembler(c => c.vpexpandd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandd_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandd_regZMM_m() {
			TestAssembler(c => c.vpexpandd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandd_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandq_regXMM_regXMM() {
			TestAssembler(c => c.vpexpandq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandq_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandq_regYMM_regYMM() {
			TestAssembler(c => c.vpexpandq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandq_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandq_regZMM_regZMM() {
			TestAssembler(c => c.vpexpandq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandq_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandq_regXMM_m() {
			TestAssembler(c => c.vpexpandq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandq_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandq_regYMM_m() {
			TestAssembler(c => c.vpexpandq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandq_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandq_regZMM_m() {
			TestAssembler(c => c.vpexpandq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandq_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandw_regXMM_regXMM() {
			TestAssembler(c => c.vpexpandw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandw_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandw_regYMM_regYMM() {
			TestAssembler(c => c.vpexpandw(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandw_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandw_regZMM_regZMM() {
			TestAssembler(c => c.vpexpandw(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandw_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandw_regXMM_m() {
			TestAssembler(c => c.vpexpandw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandw_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandw_regYMM_m() {
			TestAssembler(c => c.vpexpandw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandw_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpexpandw_regZMM_m() {
			TestAssembler(c => c.vpexpandw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpexpandw_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrb_reg32_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrb(edx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrb_reg64_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrb(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrb_r64m8_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrb_r64m8_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrb_m_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrb_reg32_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrb(edx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(edx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrb_reg64_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrb(rdx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrb_r64m8_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(rdx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrb_r64m8_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrb_m_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrd_reg32_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrd(edx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrd_m_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrd_reg32_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrd(edx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(edx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrd_m_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrq_reg64_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrq(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrq_m_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrq_reg64_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrq(rdx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(rdx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrq_m_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, __qword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrw_reg32_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrw(edx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrw_r32_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrw_r32_xmm_imm8, edx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrw_reg64_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrw(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrw_r64_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrw_r64_xmm_imm8, rdx, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrw_m_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrw_r32m16_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrw_r32m16_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrw_reg32_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrw(edx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrw_r32_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(edx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrw_r32_xmm_imm8, edx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrw_reg64_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrw(rdx, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrw_r64_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(rdx, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrw_r64_xmm_imm8, rdx, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpextrw_m_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.VEX_Vpextrw_r32m16_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpextrw_r32m16_xmm_imm8, __dword_ptr[rcx].ToMemoryOperand(Bitness), xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherdd_regXMM_m() {
			TestAssembler(c => c.vpgatherdd(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherdd_xmm_k1_vm32x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherdd_regYMM_m() {
			TestAssembler(c => c.vpgatherdd(ymm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherdd_ymm_k1_vm32y, ymm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherdd_regZMM_m() {
			TestAssembler(c => c.vpgatherdd(zmm2.k1, __[rdx + zmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherdd_zmm_k1_vm32z, zmm2.k1, __[rdx + zmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherdd_regXMM_m_regXMM() {
			TestAssembler(c => c.vpgatherdd(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherdd_xmm_vm32x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherdd_regYMM_m_regYMM() {
			TestAssembler(c => c.vpgatherdd(ymm2, __[rdx + ymm3], ymm4), Instruction.Create(Code.VEX_Vpgatherdd_ymm_vm32y_ymm, ymm2, __[rdx + ymm3].ToMemoryOperand(Bitness), ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherdq_regXMM_m() {
			TestAssembler(c => c.vpgatherdq(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherdq_xmm_k1_vm32x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherdq_regYMM_m() {
			TestAssembler(c => c.vpgatherdq(ymm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherdq_ymm_k1_vm32x, ymm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherdq_regZMM_m() {
			TestAssembler(c => c.vpgatherdq(zmm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherdq_zmm_k1_vm32y, zmm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherdq_regXMM_m_regXMM() {
			TestAssembler(c => c.vpgatherdq(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherdq_xmm_vm32x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherdq_regYMM_m_regYMM() {
			TestAssembler(c => c.vpgatherdq(ymm2, __[rdx + xmm3], ymm4), Instruction.Create(Code.VEX_Vpgatherdq_ymm_vm32x_ymm, ymm2, __[rdx + xmm3].ToMemoryOperand(Bitness), ymm4));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherqd_regXMM_m() {
			{ /* if (src.Index.IsXMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqd_xmm_k1_vm64x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
			} /* else */ { /* if (src.Index.IsYMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqd_xmm_k1_vm64y, xmm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vpgatherqd(xmm2.k1, __[rdx + zmm1]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqd_xmm_k1_vm64y, xmm2.k1, __[rdx + zmm1].ToMemoryOperand(Bitness))));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherqd_regYMM_m() {
			TestAssembler(c => c.vpgatherqd(ymm2.k1, __[rdx + zmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqd_ymm_k1_vm64z, ymm2.k1, __[rdx + zmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherqd_regXMM_m_regXMM() {
			{ /* if (src1.Index.IsXMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherqd_xmm_vm64x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
			} /* else */ { /* if (src1.Index.IsYMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2, __[rdx + ymm3], xmm4), Instruction.Create(Code.VEX_Vpgatherqd_xmm_vm64y_xmm, xmm2, __[rdx + ymm3].ToMemoryOperand(Bitness), xmm4));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vpgatherqd(xmm2, __[rdx + zmm1], xmm4), Instruction.Create(Code.VEX_Vpgatherqd_xmm_vm64y_xmm, xmm2, __[rdx + zmm1].ToMemoryOperand(Bitness), xmm4));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherqq_regXMM_m() {
			TestAssembler(c => c.vpgatherqq(xmm2.k1, __[rdx + xmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqq_xmm_k1_vm64x, xmm2.k1, __[rdx + xmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherqq_regYMM_m() {
			TestAssembler(c => c.vpgatherqq(ymm2.k1, __[rdx + ymm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqq_ymm_k1_vm64y, ymm2.k1, __[rdx + ymm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpgatherqq_regZMM_m() {
			TestAssembler(c => c.vpgatherqq(zmm2.k1, __[rdx + zmm3]), ApplyK1(Instruction.Create(Code.EVEX_Vpgatherqq_zmm_k1_vm64z, zmm2.k1, __[rdx + zmm3].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherqq_regXMM_m_regXMM() {
			TestAssembler(c => c.vpgatherqq(xmm2, __[rdx + xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherqq_xmm_vm64x_xmm, xmm2, __[rdx + xmm3].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpgatherqq_regYMM_m_regYMM() {
			TestAssembler(c => c.vpgatherqq(ymm2, __[rdx + ymm3], ymm4), Instruction.Create(Code.VEX_Vpgatherqq_ymm_vm64y_ymm, ymm2, __[rdx + ymm3].ToMemoryOperand(Bitness), ymm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddbd_regXMM_regXMM() {
			TestAssembler(c => c.vphaddbd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddbd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddbd_regXMM_m() {
			TestAssembler(c => c.vphaddbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddbd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddbq_regXMM_regXMM() {
			TestAssembler(c => c.vphaddbq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddbq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddbq_regXMM_m() {
			TestAssembler(c => c.vphaddbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddbq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddbw_regXMM_regXMM() {
			TestAssembler(c => c.vphaddbw(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddbw_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddbw_regXMM_m() {
			TestAssembler(c => c.vphaddbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddbw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vphaddd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphaddd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vphaddd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphaddd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddd_regXMM_regXMM_m() {
			TestAssembler(c => c.vphaddd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddd_regYMM_regYMM_m() {
			TestAssembler(c => c.vphaddd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphadddq_regXMM_regXMM() {
			TestAssembler(c => c.vphadddq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphadddq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphadddq_regXMM_m() {
			TestAssembler(c => c.vphadddq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphadddq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddsw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vphaddsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphaddsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddsw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vphaddsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphaddsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddsw_regXMM_regXMM_m() {
			TestAssembler(c => c.vphaddsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddsw_regYMM_regYMM_m() {
			TestAssembler(c => c.vphaddsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddubd_regXMM_regXMM() {
			TestAssembler(c => c.vphaddubd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddubd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddubd_regXMM_m() {
			TestAssembler(c => c.vphaddubd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddubd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddubq_regXMM_regXMM() {
			TestAssembler(c => c.vphaddubq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddubq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddubq_regXMM_m() {
			TestAssembler(c => c.vphaddubq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddubq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddubw_regXMM_regXMM() {
			TestAssembler(c => c.vphaddubw(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddubw_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddubw_regXMM_m() {
			TestAssembler(c => c.vphaddubw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddubw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddudq_regXMM_regXMM() {
			TestAssembler(c => c.vphaddudq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddudq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddudq_regXMM_m() {
			TestAssembler(c => c.vphaddudq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddudq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphadduwd_regXMM_regXMM() {
			TestAssembler(c => c.vphadduwd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphadduwd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphadduwd_regXMM_m() {
			TestAssembler(c => c.vphadduwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphadduwd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphadduwq_regXMM_regXMM() {
			TestAssembler(c => c.vphadduwq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphadduwq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphadduwq_regXMM_m() {
			TestAssembler(c => c.vphadduwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphadduwq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vphaddw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphaddw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vphaddw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphaddw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddw_regXMM_regXMM_m() {
			TestAssembler(c => c.vphaddw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphaddw_regYMM_regYMM_m() {
			TestAssembler(c => c.vphaddw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddwd_regXMM_regXMM() {
			TestAssembler(c => c.vphaddwd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddwd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddwd_regXMM_m() {
			TestAssembler(c => c.vphaddwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddwd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddwq_regXMM_regXMM() {
			TestAssembler(c => c.vphaddwq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddwq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphaddwq_regXMM_m() {
			TestAssembler(c => c.vphaddwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddwq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphminposuw_regXMM_regXMM() {
			TestAssembler(c => c.vphminposuw(xmm2, xmm3), Instruction.Create(Code.VEX_Vphminposuw_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphminposuw_regXMM_m() {
			TestAssembler(c => c.vphminposuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphminposuw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphsubbw_regXMM_regXMM() {
			TestAssembler(c => c.vphsubbw(xmm2, xmm3), Instruction.Create(Code.XOP_Vphsubbw_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphsubbw_regXMM_m() {
			TestAssembler(c => c.vphsubbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphsubbw_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vphsubd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphsubd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vphsubd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphsubd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubd_regXMM_regXMM_m() {
			TestAssembler(c => c.vphsubd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubd_regYMM_regYMM_m() {
			TestAssembler(c => c.vphsubd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphsubdq_regXMM_regXMM() {
			TestAssembler(c => c.vphsubdq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphsubdq_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphsubdq_regXMM_m() {
			TestAssembler(c => c.vphsubdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphsubdq_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubsw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vphsubsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphsubsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubsw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vphsubsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphsubsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubsw_regXMM_regXMM_m() {
			TestAssembler(c => c.vphsubsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubsw_regYMM_regYMM_m() {
			TestAssembler(c => c.vphsubsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vphsubw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphsubw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vphsubw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphsubw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubw_regXMM_regXMM_m() {
			TestAssembler(c => c.vphsubw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vphsubw_regYMM_regYMM_m() {
			TestAssembler(c => c.vphsubw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphsubwd_regXMM_regXMM() {
			TestAssembler(c => c.vphsubwd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphsubwd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vphsubwd_regXMM_m() {
			TestAssembler(c => c.vphsubwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphsubwd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrb_regXMM_regXMM_reg32_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, -5), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, esp, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, -5), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, esp, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrb_regXMM_regXMM_reg64_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, -5), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r64m8_imm8, xmm2, xmm3, rsp, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, -5), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r64m8_imm8, xmm2, xmm3, rsp, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrb_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrb_regXMM_regXMM_reg32_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, (byte)127), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, esp, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, (byte)127), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, esp, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrb_regXMM_regXMM_reg64_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, (byte)127), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r64m8_imm8, xmm2, xmm3, rsp, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, (byte)127), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r64m8_imm8, xmm2, xmm3, rsp, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrb_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrd_regXMM_regXMM_reg32_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, -5), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, esp, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, -5), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, esp, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrd_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrd_regXMM_regXMM_reg32_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, (byte)127), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, esp, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, (byte)127), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, esp, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrd_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrq_regXMM_regXMM_reg64_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, -5), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, rsp, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, -5), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, rsp, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrq_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, __qword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, __qword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrq_regXMM_regXMM_reg64_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, (byte)127), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, rsp, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, (byte)127), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, rsp, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrq_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, xmm2, xmm3, __qword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrw_regXMM_regXMM_reg32_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, -5), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, esp, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, -5), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, esp, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrw_regXMM_regXMM_reg64_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, -5), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r64m16_imm8, xmm2, xmm3, rsp, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, -5), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r64m16_imm8, xmm2, xmm3, rsp, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrw_regXMM_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrw_regXMM_regXMM_reg32_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, (byte)127), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, esp, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, (byte)127), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, esp, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrw_regXMM_regXMM_reg64_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, (byte)127), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r64m16_imm8, xmm2, xmm3, rsp, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, (byte)127), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r64m16_imm8, xmm2, xmm3, rsp, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpinsrw_regXMM_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, xmm2, xmm3, __dword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntd_regXMM_regXMM() {
			TestAssembler(c => c.vplzcntd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntd_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntd_regYMM_regYMM() {
			TestAssembler(c => c.vplzcntd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntd_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntd_regZMM_regZMM() {
			TestAssembler(c => c.vplzcntd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntd_zmm_k1z_zmmm512b32, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntd_regXMM_m() {
			TestAssembler(c => c.vplzcntd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntd_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntd_regYMM_m() {
			TestAssembler(c => c.vplzcntd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntd_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntd_regZMM_m() {
			TestAssembler(c => c.vplzcntd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntd_zmm_k1z_zmmm512b32, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntq_regXMM_regXMM() {
			TestAssembler(c => c.vplzcntq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntq_regYMM_regYMM() {
			TestAssembler(c => c.vplzcntq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntq_regZMM_regZMM() {
			TestAssembler(c => c.vplzcntq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntq_zmm_k1z_zmmm512b64, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntq_regXMM_m() {
			TestAssembler(c => c.vplzcntq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntq_regYMM_m() {
			TestAssembler(c => c.vplzcntq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vplzcntq_regZMM_m() {
			TestAssembler(c => c.vplzcntq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vplzcntq_zmm_k1z_zmmm512b64, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsdd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacsdd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsdd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacsdd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsdqh_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacsdqh(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsdqh_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacsdqh(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsdql_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacsdql(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsdql_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacsdql(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssdd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacssdd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssdd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacssdd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssdqh_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacssdqh(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssdqh_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacssdqh(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssdql_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacssdql(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssdql_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacssdql(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsswd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacsswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsswd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacsswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssww_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacssww(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacssww_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacssww(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacswd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacswd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsww_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmacsww(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmacsww_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmacsww(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmadcsswd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmadcsswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmadcsswd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmadcsswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmadcswd_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmadcswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpmadcswd_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpmadcswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52huq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmadd52huq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52huq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpmadd52huq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52huq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmadd52huq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52huq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmadd52huq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52huq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmadd52huq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52huq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmadd52huq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52luq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmadd52luq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52luq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpmadd52luq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52luq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmadd52luq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52luq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmadd52luq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52luq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmadd52luq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmadd52luq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmadd52luq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddubsw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddubsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaddubsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddubsw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddubsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaddubsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaddubsw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaddubsw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddubsw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddubsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddubsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddubsw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddubsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddubsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaddubsw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaddubsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddwd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddwd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaddwd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddwd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddwd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaddwd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaddwd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaddwd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddwd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddwd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddwd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaddwd_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaddwd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddwd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaddwd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaddwd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovd_m_regXMM_regXMM() {
			TestAssembler(c => c.vpmaskmovd(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaskmovd_m128_xmm_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovd_m_regYMM_regYMM() {
			TestAssembler(c => c.vpmaskmovd(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaskmovd_m256_ymm_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmaskmovd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovd_xmm_xmm_m128, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmaskmovd(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovd_ymm_ymm_m256, ymm2, ymm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovq_m_regXMM_regXMM() {
			TestAssembler(c => c.vpmaskmovq(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaskmovq_m128_xmm_xmm, __[rcx].ToMemoryOperand(Bitness), xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovq_m_regYMM_regYMM() {
			TestAssembler(c => c.vpmaskmovq(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaskmovq_m256_ymm_ymm, __[rcx].ToMemoryOperand(Bitness), ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmaskmovq(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovq_xmm_xmm_m128, xmm2, xmm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmaskmovq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmaskmovq(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovq_ymm_ymm_m256, ymm2, ymm3, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxsb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxsb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxsb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxsd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxsd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxsd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxsd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxsd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxsd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmaxsq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpmaxsq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxsq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmaxsq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmaxsq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxsq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxsw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxsw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxsw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxub_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxub(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxub_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxub_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxub(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxub_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxub_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxub(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxub_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxub_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxub_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxub(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxub_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxub_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxub(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxud_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxud(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxud_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxud_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxud(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxud_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxud_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxud(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxud_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxud(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmaxud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxud_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxud_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxud(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmaxud(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxud_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxud_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxud(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmaxuq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpmaxuq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxuq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmaxuq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmaxuq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxuq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxuw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxuw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxuw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxuw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxuw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxuw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmaxuw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxuw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxuw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmaxuw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmaxuw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxuw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmaxuw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmaxuw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminsb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminsb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminsb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminsd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminsd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminsd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminsd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpminsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminsd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpminsd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminsd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpminsq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpminsq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminsq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpminsq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpminsq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminsq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminsw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminsw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminsw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminub_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminub(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminub_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminub_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminub_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminub(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminub_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminub_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminub_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminub(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminub_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminub_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminub_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminub_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminub_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminub(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminub_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminub_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminub_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminub(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminub_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminud_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminud(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminud_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminud_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminud(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminud_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminud_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminud(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminud_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminud(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpminud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminud_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminud_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminud(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpminud(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminud_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminud_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminud(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpminuq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpminuq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminuq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpminuq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpminuq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminuq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminuw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminuw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminuw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminuw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminuw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminuw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminuw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminuw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpminuw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminuw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminuw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminuw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpminuw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpminuw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminuw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminuw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpminuw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpminuw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovb2m_regK_regXMM() {
			TestAssembler(c => c.vpmovb2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovb2m_kr_xmm, k2, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovb2m_regK_regYMM() {
			TestAssembler(c => c.vpmovb2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovb2m_kr_ymm, k2, ymm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovb2m_regK_regZMM() {
			TestAssembler(c => c.vpmovb2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovb2m_kr_zmm, k2, zmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovd2m_regK_regXMM() {
			TestAssembler(c => c.vpmovd2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovd2m_kr_xmm, k2, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovd2m_regK_regYMM() {
			TestAssembler(c => c.vpmovd2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovd2m_kr_ymm, k2, ymm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovd2m_regK_regZMM() {
			TestAssembler(c => c.vpmovd2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovd2m_kr_zmm, k2, zmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovdb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdb_xmmm32_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdb_m_regXMM() {
			TestAssembler(c => c.vpmovdb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdb_xmmm32_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovdb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdb_xmmm64_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdb_m_regYMM() {
			TestAssembler(c => c.vpmovdb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdb_xmmm64_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdb_regXMM_regZMM() {
			TestAssembler(c => c.vpmovdb(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdb_xmmm128_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdb_m_regZMM() {
			TestAssembler(c => c.vpmovdb(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdb_xmmm128_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdw_regXMM_regXMM() {
			TestAssembler(c => c.vpmovdw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdw_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdw_m_regXMM() {
			TestAssembler(c => c.vpmovdw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdw_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdw_regXMM_regYMM() {
			TestAssembler(c => c.vpmovdw(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdw_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdw_m_regYMM() {
			TestAssembler(c => c.vpmovdw(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdw_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdw_regYMM_regZMM() {
			TestAssembler(c => c.vpmovdw(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdw_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovdw_m_regZMM() {
			TestAssembler(c => c.vpmovdw(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovdw_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2b_regXMM_regK() {
			TestAssembler(c => c.vpmovm2b(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2b_xmm_kr, xmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2b_regYMM_regK() {
			TestAssembler(c => c.vpmovm2b(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2b_ymm_kr, ymm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2b_regZMM_regK() {
			TestAssembler(c => c.vpmovm2b(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2b_zmm_kr, zmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2d_regXMM_regK() {
			TestAssembler(c => c.vpmovm2d(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2d_xmm_kr, xmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2d_regYMM_regK() {
			TestAssembler(c => c.vpmovm2d(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2d_ymm_kr, ymm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2d_regZMM_regK() {
			TestAssembler(c => c.vpmovm2d(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2d_zmm_kr, zmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2q_regXMM_regK() {
			TestAssembler(c => c.vpmovm2q(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2q_xmm_kr, xmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2q_regYMM_regK() {
			TestAssembler(c => c.vpmovm2q(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2q_ymm_kr, ymm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2q_regZMM_regK() {
			TestAssembler(c => c.vpmovm2q(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2q_zmm_kr, zmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2w_regXMM_regK() {
			TestAssembler(c => c.vpmovm2w(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2w_xmm_kr, xmm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2w_regYMM_regK() {
			TestAssembler(c => c.vpmovm2w(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2w_ymm_kr, ymm2, k3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovm2w_regZMM_regK() {
			TestAssembler(c => c.vpmovm2w(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2w_zmm_kr, zmm2, k3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmovmskb_reg32_regXMM() {
			TestAssembler(c => c.vpmovmskb(edx, xmm3), Instruction.Create(Code.VEX_Vpmovmskb_r32_xmm, edx, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmovmskb_reg64_regXMM() {
			TestAssembler(c => c.vpmovmskb(rdx, xmm3), Instruction.Create(Code.VEX_Vpmovmskb_r64_xmm, rdx, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmovmskb_reg32_regYMM() {
			TestAssembler(c => c.vpmovmskb(edx, ymm3), Instruction.Create(Code.VEX_Vpmovmskb_r32_ymm, edx, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpmovmskb_reg64_regYMM() {
			TestAssembler(c => c.vpmovmskb(rdx, ymm3), Instruction.Create(Code.VEX_Vpmovmskb_r64_ymm, rdx, ymm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovq2m_regK_regXMM() {
			TestAssembler(c => c.vpmovq2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovq2m_kr_xmm, k2, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovq2m_regK_regYMM() {
			TestAssembler(c => c.vpmovq2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovq2m_kr_ymm, k2, ymm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovq2m_regK_regZMM() {
			TestAssembler(c => c.vpmovq2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovq2m_kr_zmm, k2, zmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovqb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqb_xmmm16_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqb_m_regXMM() {
			TestAssembler(c => c.vpmovqb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqb_xmmm16_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovqb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqb_xmmm32_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqb_m_regYMM() {
			TestAssembler(c => c.vpmovqb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqb_xmmm32_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqb_regXMM_regZMM() {
			TestAssembler(c => c.vpmovqb(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqb_xmmm64_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqb_m_regZMM() {
			TestAssembler(c => c.vpmovqb(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqb_xmmm64_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqd_regXMM_regXMM() {
			TestAssembler(c => c.vpmovqd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqd_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqd_m_regXMM() {
			TestAssembler(c => c.vpmovqd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqd_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqd_regXMM_regYMM() {
			TestAssembler(c => c.vpmovqd(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqd_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqd_m_regYMM() {
			TestAssembler(c => c.vpmovqd(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqd_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqd_regYMM_regZMM() {
			TestAssembler(c => c.vpmovqd(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqd_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqd_m_regZMM() {
			TestAssembler(c => c.vpmovqd(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqd_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqw_regXMM_regXMM() {
			TestAssembler(c => c.vpmovqw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqw_xmmm32_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqw_m_regXMM() {
			TestAssembler(c => c.vpmovqw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqw_xmmm32_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqw_regXMM_regYMM() {
			TestAssembler(c => c.vpmovqw(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqw_xmmm64_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqw_m_regYMM() {
			TestAssembler(c => c.vpmovqw(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqw_xmmm64_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqw_regXMM_regZMM() {
			TestAssembler(c => c.vpmovqw(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqw_xmmm128_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovqw_m_regZMM() {
			TestAssembler(c => c.vpmovqw(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovqw_xmmm128_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovsdb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm32_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdb_m_regXMM() {
			TestAssembler(c => c.vpmovsdb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm32_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovsdb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm64_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdb_m_regYMM() {
			TestAssembler(c => c.vpmovsdb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm64_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdb_regXMM_regZMM() {
			TestAssembler(c => c.vpmovsdb(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm128_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdb_m_regZMM() {
			TestAssembler(c => c.vpmovsdb(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm128_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdw_regXMM_regXMM() {
			TestAssembler(c => c.vpmovsdw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdw_m_regXMM() {
			TestAssembler(c => c.vpmovsdw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdw_regXMM_regYMM() {
			TestAssembler(c => c.vpmovsdw(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdw_m_regYMM() {
			TestAssembler(c => c.vpmovsdw(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdw_regYMM_regZMM() {
			TestAssembler(c => c.vpmovsdw(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdw_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsdw_m_regZMM() {
			TestAssembler(c => c.vpmovsdw(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsdw_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovsqb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm16_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqb_m_regXMM() {
			TestAssembler(c => c.vpmovsqb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm16_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovsqb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm32_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqb_m_regYMM() {
			TestAssembler(c => c.vpmovsqb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm32_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqb_regXMM_regZMM() {
			TestAssembler(c => c.vpmovsqb(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm64_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqb_m_regZMM() {
			TestAssembler(c => c.vpmovsqb(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm64_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqd_regXMM_regXMM() {
			TestAssembler(c => c.vpmovsqd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqd_m_regXMM() {
			TestAssembler(c => c.vpmovsqd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqd_regXMM_regYMM() {
			TestAssembler(c => c.vpmovsqd(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqd_m_regYMM() {
			TestAssembler(c => c.vpmovsqd(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqd_regYMM_regZMM() {
			TestAssembler(c => c.vpmovsqd(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqd_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqd_m_regZMM() {
			TestAssembler(c => c.vpmovsqd(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqd_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqw_regXMM_regXMM() {
			TestAssembler(c => c.vpmovsqw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm32_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqw_m_regXMM() {
			TestAssembler(c => c.vpmovsqw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm32_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqw_regXMM_regYMM() {
			TestAssembler(c => c.vpmovsqw(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm64_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqw_m_regYMM() {
			TestAssembler(c => c.vpmovsqw(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm64_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqw_regXMM_regZMM() {
			TestAssembler(c => c.vpmovsqw(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm128_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsqw_m_regZMM() {
			TestAssembler(c => c.vpmovsqw(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm128_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovswb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovswb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovswb_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovswb_m_regXMM() {
			TestAssembler(c => c.vpmovswb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovswb_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovswb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovswb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovswb_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovswb_m_regYMM() {
			TestAssembler(c => c.vpmovswb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovswb_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovswb_regYMM_regZMM() {
			TestAssembler(c => c.vpmovswb(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovswb_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovswb_m_regZMM() {
			TestAssembler(c => c.vpmovswb(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovswb_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbd_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbd_xmm_k1z_xmmm32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbd_ymm_xmmm64, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbd_ymm_k1z_xmmm64, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxbd_regZMM_regXMM() {
			TestAssembler(c => c.vpmovsxbd(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbd_zmm_k1z_xmmm128, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbd_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbd_xmm_k1z_xmmm32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbd_ymm_xmmm64, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbd_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxbd_regZMM_m() {
			TestAssembler(c => c.vpmovsxbd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbd_zmm_k1z_xmmm128, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbq_xmm_xmmm16, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbq_xmm_k1z_xmmm16, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbq_ymm_xmmm32, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbq_ymm_k1z_xmmm32, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxbq_regZMM_regXMM() {
			TestAssembler(c => c.vpmovsxbq(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbq_zmm_k1z_xmmm64, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbq_xmm_xmmm16, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbq_xmm_k1z_xmmm16, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbq_ymm_xmmm32, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbq_ymm_k1z_xmmm32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxbq_regZMM_m() {
			TestAssembler(c => c.vpmovsxbq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbq_zmm_k1z_xmmm64, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbw_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbw_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbw_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbw_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbw(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbw_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbw_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxbw_regZMM_regYMM() {
			TestAssembler(c => c.vpmovsxbw(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbw_zmm_k1z_ymmm256, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbw_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbw_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbw_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxbw_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxbw(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbw_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbw_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxbw_regZMM_m() {
			TestAssembler(c => c.vpmovsxbw(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxbw_zmm_k1z_ymmm256, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxdq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxdq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxdq_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxdq_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxdq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxdq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxdq_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxdq_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxdq_regZMM_regYMM() {
			TestAssembler(c => c.vpmovsxdq(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxdq_zmm_k1z_ymmm256, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxdq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxdq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxdq_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxdq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxdq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxdq_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxdq_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxdq_regZMM_m() {
			TestAssembler(c => c.vpmovsxdq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxdq_zmm_k1z_ymmm256, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwd_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwd_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwd_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwd_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxwd_regZMM_regYMM() {
			TestAssembler(c => c.vpmovsxwd(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwd_zmm_k1z_ymmm256, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwd_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwd_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwd_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxwd_regZMM_m() {
			TestAssembler(c => c.vpmovsxwd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwd_zmm_k1z_ymmm256, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwq_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwq_xmm_k1z_xmmm32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwq_ymm_xmmm64, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwq_ymm_k1z_xmmm64, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxwq_regZMM_regXMM() {
			TestAssembler(c => c.vpmovsxwq(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwq_zmm_k1z_xmmm128, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwq_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwq_xmm_k1z_xmmm32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovsxwq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovsxwq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwq_ymm_xmmm64, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwq_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovsxwq_regZMM_m() {
			TestAssembler(c => c.vpmovsxwq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovsxwq_zmm_k1z_xmmm128, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovusdb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm32_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdb_m_regXMM() {
			TestAssembler(c => c.vpmovusdb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm32_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovusdb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm64_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdb_m_regYMM() {
			TestAssembler(c => c.vpmovusdb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm64_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdb_regXMM_regZMM() {
			TestAssembler(c => c.vpmovusdb(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm128_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdb_m_regZMM() {
			TestAssembler(c => c.vpmovusdb(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm128_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdw_regXMM_regXMM() {
			TestAssembler(c => c.vpmovusdw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdw_m_regXMM() {
			TestAssembler(c => c.vpmovusdw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdw_regXMM_regYMM() {
			TestAssembler(c => c.vpmovusdw(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdw_m_regYMM() {
			TestAssembler(c => c.vpmovusdw(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdw_regYMM_regZMM() {
			TestAssembler(c => c.vpmovusdw(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdw_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusdw_m_regZMM() {
			TestAssembler(c => c.vpmovusdw(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusdw_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovusqb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm16_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqb_m_regXMM() {
			TestAssembler(c => c.vpmovusqb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm16_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovusqb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm32_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqb_m_regYMM() {
			TestAssembler(c => c.vpmovusqb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm32_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqb_regXMM_regZMM() {
			TestAssembler(c => c.vpmovusqb(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm64_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqb_m_regZMM() {
			TestAssembler(c => c.vpmovusqb(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm64_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqd_regXMM_regXMM() {
			TestAssembler(c => c.vpmovusqd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqd_m_regXMM() {
			TestAssembler(c => c.vpmovusqd(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqd_regXMM_regYMM() {
			TestAssembler(c => c.vpmovusqd(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqd_m_regYMM() {
			TestAssembler(c => c.vpmovusqd(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqd_regYMM_regZMM() {
			TestAssembler(c => c.vpmovusqd(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqd_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqd_m_regZMM() {
			TestAssembler(c => c.vpmovusqd(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqd_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqw_regXMM_regXMM() {
			TestAssembler(c => c.vpmovusqw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm32_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqw_m_regXMM() {
			TestAssembler(c => c.vpmovusqw(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm32_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqw_regXMM_regYMM() {
			TestAssembler(c => c.vpmovusqw(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm64_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqw_m_regYMM() {
			TestAssembler(c => c.vpmovusqw(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm64_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqw_regXMM_regZMM() {
			TestAssembler(c => c.vpmovusqw(xmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm128_k1z_zmm, xmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovusqw_m_regZMM() {
			TestAssembler(c => c.vpmovusqw(__xmmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm128_k1z_zmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovuswb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovuswb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovuswb_m_regXMM() {
			TestAssembler(c => c.vpmovuswb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovuswb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovuswb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovuswb_m_regYMM() {
			TestAssembler(c => c.vpmovuswb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovuswb_regYMM_regZMM() {
			TestAssembler(c => c.vpmovuswb(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovuswb_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovuswb_m_regZMM() {
			TestAssembler(c => c.vpmovuswb(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovuswb_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovw2m_regK_regXMM() {
			TestAssembler(c => c.vpmovw2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovw2m_kr_xmm, k2, xmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovw2m_regK_regYMM() {
			TestAssembler(c => c.vpmovw2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovw2m_kr_ymm, k2, ymm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovw2m_regK_regZMM() {
			TestAssembler(c => c.vpmovw2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovw2m_kr_zmm, k2, zmm3));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovwb_regXMM_regXMM() {
			TestAssembler(c => c.vpmovwb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovwb_xmmm64_k1z_xmm, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovwb_m_regXMM() {
			TestAssembler(c => c.vpmovwb(__xmmword_ptr[rcx].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovwb_xmmm64_k1z_xmm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovwb_regXMM_regYMM() {
			TestAssembler(c => c.vpmovwb(xmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovwb_xmmm128_k1z_ymm, xmm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovwb_m_regYMM() {
			TestAssembler(c => c.vpmovwb(__xmmword_ptr[rcx].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovwb_xmmm128_k1z_ymm, __xmmword_ptr[rcx].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovwb_regYMM_regZMM() {
			TestAssembler(c => c.vpmovwb(ymm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovwb_ymmm256_k1z_zmm, ymm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovwb_m_regZMM() {
			TestAssembler(c => c.vpmovwb(__ymmword_ptr[rcx].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovwb_ymmm256_k1z_zmm, __ymmword_ptr[rcx].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbd_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbd_xmm_k1z_xmmm32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbd_ymm_xmmm64, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbd_ymm_k1z_xmmm64, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxbd_regZMM_regXMM() {
			TestAssembler(c => c.vpmovzxbd(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbd_zmm_k1z_xmmm128, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbd_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbd_xmm_k1z_xmmm32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbd_ymm_xmmm64, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbd_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxbd_regZMM_m() {
			TestAssembler(c => c.vpmovzxbd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbd_zmm_k1z_xmmm128, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbq_xmm_xmmm16, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbq_xmm_k1z_xmmm16, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbq_ymm_xmmm32, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbq_ymm_k1z_xmmm32, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxbq_regZMM_regXMM() {
			TestAssembler(c => c.vpmovzxbq(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbq_zmm_k1z_xmmm64, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbq_xmm_xmmm16, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbq_xmm_k1z_xmmm16, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbq_ymm_xmmm32, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbq_ymm_k1z_xmmm32, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxbq_regZMM_m() {
			TestAssembler(c => c.vpmovzxbq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbq_zmm_k1z_xmmm64, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbw_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbw_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbw_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbw_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbw(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbw_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbw_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxbw_regZMM_regYMM() {
			TestAssembler(c => c.vpmovzxbw(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbw_zmm_k1z_ymmm256, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbw_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbw_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbw_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxbw_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxbw(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbw_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbw_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxbw_regZMM_m() {
			TestAssembler(c => c.vpmovzxbw(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxbw_zmm_k1z_ymmm256, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxdq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxdq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxdq_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxdq_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxdq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxdq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxdq_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxdq_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxdq_regZMM_regYMM() {
			TestAssembler(c => c.vpmovzxdq(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxdq_zmm_k1z_ymmm256, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxdq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxdq_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxdq_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxdq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxdq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxdq_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxdq_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxdq_regZMM_m() {
			TestAssembler(c => c.vpmovzxdq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxdq_zmm_k1z_ymmm256, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwd_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwd_xmm_k1z_xmmm64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwd_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwd_ymm_xmmm128, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwd_ymm_k1z_xmmm128, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxwd_regZMM_regYMM() {
			TestAssembler(c => c.vpmovzxwd(zmm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwd_zmm_k1z_ymmm256, zmm2.k1, ymm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwd_xmm_k1z_xmmm64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwd_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwd_ymm_xmmm128, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwd_ymm_k1z_xmmm128, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxwd_regZMM_m() {
			TestAssembler(c => c.vpmovzxwd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwd_zmm_k1z_ymmm256, zmm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwq_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwq_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwq_xmm_k1z_xmmm32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwq_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwq_ymm_xmmm64, ymm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(ymm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwq_ymm_k1z_xmmm64, ymm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxwq_regZMM_regXMM() {
			TestAssembler(c => c.vpmovzxwq(zmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwq_zmm_k1z_xmmm128, zmm2.k1, xmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwq_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwq_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwq_xmm_k1z_xmmm32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmovzxwq_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmovzxwq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwq_ymm_xmmm64, ymm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwq_ymm_k1z_xmmm64, ymm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmovzxwq_regZMM_m() {
			TestAssembler(c => c.vpmovzxwq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmovzxwq_zmm_k1z_xmmm128, zmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuldq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmuldq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmuldq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuldq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmuldq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmuldq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmuldq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmuldq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuldq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuldq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmuldq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuldq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuldq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuldq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmuldq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuldq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmuldq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmuldq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhrsw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhrsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulhrsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhrsw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhrsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulhrsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulhrsw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmulhrsw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhrsw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhrsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhrsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhrsw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhrsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhrsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulhrsw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmulhrsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhuw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhuw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulhuw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhuw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhuw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulhuw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulhuw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmulhuw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhuw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhuw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhuw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhuw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhuw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulhuw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmulhuw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulhw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulhw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulhw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmulhw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulhw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulhw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulhw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmulhw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulld_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulld(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulld_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulld_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmulld(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulld_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulld_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmulld(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulld_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmulld(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmulld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulld_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmulld_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmulld(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmulld(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulld_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmulld_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmulld(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmullq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpmullq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmullq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmullq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmullq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmullq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmullw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmullw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmullw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmullw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmullw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmullw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmullw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmullw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmullw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmullw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmullw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmullw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmullw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmullw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmullw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmullw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmullw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmullw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmullw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmultishiftqb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpmultishiftqb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmultishiftqb_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpmultishiftqb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmultishiftqb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmultishiftqb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmultishiftqb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpmultishiftqb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmultishiftqb_regYMM_regYMM_m() {
			TestAssembler(c => c.vpmultishiftqb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmultishiftqb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmultishiftqb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuludq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmuludq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmuludq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuludq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpmuludq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmuludq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmuludq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpmuludq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuludq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuludq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmuludq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuludq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpmuludq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuludq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpmuludq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuludq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpmuludq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpmuludq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntb_regXMM_regXMM() {
			TestAssembler(c => c.vpopcntb(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntb_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntb_regYMM_regYMM() {
			TestAssembler(c => c.vpopcntb(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntb_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntb_regZMM_regZMM() {
			TestAssembler(c => c.vpopcntb(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntb_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntb_regXMM_m() {
			TestAssembler(c => c.vpopcntb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntb_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntb_regYMM_m() {
			TestAssembler(c => c.vpopcntb(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntb_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntb_regZMM_m() {
			TestAssembler(c => c.vpopcntb(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntb_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntd_regXMM_regXMM() {
			TestAssembler(c => c.vpopcntd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntd_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntd_regYMM_regYMM() {
			TestAssembler(c => c.vpopcntd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntd_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntd_regZMM_regZMM() {
			TestAssembler(c => c.vpopcntd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntd_zmm_k1z_zmmm512b32, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntd_regXMM_m() {
			TestAssembler(c => c.vpopcntd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntd_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntd_regYMM_m() {
			TestAssembler(c => c.vpopcntd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntd_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntd_regZMM_m() {
			TestAssembler(c => c.vpopcntd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntd_zmm_k1z_zmmm512b32, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntq_regXMM_regXMM() {
			TestAssembler(c => c.vpopcntq(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntq_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntq_regYMM_regYMM() {
			TestAssembler(c => c.vpopcntq(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntq_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntq_regZMM_regZMM() {
			TestAssembler(c => c.vpopcntq(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntq_zmm_k1z_zmmm512b64, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntq_regXMM_m() {
			TestAssembler(c => c.vpopcntq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntq_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntq_regYMM_m() {
			TestAssembler(c => c.vpopcntq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntq_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntq_regZMM_m() {
			TestAssembler(c => c.vpopcntq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntq_zmm_k1z_zmmm512b64, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntw_regXMM_regXMM() {
			TestAssembler(c => c.vpopcntw(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntw_xmm_k1z_xmmm128, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntw_regYMM_regYMM() {
			TestAssembler(c => c.vpopcntw(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntw_ymm_k1z_ymmm256, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntw_regZMM_regZMM() {
			TestAssembler(c => c.vpopcntw(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntw_zmm_k1z_zmmm512, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntw_regXMM_m() {
			TestAssembler(c => c.vpopcntw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntw_xmm_k1z_xmmm128, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntw_regYMM_m() {
			TestAssembler(c => c.vpopcntw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntw_ymm_k1z_ymmm256, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpopcntw_regZMM_m() {
			TestAssembler(c => c.vpopcntw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpopcntw_zmm_k1z_zmmm512, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpor_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpor(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpor_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpor_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpor(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpor_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpor_regXMM_regXMM_m() {
			TestAssembler(c => c.vpor(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpor_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpor_regYMM_regYMM_m() {
			TestAssembler(c => c.vpor(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpor_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpord_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpord(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpord_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpord(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpord_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpord(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpord_regXMM_regXMM_m() {
			TestAssembler(c => c.vpord(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpord_regYMM_regYMM_m() {
			TestAssembler(c => c.vpord(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpord_regZMM_regZMM_m() {
			TestAssembler(c => c.vpord(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vporq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vporq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vporq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vporq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vporq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vporq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vporq_regXMM_regXMM_m() {
			TestAssembler(c => c.vporq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vporq_regYMM_regYMM_m() {
			TestAssembler(c => c.vporq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vporq_regZMM_regZMM_m() {
			TestAssembler(c => c.vporq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpperm_regXMM_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpperm(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpperm_xmm_xmm_xmmm128_xmm, xmm2, xmm3, xmm4, xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpperm_regXMM_regXMM_m_regXMM() {
			TestAssembler(c => c.vpperm(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpperm_xmm_xmm_xmmm128_xmm, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpperm_regXMM_regXMM_regXMM_m() {
			TestAssembler(c => c.vpperm(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpperm_xmm_xmm_xmm_xmmm128, xmm2, xmm3, xmm4, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regXMM_regXMM_i() {
			TestAssembler(c => c.vprold(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regYMM_regYMM_i() {
			TestAssembler(c => c.vprold(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regZMM_regZMM_i() {
			TestAssembler(c => c.vprold(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regXMM_m_i() {
			TestAssembler(c => c.vprold(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regYMM_m_i() {
			TestAssembler(c => c.vprold(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regZMM_m_i() {
			TestAssembler(c => c.vprold(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regXMM_regXMM_u() {
			TestAssembler(c => c.vprold(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regYMM_regYMM_u() {
			TestAssembler(c => c.vprold(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regZMM_regZMM_u() {
			TestAssembler(c => c.vprold(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regXMM_m_u() {
			TestAssembler(c => c.vprold(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regYMM_m_u() {
			TestAssembler(c => c.vprold(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprold_regZMM_m_u() {
			TestAssembler(c => c.vprold(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regXMM_regXMM_i() {
			TestAssembler(c => c.vprolq(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regYMM_regYMM_i() {
			TestAssembler(c => c.vprolq(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regZMM_regZMM_i() {
			TestAssembler(c => c.vprolq(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regXMM_m_i() {
			TestAssembler(c => c.vprolq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regYMM_m_i() {
			TestAssembler(c => c.vprolq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regZMM_m_i() {
			TestAssembler(c => c.vprolq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regXMM_regXMM_u() {
			TestAssembler(c => c.vprolq(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regYMM_regYMM_u() {
			TestAssembler(c => c.vprolq(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regZMM_regZMM_u() {
			TestAssembler(c => c.vprolq(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regXMM_m_u() {
			TestAssembler(c => c.vprolq(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regYMM_m_u() {
			TestAssembler(c => c.vprolq(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolq_regZMM_m_u() {
			TestAssembler(c => c.vprolq(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprolvd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vprolvd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vprolvd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvd_regXMM_regXMM_m() {
			TestAssembler(c => c.vprolvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvd_regYMM_regYMM_m() {
			TestAssembler(c => c.vprolvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvd_regZMM_regZMM_m() {
			TestAssembler(c => c.vprolvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprolvq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vprolvq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vprolvq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvq_regXMM_regXMM_m() {
			TestAssembler(c => c.vprolvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvq_regYMM_regYMM_m() {
			TestAssembler(c => c.vprolvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprolvq_regZMM_regZMM_m() {
			TestAssembler(c => c.vprolvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regXMM_regXMM_i() {
			TestAssembler(c => c.vprord(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regYMM_regYMM_i() {
			TestAssembler(c => c.vprord(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regZMM_regZMM_i() {
			TestAssembler(c => c.vprord(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regXMM_m_i() {
			TestAssembler(c => c.vprord(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regYMM_m_i() {
			TestAssembler(c => c.vprord(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regZMM_m_i() {
			TestAssembler(c => c.vprord(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regXMM_regXMM_u() {
			TestAssembler(c => c.vprord(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regYMM_regYMM_u() {
			TestAssembler(c => c.vprord(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regZMM_regZMM_u() {
			TestAssembler(c => c.vprord(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regXMM_m_u() {
			TestAssembler(c => c.vprord(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regYMM_m_u() {
			TestAssembler(c => c.vprord(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprord_regZMM_m_u() {
			TestAssembler(c => c.vprord(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regXMM_regXMM_i() {
			TestAssembler(c => c.vprorq(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regYMM_regYMM_i() {
			TestAssembler(c => c.vprorq(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regZMM_regZMM_i() {
			TestAssembler(c => c.vprorq(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regXMM_m_i() {
			TestAssembler(c => c.vprorq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regYMM_m_i() {
			TestAssembler(c => c.vprorq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regZMM_m_i() {
			TestAssembler(c => c.vprorq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regXMM_regXMM_u() {
			TestAssembler(c => c.vprorq(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regYMM_regYMM_u() {
			TestAssembler(c => c.vprorq(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regZMM_regZMM_u() {
			TestAssembler(c => c.vprorq(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regXMM_m_u() {
			TestAssembler(c => c.vprorq(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regYMM_m_u() {
			TestAssembler(c => c.vprorq(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorq_regZMM_m_u() {
			TestAssembler(c => c.vprorq(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprorvd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vprorvd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vprorvd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvd_regXMM_regXMM_m() {
			TestAssembler(c => c.vprorvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvd_regYMM_regYMM_m() {
			TestAssembler(c => c.vprorvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvd_regZMM_regZMM_m() {
			TestAssembler(c => c.vprorvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprorvq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vprorvq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vprorvq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvq_regXMM_regXMM_m() {
			TestAssembler(c => c.vprorvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvq_regYMM_regYMM_m() {
			TestAssembler(c => c.vprorvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vprorvq_regZMM_regZMM_m() {
			TestAssembler(c => c.vprorvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_m_regXMM() {
			TestAssembler(c => c.vprotb(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_regXMM_m() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_regXMM_i() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_m_i() {
			TestAssembler(c => c.vprotb(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_regXMM_u() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, (byte)127), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotb_regXMM_m_u() {
			TestAssembler(c => c.vprotb(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_m_regXMM() {
			TestAssembler(c => c.vprotd(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_regXMM_m() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_regXMM_i() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_m_i() {
			TestAssembler(c => c.vprotd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_regXMM_u() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, (byte)127), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotd_regXMM_m_u() {
			TestAssembler(c => c.vprotd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_m_regXMM() {
			TestAssembler(c => c.vprotq(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_regXMM_m() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_regXMM_i() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_m_i() {
			TestAssembler(c => c.vprotq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_regXMM_u() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, (byte)127), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotq_regXMM_m_u() {
			TestAssembler(c => c.vprotq(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_m_regXMM() {
			TestAssembler(c => c.vprotw(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_regXMM_m() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_regXMM_i() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_m_i() {
			TestAssembler(c => c.vprotw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_regXMM_u() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, (byte)127), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vprotw_regXMM_m_u() {
			TestAssembler(c => c.vprotw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsadbw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsadbw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsadbw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vpsadbw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsadbw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsadbw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsadbw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vpsadbw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsadbw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsadbw(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpsadbw_zmm_zmm_zmmm512, zmm2, zmm3, zmm4));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsadbw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsadbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsadbw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpsadbw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsadbw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsadbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsadbw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpsadbw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsadbw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsadbw(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpsadbw_zmm_zmm_zmmm512, zmm2, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterdd_m_regXMM() {
			TestAssembler(c => c.vpscatterdd(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterdd_vm32x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterdd_m_regYMM() {
			TestAssembler(c => c.vpscatterdd(__[rdx + ymm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterdd_vm32y_k1_ymm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterdd_m_regZMM() {
			TestAssembler(c => c.vpscatterdd(__[rdx + zmm2].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterdd_vm32z_k1_zmm, __[rdx + zmm2].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterdq_m_regXMM() {
			TestAssembler(c => c.vpscatterdq(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterdq_vm32x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterdq_m_regYMM() {
			TestAssembler(c => c.vpscatterdq(__[rdx + xmm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterdq_vm32x_k1_ymm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterdq_m_regZMM() {
			TestAssembler(c => c.vpscatterdq(__[rdx + ymm2].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterdq_vm32y_k1_zmm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterqd_m_regXMM() {
			{ /* if (dst.Index.IsXMM()) */
				TestAssembler(c => c.vpscatterqd(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqd_vm64x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
			} /* else */ { /* if (dst.Index.IsYMM()) */
				TestAssembler(c => c.vpscatterqd(__[rdx + ymm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqd_vm64y_k1_xmm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), xmm3)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vpscatterqd(__[rdx + zmm0].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqd_vm64y_k1_xmm, __[rdx + zmm0].k1.ToMemoryOperand(Bitness), xmm3)));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterqd_m_regYMM() {
			TestAssembler(c => c.vpscatterqd(__[rdx + zmm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqd_vm64z_k1_ymm, __[rdx + zmm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterqq_m_regXMM() {
			TestAssembler(c => c.vpscatterqq(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqq_vm64x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterqq_m_regYMM() {
			TestAssembler(c => c.vpscatterqq(__[rdx + ymm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqq_vm64y_k1_ymm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpscatterqq_m_regZMM() {
			TestAssembler(c => c.vpscatterqq(__[rdx + zmm2].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vpscatterqq_vm64z_k1_zmm, __[rdx + zmm2].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshab_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshab(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshab_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshab_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshab(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshab_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshab_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshab(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshab_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshad_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshad(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshad_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshad_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshad(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshad_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshad_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshad(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshad_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshaq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshaq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshaq_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshaq_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshaq(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshaq_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshaq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshaq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshaq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshaw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshaw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshaw_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshaw_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshaw(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshaw_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshaw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshaw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshaw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshlb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshlb_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlb_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshlb(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshlb_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshlb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshlb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshld_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshld(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshld_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshld_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshld(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshld_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshld_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshld_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldq_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshldvd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpshldvd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshldvd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshldvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpshldvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshldvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshldvq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpshldvq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshldvq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshldvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpshldvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshldvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshldvw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpshldvw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshldvw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshldvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpshldvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldvw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshldvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshldw_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshlq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshlq_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlq_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshlq(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshlq_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshlq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshlq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshlw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshlw_xmm_xmmm128_xmm, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlw_regXMM_m_regXMM() {
			TestAssembler(c => c.vpshlw(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshlw_xmm_xmmm128_xmm, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), xmm4));
		}
#endif

#if !NO_XOP
		[Fact]
		public void vpshlw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshlw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshlw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdq_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshrdvd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpshrdvd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshrdvd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshrdvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpshrdvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshrdvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshrdvq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpshrdvq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshrdvq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshrdvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpshrdvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshrdvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpshrdvw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpshrdvw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshrdvw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpshrdvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpshrdvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdvw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshrdvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshrdw_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpshufb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshufb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpshufb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshufb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpshufb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpshufb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshufb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpshufb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshufb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpshufb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufbitqmb_regK_regXMM_regXMM() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufbitqmb_regK_regYMM_regYMM() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufbitqmb_regK_regZMM_regZMM() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufbitqmb_regK_regXMM_m() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufbitqmb_regK_regYMM_m() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufbitqmb_regK_regZMM_m() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufd_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshufd(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regXMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(xmm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regYMM_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(ymm2.k1, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufd_regZMM_m_i() {
			TestAssembler(c => c.vpshufd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufd_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshufd(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regXMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(xmm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufd_regYMM_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(ymm2.k1, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufd_regZMM_m_u() {
			TestAssembler(c => c.vpshufd(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufhw_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regYMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufhw_regZMM_m_i() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufhw_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshufhw_regYMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshufhw_regZMM_m_u() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshuflw_regZMM_regZMM_i() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regXMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regYMM_m_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshuflw_regZMM_m_i() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshuflw_regZMM_regZMM_u() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regXMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpshuflw_regYMM_m_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpshuflw_regZMM_m_u() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignb_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsignb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsignb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignb_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsignb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsignb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignb_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsignb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignb_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsignb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsignd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsignd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsignd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsignd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignd_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsignd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignd_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsignd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsignw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsignw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsignw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsignw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsignw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpsignw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsignw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regZMM_regZMM_m() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regZMM_regZMM_i() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regXMM_m_i() {
			TestAssembler(c => c.vpslld(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regYMM_m_i() {
			TestAssembler(c => c.vpslld(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regZMM_m_i() {
			TestAssembler(c => c.vpslld(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslld_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regZMM_regZMM_u() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regXMM_m_u() {
			TestAssembler(c => c.vpslld(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regYMM_m_u() {
			TestAssembler(c => c.vpslld(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslld_regZMM_m_u() {
			TestAssembler(c => c.vpslld(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslldq_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslldq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpslldq_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(xmm2, xmm3, -5), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslldq_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslldq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpslldq_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(ymm2, ymm3, -5), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regZMM_regZMM_i() {
			TestAssembler(c => c.vpslldq(zmm2, zmm3, -5), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, zmm2, zmm3, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regXMM_m_i() {
			TestAssembler(c => c.vpslldq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regYMM_m_i() {
			TestAssembler(c => c.vpslldq(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regZMM_m_i() {
			TestAssembler(c => c.vpslldq(zmm2, __zmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, zmm2, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslldq_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslldq(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpslldq_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(xmm2, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpslldq_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpslldq(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpslldq_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(ymm2, ymm3, (byte)127), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regZMM_regZMM_u() {
			TestAssembler(c => c.vpslldq(zmm2, zmm3, (byte)127), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, zmm2, zmm3, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regXMM_m_u() {
			TestAssembler(c => c.vpslldq(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regYMM_m_u() {
			TestAssembler(c => c.vpslldq(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpslldq_regZMM_m_u() {
			TestAssembler(c => c.vpslldq(zmm2, __zmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, zmm2, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regXMM_m_i() {
			TestAssembler(c => c.vpsllq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regYMM_m_i() {
			TestAssembler(c => c.vpsllq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regZMM_m_i() {
			TestAssembler(c => c.vpsllq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllq_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regXMM_m_u() {
			TestAssembler(c => c.vpsllq(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regYMM_m_u() {
			TestAssembler(c => c.vpsllq(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllq_regZMM_m_u() {
			TestAssembler(c => c.vpsllq(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllvd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllvd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllvd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsllvd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsllvd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsllvd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsllvd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsllvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllvq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllvq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllvq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsllvq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsllvq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsllvq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllvq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsllvq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsllvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsllvw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsllvw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsllvw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsllvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsllvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllvw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsllvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regXMM_m_i() {
			TestAssembler(c => c.vpsllw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regYMM_m_i() {
			TestAssembler(c => c.vpsllw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regZMM_m_i() {
			TestAssembler(c => c.vpsllw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsllw_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regXMM_m_u() {
			TestAssembler(c => c.vpsllw(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regYMM_m_u() {
			TestAssembler(c => c.vpsllw(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsllw_regZMM_m_u() {
			TestAssembler(c => c.vpsllw(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regXMM_m_i() {
			TestAssembler(c => c.vpsrad(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regYMM_m_i() {
			TestAssembler(c => c.vpsrad(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regZMM_m_i() {
			TestAssembler(c => c.vpsrad(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrad_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regXMM_m_u() {
			TestAssembler(c => c.vpsrad(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regYMM_m_u() {
			TestAssembler(c => c.vpsrad(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrad_regZMM_m_u() {
			TestAssembler(c => c.vpsrad(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regYMM_regYMM_regXMM() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regXMM_regXMM_i() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regYMM_regYMM_i() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regXMM_m_i() {
			TestAssembler(c => c.vpsraq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regYMM_m_i() {
			TestAssembler(c => c.vpsraq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regZMM_m_i() {
			TestAssembler(c => c.vpsraq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regXMM_regXMM_u() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regYMM_regYMM_u() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regXMM_m_u() {
			TestAssembler(c => c.vpsraq(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regYMM_m_u() {
			TestAssembler(c => c.vpsraq(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraq_regZMM_m_u() {
			TestAssembler(c => c.vpsraq(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsravd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsravd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsravd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsravd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsravd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsravd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsravd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsravd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsravd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsravd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsravd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsravd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsravd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsravd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsravd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsravd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsravq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsravq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsravq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsravq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsravq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsravq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsravw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsravw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsravw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsravw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsravw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsravw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsravw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regXMM_m_i() {
			TestAssembler(c => c.vpsraw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regYMM_m_i() {
			TestAssembler(c => c.vpsraw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regZMM_m_i() {
			TestAssembler(c => c.vpsraw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsraw_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regXMM_m_u() {
			TestAssembler(c => c.vpsraw(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regYMM_m_u() {
			TestAssembler(c => c.vpsraw(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsraw_regZMM_m_u() {
			TestAssembler(c => c.vpsraw(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regXMM_m_i() {
			TestAssembler(c => c.vpsrld(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regYMM_m_i() {
			TestAssembler(c => c.vpsrld(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regZMM_m_i() {
			TestAssembler(c => c.vpsrld(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrld_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regXMM_m_u() {
			TestAssembler(c => c.vpsrld(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regYMM_m_u() {
			TestAssembler(c => c.vpsrld(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrld_regZMM_m_u() {
			TestAssembler(c => c.vpsrld(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrldq_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrldq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrldq_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(xmm2, xmm3, -5), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrldq_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrldq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrldq_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(ymm2, ymm3, -5), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsrldq(zmm2, zmm3, -5), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, zmm2, zmm3, -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regXMM_m_i() {
			TestAssembler(c => c.vpsrldq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regYMM_m_i() {
			TestAssembler(c => c.vpsrldq(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regZMM_m_i() {
			TestAssembler(c => c.vpsrldq(zmm2, __zmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, zmm2, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrldq_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrldq(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsrldq_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(xmm2, xmm3, (byte)127), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrldq_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrldq(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsrldq_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(ymm2, ymm3, (byte)127), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsrldq(zmm2, zmm3, (byte)127), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, zmm2, zmm3, (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regXMM_m_u() {
			TestAssembler(c => c.vpsrldq(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regYMM_m_u() {
			TestAssembler(c => c.vpsrldq(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrldq_regZMM_m_u() {
			TestAssembler(c => c.vpsrldq(zmm2, __zmmword_ptr[rcx], (byte)127), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, zmm2, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regXMM_m_i() {
			TestAssembler(c => c.vpsrlq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regYMM_m_i() {
			TestAssembler(c => c.vpsrlq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regZMM_m_i() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlq_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regXMM_m_u() {
			TestAssembler(c => c.vpsrlq(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regYMM_m_u() {
			TestAssembler(c => c.vpsrlq(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlq_regZMM_m_u() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlvd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsrlvd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsrlvd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrlvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlvq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsrlvq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsrlvq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlvq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsrlvq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrlvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvw_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpsrlvw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvw_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpsrlvw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsrlvw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvw_regXMM_regXMM_m() {
			TestAssembler(c => c.vpsrlvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvw_regYMM_regYMM_m() {
			TestAssembler(c => c.vpsrlvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlvw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrlvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regYMM_regYMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_xmmm128, ymm2, ymm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regZMM_regZMM_regXMM() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, xmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_xmmm128, ymm2, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128, ymm2.k1, ymm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, zmm2.k1, zmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_imm8, xmm2, xmm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_imm8, ymm2, ymm3, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regZMM_regZMM_i() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regXMM_m_i() {
			TestAssembler(c => c.vpsrlw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regYMM_m_i() {
			TestAssembler(c => c.vpsrlw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regZMM_m_i() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_imm8, xmm2, xmm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, xmm2.k1, xmm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsrlw_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_imm8, ymm2, ymm3, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, ymm2.k1, ymm3, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regZMM_regZMM_u() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regXMM_m_u() {
			TestAssembler(c => c.vpsrlw(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regYMM_m_u() {
			TestAssembler(c => c.vpsrlw(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsrlw_regZMM_m_u() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsubd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsubd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsubq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpsubq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubsb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubsb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubsb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubsb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubsb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubsw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubsw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubsw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubsw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubsw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubsw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusb_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubusb_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusb_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubusb_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubusb_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubusb(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusb_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusb_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusb_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusb_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubusb_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubusb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubusw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubusw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubusw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubusw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubusw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubusw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubusw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubusw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpsubw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpsubw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpsubw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpsubw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpsubw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpternlogq_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vptest_regXMM_regXMM() {
			TestAssembler(c => c.vptest(xmm2, xmm3), Instruction.Create(Code.VEX_Vptest_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vptest_regYMM_regYMM() {
			TestAssembler(c => c.vptest(ymm2, ymm3), Instruction.Create(Code.VEX_Vptest_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vptest_regXMM_m() {
			TestAssembler(c => c.vptest(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vptest_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vptest_regYMM_m() {
			TestAssembler(c => c.vptest(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vptest_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmb_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestmb(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmb_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestmb(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmb_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestmb(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmb_regK_regXMM_m() {
			TestAssembler(c => c.vptestmb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmb_regK_regYMM_m() {
			TestAssembler(c => c.vptestmb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmb_regK_regZMM_m() {
			TestAssembler(c => c.vptestmb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestmd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestmd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestmd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmd_regK_regXMM_m() {
			TestAssembler(c => c.vptestmd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmd_regK_regYMM_m() {
			TestAssembler(c => c.vptestmd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmd_regK_regZMM_m() {
			TestAssembler(c => c.vptestmd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmq_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestmq(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmq_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestmq(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmq_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestmq(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmq_regK_regXMM_m() {
			TestAssembler(c => c.vptestmq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmq_regK_regYMM_m() {
			TestAssembler(c => c.vptestmq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmq_regK_regZMM_m() {
			TestAssembler(c => c.vptestmq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmw_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestmw(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmw_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestmw(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmw_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestmw(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmw_regK_regXMM_m() {
			TestAssembler(c => c.vptestmw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmw_regK_regYMM_m() {
			TestAssembler(c => c.vptestmw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestmw_regK_regZMM_m() {
			TestAssembler(c => c.vptestmw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmb_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestnmb(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmb_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestnmb(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmb_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestnmb(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmb_regK_regXMM_m() {
			TestAssembler(c => c.vptestnmb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmb_regK_regYMM_m() {
			TestAssembler(c => c.vptestnmb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmb_regK_regZMM_m() {
			TestAssembler(c => c.vptestnmb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmd_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestnmd(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmd_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestnmd(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmd_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestnmd(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmd_regK_regXMM_m() {
			TestAssembler(c => c.vptestnmd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmd_regK_regYMM_m() {
			TestAssembler(c => c.vptestnmd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmd_regK_regZMM_m() {
			TestAssembler(c => c.vptestnmd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmq_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestnmq(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmq_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestnmq(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmq_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestnmq(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmq_regK_regXMM_m() {
			TestAssembler(c => c.vptestnmq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmq_regK_regYMM_m() {
			TestAssembler(c => c.vptestnmq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmq_regK_regZMM_m() {
			TestAssembler(c => c.vptestnmq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmw_regK_regXMM_regXMM() {
			TestAssembler(c => c.vptestnmw(k2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_xmm_xmmm128, k2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmw_regK_regYMM_regYMM() {
			TestAssembler(c => c.vptestnmw(k2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_ymm_ymmm256, k2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmw_regK_regZMM_regZMM() {
			TestAssembler(c => c.vptestnmw(k2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_zmm_zmmm512, k2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmw_regK_regXMM_m() {
			TestAssembler(c => c.vptestnmw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_xmm_xmmm128, k2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmw_regK_regYMM_m() {
			TestAssembler(c => c.vptestnmw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_ymm_ymmm256, k2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vptestnmw_regK_regZMM_m() {
			TestAssembler(c => c.vptestnmw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_zmm_zmmm512, k2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhbw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhbw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhbw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhbw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhbw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhbw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhbw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpckhbw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhbw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhbw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhbw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhbw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhbw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpckhbw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhdq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhdq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhdq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhdq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpckhdq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhdq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhdq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhdq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhdq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhdq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhdq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpckhdq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhqdq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhqdq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhqdq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhqdq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhqdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpckhqdq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhqdq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhqdq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhqdq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhqdq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhqdq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhqdq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhqdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpckhqdq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhwd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhwd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhwd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhwd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhwd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhwd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhwd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpckhwd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhwd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhwd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhwd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckhwd_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckhwd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhwd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckhwd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpckhwd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklbw_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklbw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpcklbw_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklbw_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklbw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpcklbw_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpcklbw_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpcklbw(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklbw_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklbw_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklbw_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklbw_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpcklbw_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpcklbw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckldq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckldq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckldq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckldq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpckldq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckldq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckldq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpckldq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckldq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckldq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpckldq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckldq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpckldq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckldq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpckldq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckldq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpckldq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpckldq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklqdq_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpcklqdq_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklqdq_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpcklqdq_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpcklqdq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpcklqdq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklqdq_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpcklqdq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklqdq_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklqdq_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpcklqdq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklqdq_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpcklqdq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpcklqdq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklwd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklwd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpcklwd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklwd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklwd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpcklwd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpcklwd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpunpcklwd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklwd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklwd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklwd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vpunpcklwd_regYMM_regYMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vpunpcklwd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklwd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpunpcklwd_regZMM_regZMM_m() {
			TestAssembler(c => c.vpunpcklwd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpxor_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpxor(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpxor_xmm_xmm_xmmm128, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpxor_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpxor(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpxor_ymm_ymm_ymmm256, ymm2, ymm3, ymm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpxor_regXMM_regXMM_m() {
			TestAssembler(c => c.vpxor(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpxor_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vpxor_regYMM_regYMM_m() {
			TestAssembler(c => c.vpxor(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpxor_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxord_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpxord(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxord_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpxord(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxord_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpxord(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxord_regXMM_regXMM_m() {
			TestAssembler(c => c.vpxord(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxord_regYMM_regYMM_m() {
			TestAssembler(c => c.vpxord(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxord_regZMM_regZMM_m() {
			TestAssembler(c => c.vpxord(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxorq_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vpxorq(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxorq_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vpxorq(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxorq_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vpxorq(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxorq_regXMM_regXMM_m() {
			TestAssembler(c => c.vpxorq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxorq_regYMM_regYMM_m() {
			TestAssembler(c => c.vpxorq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vpxorq_regZMM_regZMM_m() {
			TestAssembler(c => c.vpxorq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangepd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangeps_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangesd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangesd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangesd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangesd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangess_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangess_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangess_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrangess_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14pd_regXMM_regXMM() {
			TestAssembler(c => c.vrcp14pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14pd_regYMM_regYMM() {
			TestAssembler(c => c.vrcp14pd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14pd_regZMM_regZMM() {
			TestAssembler(c => c.vrcp14pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14pd_regXMM_m() {
			TestAssembler(c => c.vrcp14pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14pd_regYMM_m() {
			TestAssembler(c => c.vrcp14pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14pd_regZMM_m() {
			TestAssembler(c => c.vrcp14pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ps_regXMM_regXMM() {
			TestAssembler(c => c.vrcp14ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ps_regYMM_regYMM() {
			TestAssembler(c => c.vrcp14ps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ps_regZMM_regZMM() {
			TestAssembler(c => c.vrcp14ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ps_regXMM_m() {
			TestAssembler(c => c.vrcp14ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ps_regYMM_m() {
			TestAssembler(c => c.vrcp14ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ps_regZMM_m() {
			TestAssembler(c => c.vrcp14ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14sd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrcp14sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14sd_regXMM_regXMM_m() {
			TestAssembler(c => c.vrcp14sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrcp14ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp14ss_regXMM_regXMM_m() {
			TestAssembler(c => c.vrcp14ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28pd_regZMM_regZMM() {
			TestAssembler(c => c.vrcp28pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28pd_regZMM_m() {
			TestAssembler(c => c.vrcp28pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28ps_regZMM_regZMM() {
			TestAssembler(c => c.vrcp28ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28ps_regZMM_m() {
			TestAssembler(c => c.vrcp28ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28sd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrcp28sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28sd_regXMM_regXMM_m() {
			TestAssembler(c => c.vrcp28sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28ss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrcp28ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrcp28ss_regXMM_regXMM_m() {
			TestAssembler(c => c.vrcp28ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrcpps_regXMM_regXMM() {
			TestAssembler(c => c.vrcpps(xmm2, xmm3), Instruction.Create(Code.VEX_Vrcpps_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrcpps_regYMM_regYMM() {
			TestAssembler(c => c.vrcpps(ymm2, ymm3), Instruction.Create(Code.VEX_Vrcpps_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrcpps_regXMM_m() {
			TestAssembler(c => c.vrcpps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrcpps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrcpps_regYMM_m() {
			TestAssembler(c => c.vrcpps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrcpps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrcpss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrcpss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vrcpss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrcpss_regXMM_regXMM_m() {
			TestAssembler(c => c.vrcpss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrcpss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regXMM_regXMM_i() {
			TestAssembler(c => c.vreducepd(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regYMM_regYMM_i() {
			TestAssembler(c => c.vreducepd(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regZMM_regZMM_i() {
			TestAssembler(c => c.vreducepd(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regXMM_m_i() {
			TestAssembler(c => c.vreducepd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regYMM_m_i() {
			TestAssembler(c => c.vreducepd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regZMM_m_i() {
			TestAssembler(c => c.vreducepd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regXMM_regXMM_u() {
			TestAssembler(c => c.vreducepd(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regYMM_regYMM_u() {
			TestAssembler(c => c.vreducepd(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regZMM_regZMM_u() {
			TestAssembler(c => c.vreducepd(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regXMM_m_u() {
			TestAssembler(c => c.vreducepd(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regYMM_m_u() {
			TestAssembler(c => c.vreducepd(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducepd_regZMM_m_u() {
			TestAssembler(c => c.vreducepd(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regXMM_regXMM_i() {
			TestAssembler(c => c.vreduceps(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regYMM_regYMM_i() {
			TestAssembler(c => c.vreduceps(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regZMM_regZMM_i() {
			TestAssembler(c => c.vreduceps(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regXMM_m_i() {
			TestAssembler(c => c.vreduceps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regYMM_m_i() {
			TestAssembler(c => c.vreduceps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regZMM_m_i() {
			TestAssembler(c => c.vreduceps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regXMM_regXMM_u() {
			TestAssembler(c => c.vreduceps(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regYMM_regYMM_u() {
			TestAssembler(c => c.vreduceps(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regZMM_regZMM_u() {
			TestAssembler(c => c.vreduceps(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regXMM_m_u() {
			TestAssembler(c => c.vreduceps(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regYMM_m_u() {
			TestAssembler(c => c.vreduceps(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreduceps_regZMM_m_u() {
			TestAssembler(c => c.vreduceps(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducesd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducesd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducesd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducesd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducess_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducess_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducess_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vreducess_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regXMM_regXMM_i() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regYMM_regYMM_i() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regZMM_regZMM_i() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regXMM_m_i() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regYMM_m_i() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regZMM_m_i() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regXMM_regXMM_u() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regYMM_regYMM_u() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regZMM_regZMM_u() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regXMM_m_u() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regYMM_m_u() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalepd_regZMM_m_u() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regXMM_regXMM_i() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, xmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regYMM_regYMM_i() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, ymm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regZMM_regZMM_i() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, zmm3, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, zmm3, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regXMM_m_i() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regYMM_m_i() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regZMM_m_i() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regXMM_regXMM_u() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, xmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, xmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regYMM_regYMM_u() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, ymm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, ymm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regZMM_regZMM_u() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, zmm3, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, zmm3, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regXMM_m_u() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regYMM_m_u() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaleps_regZMM_m_u() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalesd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalesd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalesd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscalesd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaless_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaless_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaless_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, xmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrndscaless_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regXMM_regXMM_i() {
			TestAssembler(c => c.vroundpd(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regYMM_regYMM_i() {
			TestAssembler(c => c.vroundpd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, ymm2, ymm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regXMM_m_i() {
			TestAssembler(c => c.vroundpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regYMM_m_i() {
			TestAssembler(c => c.vroundpd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regXMM_regXMM_u() {
			TestAssembler(c => c.vroundpd(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regYMM_regYMM_u() {
			TestAssembler(c => c.vroundpd(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regXMM_m_u() {
			TestAssembler(c => c.vroundpd(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundpd_regYMM_m_u() {
			TestAssembler(c => c.vroundpd(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regXMM_regXMM_i() {
			TestAssembler(c => c.vroundps(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, xmm2, xmm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regYMM_regYMM_i() {
			TestAssembler(c => c.vroundps(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, ymm2, ymm3, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regXMM_m_i() {
			TestAssembler(c => c.vroundps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regYMM_m_i() {
			TestAssembler(c => c.vroundps(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regXMM_regXMM_u() {
			TestAssembler(c => c.vroundps(xmm2, xmm3, (byte)127), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, xmm2, xmm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regYMM_regYMM_u() {
			TestAssembler(c => c.vroundps(ymm2, ymm3, (byte)127), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, ymm2, ymm3, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regXMM_m_u() {
			TestAssembler(c => c.vroundps(xmm2, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundps_regYMM_m_u() {
			TestAssembler(c => c.vroundps(ymm2, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundsd_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundsd_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundsd_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundsd_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundss_regXMM_regXMM_regXMM_i() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundss_regXMM_regXMM_m_i() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundss_regXMM_regXMM_regXMM_u() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, xmm4, (uint)(byte)127));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vroundss_regXMM_regXMM_m_u() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14pd_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrt14pd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14pd_regYMM_regYMM() {
			TestAssembler(c => c.vrsqrt14pd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14pd_regZMM_regZMM() {
			TestAssembler(c => c.vrsqrt14pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14pd_regXMM_m() {
			TestAssembler(c => c.vrsqrt14pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14pd_regYMM_m() {
			TestAssembler(c => c.vrsqrt14pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14pd_regZMM_m() {
			TestAssembler(c => c.vrsqrt14pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ps_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrt14ps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ps_regYMM_regYMM() {
			TestAssembler(c => c.vrsqrt14ps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ps_regZMM_regZMM() {
			TestAssembler(c => c.vrsqrt14ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ps_regXMM_m() {
			TestAssembler(c => c.vrsqrt14ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ps_regYMM_m() {
			TestAssembler(c => c.vrsqrt14ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ps_regZMM_m() {
			TestAssembler(c => c.vrsqrt14ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14sd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrt14sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14sd_regXMM_regXMM_m() {
			TestAssembler(c => c.vrsqrt14sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrt14ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt14ss_regXMM_regXMM_m() {
			TestAssembler(c => c.vrsqrt14ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28pd_regZMM_regZMM() {
			TestAssembler(c => c.vrsqrt28pd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28pd_regZMM_m() {
			TestAssembler(c => c.vrsqrt28pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28ps_regZMM_regZMM() {
			TestAssembler(c => c.vrsqrt28ps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, zmm2.k1, zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28ps_regZMM_m() {
			TestAssembler(c => c.vrsqrt28ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28sd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrt28sd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28sd_regXMM_regXMM_m() {
			TestAssembler(c => c.vrsqrt28sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28ss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrt28ss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vrsqrt28ss_regXMM_regXMM_m() {
			TestAssembler(c => c.vrsqrt28ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrsqrtps_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrtps(xmm2, xmm3), Instruction.Create(Code.VEX_Vrsqrtps_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrsqrtps_regYMM_regYMM() {
			TestAssembler(c => c.vrsqrtps(ymm2, ymm3), Instruction.Create(Code.VEX_Vrsqrtps_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrsqrtps_regXMM_m() {
			TestAssembler(c => c.vrsqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrsqrtps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrsqrtps_regYMM_m() {
			TestAssembler(c => c.vrsqrtps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrsqrtps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrsqrtss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vrsqrtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vrsqrtss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vrsqrtss_regXMM_regXMM_m() {
			TestAssembler(c => c.vrsqrtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrsqrtss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefpd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vscalefpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefpd_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vscalefpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vscalefpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefpd_regXMM_regXMM_m() {
			TestAssembler(c => c.vscalefpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefpd_regYMM_regYMM_m() {
			TestAssembler(c => c.vscalefpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vscalefpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefps_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vscalefps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefps_regYMM_regYMM_regYMM() {
			TestAssembler(c => c.vscalefps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vscalefps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefps_regXMM_regXMM_m() {
			TestAssembler(c => c.vscalefps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefps_regYMM_regYMM_m() {
			TestAssembler(c => c.vscalefps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefps_regZMM_regZMM_m() {
			TestAssembler(c => c.vscalefps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefsd_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vscalefsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefsd_regXMM_regXMM_m() {
			TestAssembler(c => c.vscalefsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefss_regXMM_regXMM_regXMM() {
			TestAssembler(c => c.vscalefss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscalefss_regXMM_regXMM_m() {
			TestAssembler(c => c.vscalefss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterdpd_m_regXMM() {
			TestAssembler(c => c.vscatterdpd(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterdpd_vm32x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterdpd_m_regYMM() {
			TestAssembler(c => c.vscatterdpd(__[rdx + xmm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterdpd_vm32x_k1_ymm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterdpd_m_regZMM() {
			TestAssembler(c => c.vscatterdpd(__[rdx + ymm2].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterdpd_vm32y_k1_zmm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterdps_m_regXMM() {
			TestAssembler(c => c.vscatterdps(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterdps_vm32x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterdps_m_regYMM() {
			TestAssembler(c => c.vscatterdps(__[rdx + ymm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterdps_vm32y_k1_ymm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterdps_m_regZMM() {
			TestAssembler(c => c.vscatterdps(__[rdx + zmm2].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterdps_vm32z_k1_zmm, __[rdx + zmm2].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf0dpd_m() {
			TestAssembler(c => c.vscatterpf0dpd(__[rdx + ymm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf0dpd_vm32y_k1, __[rdx + ymm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf0dps_m() {
			TestAssembler(c => c.vscatterpf0dps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf0dps_vm32z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf0qpd_m() {
			TestAssembler(c => c.vscatterpf0qpd(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf0qpd_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf0qps_m() {
			TestAssembler(c => c.vscatterpf0qps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf0qps_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf1dpd_m() {
			TestAssembler(c => c.vscatterpf1dpd(__[rdx + ymm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf1dpd_vm32y_k1, __[rdx + ymm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf1dps_m() {
			TestAssembler(c => c.vscatterpf1dps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf1dps_vm32z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf1qpd_m() {
			TestAssembler(c => c.vscatterpf1qpd(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf1qpd_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterpf1qps_m() {
			TestAssembler(c => c.vscatterpf1qps(__[rdx + zmm2].k1), ApplyK1(Instruction.Create(Code.EVEX_Vscatterpf1qps_vm64z_k1, __[rdx + zmm2].k1.ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterqpd_m_regXMM() {
			TestAssembler(c => c.vscatterqpd(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqpd_vm64x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterqpd_m_regYMM() {
			TestAssembler(c => c.vscatterqpd(__[rdx + ymm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqpd_vm64y_k1_ymm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterqpd_m_regZMM() {
			TestAssembler(c => c.vscatterqpd(__[rdx + zmm2].k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqpd_vm64z_k1_zmm, __[rdx + zmm2].k1.ToMemoryOperand(Bitness), zmm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterqps_m_regXMM() {
			{ /* if (dst.Index.IsXMM()) */
				TestAssembler(c => c.vscatterqps(__[rdx + xmm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqps_vm64x_k1_xmm, __[rdx + xmm2].k1.ToMemoryOperand(Bitness), xmm3)));
			} /* else */ { /* if (dst.Index.IsYMM()) */
				TestAssembler(c => c.vscatterqps(__[rdx + ymm2].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqps_vm64y_k1_xmm, __[rdx + ymm2].k1.ToMemoryOperand(Bitness), xmm3)));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.vscatterqps(__[rdx + zmm0].k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqps_vm64y_k1_xmm, __[rdx + zmm0].k1.ToMemoryOperand(Bitness), xmm3)));
				});
			}
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vscatterqps_m_regYMM() {
			TestAssembler(c => c.vscatterqps(__[rdx + zmm2].k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vscatterqps_vm64z_k1_ymm, __[rdx + zmm2].k1.ToMemoryOperand(Bitness), ymm3)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff32x4_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshuff64x2_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi32x4_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regYMM_regYMM_regYMM_i() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regYMM_regYMM_m_i() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regYMM_regYMM_regYMM_u() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regYMM_regYMM_m_u() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufi64x2_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regYMM_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufpd_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regXMM_regXMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regYMM_regYMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufpd_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regYMM_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufpd_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regXMM_regXMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufpd_regYMM_regYMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufpd_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regXMM_regXMM_regXMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, xmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regYMM_regYMM_regYMM_i() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, ymm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufps_regZMM_regZMM_regZMM_i() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, zmm4, -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regXMM_regXMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regYMM_regYMM_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), -5)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufps_regZMM_regZMM_m_i() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), -5)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regXMM_regXMM_regXMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, xmm4, (byte)127), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, xmm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, xmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, xmm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regYMM_regYMM_regYMM_u() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, ymm4, (byte)127), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, ymm4, (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, ymm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, ymm4, (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufps_regZMM_regZMM_regZMM_u() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, zmm4, (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, zmm4, (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regXMM_regXMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vshufps_regYMM_regYMM_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)127), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vshufps_regZMM_regZMM_m_u() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)127), ApplyK1(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness), (uint)(byte)127)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtpd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtpd(xmm2, xmm3), Instruction.Create(Code.VEX_Vsqrtpd_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtpd_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtpd(ymm2, ymm3), Instruction.Create(Code.VEX_Vsqrtpd_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsqrtpd_regZMM_regZMM() {
			TestAssembler(c => c.vsqrtpd(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtpd_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtpd(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsqrtpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtpd_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtpd(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsqrtpd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtpd_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsqrtpd_regZMM_m() {
			TestAssembler(c => c.vsqrtpd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtps_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtps(xmm2, xmm3), Instruction.Create(Code.VEX_Vsqrtps_xmm_xmmm128, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(xmm2.k1, xmm3), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32, xmm2.k1, xmm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtps_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtps(ymm2, ymm3), Instruction.Create(Code.VEX_Vsqrtps_ymm_ymmm256, ymm2, ymm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(ymm2.k1, ymm3), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32, ymm2.k1, ymm3)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsqrtps_regZMM_regZMM() {
			TestAssembler(c => c.vsqrtps(zmm2.k1, zmm3), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, zmm2.k1, zmm3)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtps_regXMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtps(xmm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32, xmm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32, xmm2.k1, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtps_regYMM_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtps(ymm2.k1, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32, ymm2.k1, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsqrtps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32, ymm2.k1, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsqrtps_regZMM_m() {
			TestAssembler(c => c.vsqrtps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, zmm2.k1, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsqrtsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsqrtss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsqrtss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsqrtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vstmxcsr_m() {
			TestAssembler(c => c.vstmxcsr(__[rcx]), Instruction.Create(Code.VEX_Vstmxcsr_m32, __[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vsubpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsubpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vsubpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsubpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsubpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsubpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vsubpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vsubps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsubps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vsubps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsubps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vsubps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vsubps_regZMM_regZMM_m() {
			TestAssembler(c => c.vsubps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubsd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubsd_xmm_xmm_xmmm64, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubsd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubsd_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubsd_xmm_xmm_xmmm64, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubss_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubss_xmm_xmm_xmmm32, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubss(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vsubss_regXMM_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vsubss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubss_xmm_xmm_xmmm32, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestpd_regXMM_regXMM() {
			TestAssembler(c => c.vtestpd(xmm2, xmm3), Instruction.Create(Code.VEX_Vtestpd_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestpd_regYMM_regYMM() {
			TestAssembler(c => c.vtestpd(ymm2, ymm3), Instruction.Create(Code.VEX_Vtestpd_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestpd_regXMM_m() {
			TestAssembler(c => c.vtestpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestpd_regYMM_m() {
			TestAssembler(c => c.vtestpd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestpd_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestps_regXMM_regXMM() {
			TestAssembler(c => c.vtestps(xmm2, xmm3), Instruction.Create(Code.VEX_Vtestps_xmm_xmmm128, xmm2, xmm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestps_regYMM_regYMM() {
			TestAssembler(c => c.vtestps(ymm2, ymm3), Instruction.Create(Code.VEX_Vtestps_ymm_ymmm256, ymm2, ymm3));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestps_regXMM_m() {
			TestAssembler(c => c.vtestps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vtestps_regYMM_m() {
			TestAssembler(c => c.vtestps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestps_ymm_ymmm256, ymm2, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vucomisd_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vucomisd(xmm2, xmm3), Instruction.Create(Code.VEX_Vucomisd_xmm_xmmm64, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomisd(xmm2, xmm3), Instruction.Create(Code.EVEX_Vucomisd_xmm_xmmm64_sae, xmm2, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vucomisd_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vucomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vucomisd_xmm_xmmm64, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vucomisd_xmm_xmmm64_sae, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vucomiss_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vucomiss(xmm2, xmm3), Instruction.Create(Code.VEX_Vucomiss_xmm_xmmm32, xmm2, xmm3), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomiss(xmm2, xmm3), Instruction.Create(Code.EVEX_Vucomiss_xmm_xmmm32_sae, xmm2, xmm3), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vucomiss_regXMM_m() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vucomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vucomiss_xmm_xmmm32, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vucomiss_xmm_xmmm32_sae, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpckhpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpckhpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpckhpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpckhpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpckhpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vunpckhpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpckhpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpckhpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpckhpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vunpckhpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpckhps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpckhps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpckhps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpckhps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpckhps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vunpckhps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpckhps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpckhps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpckhps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpckhps_regZMM_regZMM_m() {
			TestAssembler(c => c.vunpckhps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpcklpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpcklpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpcklpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpcklpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpcklpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vunpcklpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpcklpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpcklpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpcklpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vunpcklpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpcklps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpcklps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vunpcklps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpcklps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpcklps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vunpcklps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpcklps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vunpcklps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vunpcklps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vunpcklps_regZMM_regZMM_m() {
			TestAssembler(c => c.vunpcklps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorpd_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vxorpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vxorpd_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorpd_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vxorpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vxorpd_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vxorpd_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vxorpd(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorpd_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vxorpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorpd_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorpd_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vxorpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorpd_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vxorpd_regZMM_regZMM_m() {
			TestAssembler(c => c.vxorpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorps_regXMM_regXMM_regXMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vxorps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vxorps_xmm_xmm_xmmm128, xmm2, xmm3, xmm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(xmm2.k1, xmm3, xmm4), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, xmm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorps_regYMM_regYMM_regYMM() {
			{ /* if (PreferVex) */
				TestAssembler(c => c.vxorps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vxorps_ymm_ymm_ymmm256, ymm2, ymm3, ymm4), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(ymm2.k1, ymm3, ymm4), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, ymm4)), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vxorps_regZMM_regZMM_regZMM() {
			TestAssembler(c => c.vxorps(zmm2.k1, zmm3, zmm4), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, zmm4)));
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorps_regXMM_regXMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vxorps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorps_xmm_xmm_xmmm128, xmm2, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, xmm2.k1, xmm3, __xmmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_VEX && !NO_EVEX
		[Fact]
		public void vxorps_regYMM_regYMM_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __dword_bcst[rdx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex | LocalOpCodeFlags.Broadcast);
			} /* else */ { /* if (PreferVex) */
				TestAssembler(c => c.vxorps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorps_ymm_ymm_ymmm256, ymm2, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness)), LocalOpCodeFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, ymm2.k1, ymm3, __ymmword_ptr[rcx].ToMemoryOperand(Bitness))), LocalOpCodeFlags.PreferEvex);
		}
#endif

#if !NO_EVEX
		[Fact]
		public void vxorps_regZMM_regZMM_m() {
			TestAssembler(c => c.vxorps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK1(Instruction.Create(Code.EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, zmm2.k1, zmm3, __zmmword_ptr[rcx].ToMemoryOperand(Bitness))));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vzeroall() {
			TestAssembler(c => c.vzeroall(), Instruction.Create(Code.VEX_Vzeroall));
		}
#endif

#if !NO_VEX
		[Fact]
		public void vzeroupper() {
			TestAssembler(c => c.vzeroupper(), Instruction.Create(Code.VEX_Vzeroupper));
		}
#endif

		[Fact]
		public void wait() {
			TestAssembler(c => c.wait(), Instruction.Create(Code.Wait));
		}

		[Fact]
		public void wbinvd() {
			TestAssembler(c => c.wbinvd(), Instruction.Create(Code.Wbinvd));
		}

		[Fact]
		public void wbnoinvd() {
			TestAssembler(c => c.wbnoinvd(), Instruction.Create(Code.Wbnoinvd));
		}

		[Fact]
		public void wrfsbase_reg32() {
			TestAssembler(c => c.wrfsbase(edx), Instruction.Create(Code.Wrfsbase_r32, edx));
		}

		[Fact]
		public void wrfsbase_reg64() {
			TestAssembler(c => c.wrfsbase(rdx), Instruction.Create(Code.Wrfsbase_r64, rdx));
		}

		[Fact]
		public void wrgsbase_reg32() {
			TestAssembler(c => c.wrgsbase(edx), Instruction.Create(Code.Wrgsbase_r32, edx));
		}

		[Fact]
		public void wrgsbase_reg64() {
			TestAssembler(c => c.wrgsbase(rdx), Instruction.Create(Code.Wrgsbase_r64, rdx));
		}

		[Fact]
		public void wrmsr() {
			TestAssembler(c => c.wrmsr(), Instruction.Create(Code.Wrmsr));
		}

		[Fact]
		public void wrpkru() {
			TestAssembler(c => c.wrpkru(), Instruction.Create(Code.Wrpkru));
		}

		[Fact]
		public void wrssd_m_reg32() {
			TestAssembler(c => c.wrssd(__[rcx], ebx), Instruction.Create(Code.Wrssd_m32_r32, __[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void wrssq_m_reg64() {
			TestAssembler(c => c.wrssq(__[rcx], rbx), Instruction.Create(Code.Wrssq_m64_r64, __[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void wrussd_m_reg32() {
			TestAssembler(c => c.wrussd(__[rcx], ebx), Instruction.Create(Code.Wrussd_m32_r32, __[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void wrussq_m_reg64() {
			TestAssembler(c => c.wrussq(__[rcx], rbx), Instruction.Create(Code.Wrussq_m64_r64, __[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void xabort_i() {
			TestAssembler(c => c.xabort(-5), Instruction.Create(Code.Xabort_imm8, -5));
		}

		[Fact]
		public void xabort_u() {
			TestAssembler(c => c.xabort((byte)127), Instruction.Create(Code.Xabort_imm8, (uint)(byte)127));
		}

		[Fact]
		public void xadd_reg8_reg8() {
			TestAssembler(c => c.xadd(dl, bl), Instruction.Create(Code.Xadd_rm8_r8, dl, bl));
		}

		[Fact]
		public void xadd_m_reg8() {
			TestAssembler(c => c.xadd(__byte_ptr[rcx], bl), Instruction.Create(Code.Xadd_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void xadd_reg16_reg16() {
			TestAssembler(c => c.xadd(dx, bx), Instruction.Create(Code.Xadd_rm16_r16, dx, bx));
		}

		[Fact]
		public void xadd_m_reg16() {
			TestAssembler(c => c.xadd(__word_ptr[rcx], bx), Instruction.Create(Code.Xadd_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void xadd_reg32_reg32() {
			TestAssembler(c => c.xadd(edx, ebx), Instruction.Create(Code.Xadd_rm32_r32, edx, ebx));
		}

		[Fact]
		public void xadd_m_reg32() {
			TestAssembler(c => c.xadd(__dword_ptr[rcx], ebx), Instruction.Create(Code.Xadd_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void xadd_reg64_reg64() {
			TestAssembler(c => c.xadd(rdx, rbx), Instruction.Create(Code.Xadd_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void xadd_m_reg64() {
			TestAssembler(c => c.xadd(__qword_ptr[rcx], rbx), Instruction.Create(Code.Xadd_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void xchg_reg8_reg8() {
			TestAssembler(c => c.xchg(dl, bl), Instruction.Create(Code.Xchg_rm8_r8, dl, bl));
		}

		[Fact]
		public void xchg_m_reg8() {
			TestAssembler(c => c.xchg(__byte_ptr[rcx], bl), Instruction.Create(Code.Xchg_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void xchg_reg16_reg16() {
			{ /* if (src == Register.AX) */
				TestAssembler(c => c.xchg(dx, ax), Instruction.Create(Code.Xchg_r16_AX, dx, ax));
			} /* else */ TestAssembler(c => c.xchg(dx, bx), Instruction.Create(Code.Xchg_rm16_r16, dx, bx));
		}

		[Fact]
		public void xchg_m_reg16() {
			TestAssembler(c => c.xchg(__word_ptr[rcx], bx), Instruction.Create(Code.Xchg_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void xchg_reg32_reg32() {
			{ /* if (src == Register.EAX) */
				TestAssembler(c => c.xchg(edx, eax), Instruction.Create(Code.Xchg_r32_EAX, edx, eax));
			} /* else */ TestAssembler(c => c.xchg(edx, ebx), Instruction.Create(Code.Xchg_rm32_r32, edx, ebx));
		}

		[Fact]
		public void xchg_m_reg32() {
			TestAssembler(c => c.xchg(__dword_ptr[rcx], ebx), Instruction.Create(Code.Xchg_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void xchg_reg64_reg64() {
			{ /* if (src == Register.RAX) */
				TestAssembler(c => c.xchg(rdx, rax), Instruction.Create(Code.Xchg_r64_RAX, rdx, rax));
			} /* else */ TestAssembler(c => c.xchg(rdx, rbx), Instruction.Create(Code.Xchg_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void xchg_m_reg64() {
			TestAssembler(c => c.xchg(__qword_ptr[rcx], rbx), Instruction.Create(Code.Xchg_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void xcryptcbc() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptcbc(), Instruction.Create(Code.Xcryptcbc_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptcfb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptcfb(), Instruction.Create(Code.Xcryptcfb_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptctr() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptctr(), Instruction.Create(Code.Xcryptctr_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptecb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptecb(), Instruction.Create(Code.Xcryptecb_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptofb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptofb(), Instruction.Create(Code.Xcryptofb_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xend() {
			TestAssembler(c => c.xend(), Instruction.Create(Code.Xend));
		}

		[Fact]
		public void xgetbv() {
			TestAssembler(c => c.xgetbv(), Instruction.Create(Code.Xgetbv));
		}

		[Fact]
		public void xor_reg8_reg8() {
			TestAssembler(c => c.xor(dl, bl), Instruction.Create(Code.Xor_rm8_r8, dl, bl));
		}

		[Fact]
		public void xor_m_reg8() {
			TestAssembler(c => c.xor(__byte_ptr[rcx], bl), Instruction.Create(Code.Xor_rm8_r8, __byte_ptr[rcx].ToMemoryOperand(Bitness), bl));
		}

		[Fact]
		public void xor_reg16_reg16() {
			TestAssembler(c => c.xor(dx, bx), Instruction.Create(Code.Xor_rm16_r16, dx, bx));
		}

		[Fact]
		public void xor_m_reg16() {
			TestAssembler(c => c.xor(__word_ptr[rcx], bx), Instruction.Create(Code.Xor_rm16_r16, __word_ptr[rcx].ToMemoryOperand(Bitness), bx));
		}

		[Fact]
		public void xor_reg32_reg32() {
			TestAssembler(c => c.xor(edx, ebx), Instruction.Create(Code.Xor_rm32_r32, edx, ebx));
		}

		[Fact]
		public void xor_m_reg32() {
			TestAssembler(c => c.xor(__dword_ptr[rcx], ebx), Instruction.Create(Code.Xor_rm32_r32, __dword_ptr[rcx].ToMemoryOperand(Bitness), ebx));
		}

		[Fact]
		public void xor_reg64_reg64() {
			TestAssembler(c => c.xor(rdx, rbx), Instruction.Create(Code.Xor_rm64_r64, rdx, rbx));
		}

		[Fact]
		public void xor_m_reg64() {
			TestAssembler(c => c.xor(__qword_ptr[rcx], rbx), Instruction.Create(Code.Xor_rm64_r64, __qword_ptr[rcx].ToMemoryOperand(Bitness), rbx));
		}

		[Fact]
		public void xor_reg8_m() {
			TestAssembler(c => c.xor(dl, __byte_ptr[rcx]), Instruction.Create(Code.Xor_r8_rm8, dl, __byte_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xor_reg16_m() {
			TestAssembler(c => c.xor(dx, __word_ptr[rcx]), Instruction.Create(Code.Xor_r16_rm16, dx, __word_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xor_reg32_m() {
			TestAssembler(c => c.xor(edx, __dword_ptr[rcx]), Instruction.Create(Code.Xor_r32_rm32, edx, __dword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xor_reg64_m() {
			TestAssembler(c => c.xor(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Xor_r64_rm64, rdx, __qword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xor_reg8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.xor(al, -5), Instruction.Create(Code.Xor_AL_imm8, al, -5));
			} /* else */ TestAssembler(c => c.xor(dl, -5), Instruction.Create(Code.Xor_rm8_imm8, dl, -5));
		}

		[Fact]
		public void xor_reg16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.xor(ax, 16567), Instruction.Create(Code.Xor_AX_imm16, ax, 16567));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.xor(dx, sbyte.MinValue), Instruction.Create(Code.Xor_rm16_imm8, dx, sbyte.MinValue));
				TestAssembler(c => c.xor(dx, sbyte.MaxValue), Instruction.Create(Code.Xor_rm16_imm8, dx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.xor(dx, 16567), Instruction.Create(Code.Xor_rm16_imm16, dx, 16567));
		}

		[Fact]
		public void xor_reg32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.xor(eax, int.MaxValue), Instruction.Create(Code.Xor_EAX_imm32, eax, int.MaxValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.xor(edx, sbyte.MinValue), Instruction.Create(Code.Xor_rm32_imm8, edx, sbyte.MinValue));
				TestAssembler(c => c.xor(edx, sbyte.MaxValue), Instruction.Create(Code.Xor_rm32_imm8, edx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.xor(edx, int.MaxValue), Instruction.Create(Code.Xor_rm32_imm32, edx, int.MaxValue));
		}

		[Fact]
		public void xor_reg64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.xor(rax, int.MinValue), Instruction.Create(Code.Xor_RAX_imm32, rax, int.MinValue));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.xor(rdx, sbyte.MinValue), Instruction.Create(Code.Xor_rm64_imm8, rdx, sbyte.MinValue));
				TestAssembler(c => c.xor(rdx, sbyte.MaxValue), Instruction.Create(Code.Xor_rm64_imm8, rdx, sbyte.MaxValue));
			} /* else */ TestAssembler(c => c.xor(rdx, int.MinValue), Instruction.Create(Code.Xor_rm64_imm32, rdx, int.MinValue));
		}

		[Fact]
		public void xor_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.QwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.xor(__qword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Xor_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.xor(__qword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Xor_rm64_imm8, __qword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.xor(__qword_ptr[rdx], int.MinValue), Instruction.Create(Code.Xor_rm64_imm32, __qword_ptr[rdx].ToMemoryOperand(Bitness), int.MinValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.xor(__dword_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Xor_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.xor(__dword_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Xor_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.xor(__dword_ptr[rdx], int.MaxValue), Instruction.Create(Code.Xor_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.xor(__word_ptr[rdx], sbyte.MinValue), Instruction.Create(Code.Xor_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MinValue));
					TestAssembler(c => c.xor(__word_ptr[rdx], sbyte.MaxValue), Instruction.Create(Code.Xor_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), sbyte.MaxValue));
				} /* else */ TestAssembler(c => c.xor(__word_ptr[rdx], 16567), Instruction.Create(Code.Xor_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), 16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.xor(__byte_ptr[rdx], -5), Instruction.Create(Code.Xor_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), -5));
			}
			{
				AssertInvalid( () => {
					TestAssembler(c => c.xor(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Xor_rm8_imm8, __zmmword_ptr[rdx].ToMemoryOperand(Bitness), -5));
				});
			}
		}

		[Fact]
		public void xor_reg8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.xor(al, (byte)127), Instruction.Create(Code.Xor_AL_imm8, al, (uint)(byte)127));
			} /* else */ TestAssembler(c => c.xor(dl, (byte)127), Instruction.Create(Code.Xor_rm8_imm8, dl, (uint)(byte)127));
		}

		[Fact]
		public void xor_reg16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.xor(ax, (ushort)16567), Instruction.Create(Code.Xor_AX_imm16, ax, (uint)(ushort)16567));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.xor(dx, (ushort)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Xor_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MinValue)));
				TestAssembler(c => c.xor(dx, (ushort)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Xor_rm16_imm8, dx, (uint)(ushort)unchecked((ushort)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.xor(dx, (ushort)16567), Instruction.Create(Code.Xor_rm16_imm16, dx, (uint)(ushort)16567));
		}

		[Fact]
		public void xor_reg32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.xor(eax, (uint)int.MaxValue), Instruction.Create(Code.Xor_EAX_imm32, eax, (uint)(uint)int.MaxValue));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
				TestAssembler(c => c.xor(edx, (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Xor_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MinValue)));
				TestAssembler(c => c.xor(edx, (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Xor_rm32_imm8, edx, (uint)(uint)unchecked((uint)sbyte.MaxValue)));
			} /* else */ TestAssembler(c => c.xor(edx, (uint)int.MaxValue), Instruction.Create(Code.Xor_rm32_imm32, edx, (uint)(uint)int.MaxValue));
		}

		[Fact]
		public void xor_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.DwordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF)) */
					TestAssembler(c => c.xor(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MinValue)), Instruction.Create(Code.Xor_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MinValue)));
					TestAssembler(c => c.xor(__dword_ptr[rdx], (uint)unchecked((uint)sbyte.MaxValue)), Instruction.Create(Code.Xor_rm32_imm8, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((uint)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.xor(__dword_ptr[rdx], (uint)int.MaxValue), Instruction.Create(Code.Xor_rm32_imm32, __dword_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)int.MaxValue));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.WordPtr) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.xor(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MinValue)), Instruction.Create(Code.Xor_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MinValue)));
					TestAssembler(c => c.xor(__word_ptr[rdx], (uint)unchecked((ushort)sbyte.MaxValue)), Instruction.Create(Code.Xor_rm16_imm8, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)unchecked((ushort)sbyte.MaxValue)));
				} /* else */ TestAssembler(c => c.xor(__word_ptr[rdx], (uint)16567), Instruction.Create(Code.Xor_rm16_imm16, __word_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)16567));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.BytePtr) */
				TestAssembler(c => c.xor(__byte_ptr[rdx], (uint)127), Instruction.Create(Code.Xor_rm8_imm8, __byte_ptr[rdx].ToMemoryOperand(Bitness), (uint)(uint)127));
			}
			{
				// Already tested by signed version
			}
		}

		[Fact]
		public void xorpd_regXMM_regXMM() {
			TestAssembler(c => c.xorpd(xmm2, xmm3), Instruction.Create(Code.Xorpd_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void xorpd_regXMM_m() {
			TestAssembler(c => c.xorpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Xorpd_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xorps_regXMM_regXMM() {
			TestAssembler(c => c.xorps(xmm2, xmm3), Instruction.Create(Code.Xorps_xmm_xmmm128, xmm2, xmm3));
		}

		[Fact]
		public void xorps_regXMM_m() {
			TestAssembler(c => c.xorps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Xorps_xmm_xmmm128, xmm2, __xmmword_ptr[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xresldtrk() {
			TestAssembler(c => c.xresldtrk(), Instruction.Create(Code.Xresldtrk));
		}

		[Fact]
		public void xrstor_m() {
			TestAssembler(c => c.xrstor(__[rcx]), Instruction.Create(Code.Xrstor_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xrstor64_m() {
			TestAssembler(c => c.xrstor64(__[rcx]), Instruction.Create(Code.Xrstor64_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xrstors_m() {
			TestAssembler(c => c.xrstors(__[rcx]), Instruction.Create(Code.Xrstors_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xrstors64_m() {
			TestAssembler(c => c.xrstors64(__[rcx]), Instruction.Create(Code.Xrstors64_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsave_m() {
			TestAssembler(c => c.xsave(__[rcx]), Instruction.Create(Code.Xsave_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsave64_m() {
			TestAssembler(c => c.xsave64(__[rcx]), Instruction.Create(Code.Xsave64_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsavec_m() {
			TestAssembler(c => c.xsavec(__[rcx]), Instruction.Create(Code.Xsavec_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsavec64_m() {
			TestAssembler(c => c.xsavec64(__[rcx]), Instruction.Create(Code.Xsavec64_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsaveopt_m() {
			TestAssembler(c => c.xsaveopt(__[rcx]), Instruction.Create(Code.Xsaveopt_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsaveopt64_m() {
			TestAssembler(c => c.xsaveopt64(__[rcx]), Instruction.Create(Code.Xsaveopt64_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsaves_m() {
			TestAssembler(c => c.xsaves(__[rcx]), Instruction.Create(Code.Xsaves_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsaves64_m() {
			TestAssembler(c => c.xsaves64(__[rcx]), Instruction.Create(Code.Xsaves64_mem, __[rcx].ToMemoryOperand(Bitness)));
		}

		[Fact]
		public void xsetbv() {
			TestAssembler(c => c.xsetbv(), Instruction.Create(Code.Xsetbv));
		}

		[Fact]
		public void xsha1() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xsha1(), Instruction.Create(Code.Xsha1_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xsha256() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xsha256(), Instruction.Create(Code.Xsha256_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xstore() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xstore(), Instruction.Create(Code.Xstore_64));
			} /* else skip (Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xsusldtrk() {
			TestAssembler(c => c.xsusldtrk(), Instruction.Create(Code.Xsusldtrk));
		}

		[Fact]
		public void xtest() {
			TestAssembler(c => c.xtest(), Instruction.Create(Code.Xtest));
		}

	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_1() {
		TestAssemblerDeclareData(c => c.db((byte)1), new byte[] {(byte)1});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_2() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2), new byte[] {(byte)1, (byte)2});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_3() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3), new byte[] {(byte)1, (byte)2, (byte)3});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_4() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_5() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_6() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_7() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_8() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_9() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_10() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_11() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_12() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_13() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_14() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_15() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15});
	}
	/// <summary>Creates a db asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_16() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_1() {
		TestAssemblerDeclareData(c => c.db((sbyte)1), new sbyte[] {(sbyte)1});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_2() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2), new sbyte[] {(sbyte)1, (sbyte)2});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_3() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_4() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_5() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_6() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_7() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_8() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_9() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_10() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_11() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_12() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_13() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_14() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_15() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15});
	}
	/// <summary>Creates a db asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_16() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15, (sbyte)16), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15, (sbyte)16});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_1() {
		TestAssemblerDeclareData(c => c.dw((ushort)1), new ushort[] {(ushort)1});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_2() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2), new ushort[] {(ushort)1, (ushort)2});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_3() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3), new ushort[] {(ushort)1, (ushort)2, (ushort)3});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_4() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_5() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_6() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_7() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7});
	}
	/// <summary>Creates a dw asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_8() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7, (ushort)8), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7, (ushort)8});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_1() {
		TestAssemblerDeclareData(c => c.dw((short)1), new short[] {(short)1});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_2() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2), new short[] {(short)1, (short)2});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_3() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3), new short[] {(short)1, (short)2, (short)3});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_4() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4), new short[] {(short)1, (short)2, (short)3, (short)4});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_5() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_6() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_7() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7});
	}
	/// <summary>Creates a dw asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_8() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8});
	}
	/// <summary>Creates a dd asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_1() {
		TestAssemblerDeclareData(c => c.dd((uint)1), new uint[] {(uint)1});
	}
	/// <summary>Creates a dd asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_2() {
		TestAssemblerDeclareData(c => c.dd((uint)1, (uint)2), new uint[] {(uint)1, (uint)2});
	}
	/// <summary>Creates a dd asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_3() {
		TestAssemblerDeclareData(c => c.dd((uint)1, (uint)2, (uint)3), new uint[] {(uint)1, (uint)2, (uint)3});
	}
	/// <summary>Creates a dd asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_4() {
		TestAssemblerDeclareData(c => c.dd((uint)1, (uint)2, (uint)3, (uint)4), new uint[] {(uint)1, (uint)2, (uint)3, (uint)4});
	}
	/// <summary>Creates a dd asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_1() {
		TestAssemblerDeclareData(c => c.dd((int)1), new int[] {(int)1});
	}
	/// <summary>Creates a dd asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_2() {
		TestAssemblerDeclareData(c => c.dd((int)1, (int)2), new int[] {(int)1, (int)2});
	}
	/// <summary>Creates a dd asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_3() {
		TestAssemblerDeclareData(c => c.dd((int)1, (int)2, (int)3), new int[] {(int)1, (int)2, (int)3});
	}
	/// <summary>Creates a dd asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_4() {
		TestAssemblerDeclareData(c => c.dd((int)1, (int)2, (int)3, (int)4), new int[] {(int)1, (int)2, (int)3, (int)4});
	}
	/// <summary>Creates a dd asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_1() {
		TestAssemblerDeclareData(c => c.dd((float)1), new float[] {(float)1});
	}
	/// <summary>Creates a dd asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_2() {
		TestAssemblerDeclareData(c => c.dd((float)1, (float)2), new float[] {(float)1, (float)2});
	}
	/// <summary>Creates a dd asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_3() {
		TestAssemblerDeclareData(c => c.dd((float)1, (float)2, (float)3), new float[] {(float)1, (float)2, (float)3});
	}
	/// <summary>Creates a dd asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_4() {
		TestAssemblerDeclareData(c => c.dd((float)1, (float)2, (float)3, (float)4), new float[] {(float)1, (float)2, (float)3, (float)4});
	}
	/// <summary>Creates a dq asm directive with the type ulong.</summary>
	[Fact]
	public void TestDeclareData_dq_ulong_1() {
		TestAssemblerDeclareData(c => c.dq((ulong)1), new ulong[] {(ulong)1});
	}
	/// <summary>Creates a dq asm directive with the type ulong.</summary>
	[Fact]
	public void TestDeclareData_dq_ulong_2() {
		TestAssemblerDeclareData(c => c.dq((ulong)1, (ulong)2), new ulong[] {(ulong)1, (ulong)2});
	}
	/// <summary>Creates a dq asm directive with the type long.</summary>
	[Fact]
	public void TestDeclareData_dq_long_1() {
		TestAssemblerDeclareData(c => c.dq((long)1), new long[] {(long)1});
	}
	/// <summary>Creates a dq asm directive with the type long.</summary>
	[Fact]
	public void TestDeclareData_dq_long_2() {
		TestAssemblerDeclareData(c => c.dq((long)1, (long)2), new long[] {(long)1, (long)2});
	}
	/// <summary>Creates a dq asm directive with the type double.</summary>
	[Fact]
	public void TestDeclareData_dq_double_1() {
		TestAssemblerDeclareData(c => c.dq((double)1), new double[] {(double)1});
	}
	/// <summary>Creates a dq asm directive with the type double.</summary>
	[Fact]
	public void TestDeclareData_dq_double_2() {
		TestAssemblerDeclareData(c => c.dq((double)1, (double)2), new double[] {(double)1, (double)2});
	}
	}
}
#endif
